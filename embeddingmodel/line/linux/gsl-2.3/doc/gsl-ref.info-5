This is gsl-ref.info, produced by makeinfo version 5.1 from
gsl-ref.texi.

Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004,
2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016
The GSL Team.

   Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with the
Invariant Sections being "GNU General Public License" and "Free Software
Needs Free Documentation", the Front-Cover text being "A GNU Manual",
and with the Back-Cover Text being (a) (see below).  A copy of the
license is included in the section entitled "GNU Free Documentation
License".

   (a) The Back-Cover Text is: "You have the freedom to copy and modify
this GNU Manual."
INFO-DIR-SECTION Software libraries
START-INFO-DIR-ENTRY
* gsl-ref: (gsl-ref).                   GNU Scientific Library - Reference
END-INFO-DIR-ENTRY


File: gsl-ref.info,  Node: Nonlinear Least-Squares Geodesic Acceleration Example,  Next: Nonlinear Least-Squares Comparison Example,  Prev: Nonlinear Least-Squares Exponential Fit Example,  Up: Nonlinear Least-Squares Examples

39.12.2 Geodesic Acceleration Example
-------------------------------------

The following example program minimizes a modified Rosenbrock function,
which is characterized by a narrow canyon with steep walls.  The
starting point is selected high on the canyon wall, so the solver must
first find the canyon bottom and then navigate to the minimum.  The
problem is solved both with and without using geodesic acceleration for
comparison.  The cost function is given by

     Phi(x) = 1/2 (f1^2 + f2^2)
     f1 = 100 ( x2 - x1^2 )
     f2 = 1 - x1

The Jacobian matrix is given by

     J = [ -200*x1 100 ; -1 0 ]

In order to use geodesic acceleration, the user must provide the second
directional derivative of each residual in the velocity direction, D_v^2
f_i = \sum_{\alpha\beta} v_{\alpha} v_{\beta} \partial_{\alpha}
\partial_{\beta} f_i.  The velocity vector v is provided by the solver.
For this example, these derivatives are given by

     fvv = [ -200 v1^2 ; 0 ]

The solution of this minimization problem is given by

     x* = [ 1 ; 1 ]
     Phi(x*) = 0

The program output is shown below.

     === Solving system without acceleration ===
     NITER         = 53
     NFEV          = 56
     NJEV          = 54
     NAEV          = 0
     initial cost  = 2.250225000000e+04
     final cost    = 6.674986031430e-18
     final x       = (9.999999974165e-01, 9.999999948328e-01)
     final cond(J) = 6.000096055094e+02
     === Solving system with acceleration ===
     NITER         = 15
     NFEV          = 17
     NJEV          = 16
     NAEV          = 16
     initial cost  = 2.250225000000e+04
     final cost    = 7.518932873279e-19
     final x       = (9.999999991329e-01, 9.999999982657e-01)
     final cond(J) = 6.000097233278e+02

We can see that enabling geodesic acceleration requires less than a
third of the number of Jacobian evaluations in order to locate the
minimum.  The path taken by both methods is shown in the figure below.
The contours show the cost function \Phi(x_1,x_2).  We see that both
methods quickly find the canyon bottom, but the geodesic acceleration
method navigates along the bottom to the solution with significantly
fewer iterations.

The program is given below.

     #include <stdlib.h>
     #include <stdio.h>
     #include <gsl/gsl_vector.h>
     #include <gsl/gsl_matrix.h>
     #include <gsl/gsl_blas.h>
     #include <gsl/gsl_multifit_nlinear.h>

     int
     func_f (const gsl_vector * x, void *params, gsl_vector * f)
     {
       double x1 = gsl_vector_get(x, 0);
       double x2 = gsl_vector_get(x, 1);

       gsl_vector_set(f, 0, 100.0 * (x2 - x1*x1));
       gsl_vector_set(f, 1, 1.0 - x1);

       return GSL_SUCCESS;
     }

     int
     func_df (const gsl_vector * x, void *params, gsl_matrix * J)
     {
       double x1 = gsl_vector_get(x, 0);

       gsl_matrix_set(J, 0, 0, -200.0*x1);
       gsl_matrix_set(J, 0, 1, 100.0);
       gsl_matrix_set(J, 1, 0, -1.0);
       gsl_matrix_set(J, 1, 1, 0.0);

       return GSL_SUCCESS;
     }

     int
     func_fvv (const gsl_vector * x, const gsl_vector * v,
               void *params, gsl_vector * fvv)
     {
       double v1 = gsl_vector_get(v, 0);

       gsl_vector_set(fvv, 0, -200.0 * v1 * v1);
       gsl_vector_set(fvv, 1, 0.0);

       return GSL_SUCCESS;
     }

     void
     callback(const size_t iter, void *params,
              const gsl_multifit_nlinear_workspace *w)
     {
       gsl_vector * x = gsl_multifit_nlinear_position(w);

       /* print out current location */
       printf("%f %f\n",
              gsl_vector_get(x, 0),
              gsl_vector_get(x, 1));
     }

     void
     solve_system(gsl_vector *x0, gsl_multifit_nlinear_fdf *fdf,
                  gsl_multifit_nlinear_parameters *params)
     {
       const gsl_multifit_nlinear_type *T = gsl_multifit_nlinear_trust;
       const size_t max_iter = 200;
       const double xtol = 1.0e-8;
       const double gtol = 1.0e-8;
       const double ftol = 1.0e-8;
       const size_t n = fdf->n;
       const size_t p = fdf->p;
       gsl_multifit_nlinear_workspace *work =
         gsl_multifit_nlinear_alloc(T, params, n, p);
       gsl_vector * f = gsl_multifit_nlinear_residual(work);
       gsl_vector * x = gsl_multifit_nlinear_position(work);
       int info;
       double chisq0, chisq, rcond;

       /* initialize solver */
       gsl_multifit_nlinear_init(x0, fdf, work);

       /* store initial cost */
       gsl_blas_ddot(f, f, &chisq0);

       /* iterate until convergence */
       gsl_multifit_nlinear_driver(max_iter, xtol, gtol, ftol,
                                   callback, NULL, &info, work);

       /* store final cost */
       gsl_blas_ddot(f, f, &chisq);

       /* store cond(J(x)) */
       gsl_multifit_nlinear_rcond(&rcond, work);

       /* print summary */

       fprintf(stderr, "NITER         = %zu\n", gsl_multifit_nlinear_niter(work));
       fprintf(stderr, "NFEV          = %zu\n", fdf->nevalf);
       fprintf(stderr, "NJEV          = %zu\n", fdf->nevaldf);
       fprintf(stderr, "NAEV          = %zu\n", fdf->nevalfvv);
       fprintf(stderr, "initial cost  = %.12e\n", chisq0);
       fprintf(stderr, "final cost    = %.12e\n", chisq);
       fprintf(stderr, "final x       = (%.12e, %.12e)\n",
               gsl_vector_get(x, 0), gsl_vector_get(x, 1));
       fprintf(stderr, "final cond(J) = %.12e\n", 1.0 / rcond);

       printf("\n\n");

       gsl_multifit_nlinear_free(work);
     }

     int
     main (void)
     {
       const size_t n = 2;
       const size_t p = 2;
       gsl_vector *f = gsl_vector_alloc(n);
       gsl_vector *x = gsl_vector_alloc(p);
       gsl_multifit_nlinear_fdf fdf;
       gsl_multifit_nlinear_parameters fdf_params =
         gsl_multifit_nlinear_default_parameters();

       /* print map of Phi(x1, x2) */
       {
         double x1, x2, chisq;
         double *f1 = gsl_vector_ptr(f, 0);
         double *f2 = gsl_vector_ptr(f, 1);

         for (x1 = -1.2; x1 < 1.3; x1 += 0.1)
           {
             for (x2 = -0.5; x2 < 2.1; x2 += 0.1)
               {
                 gsl_vector_set(x, 0, x1);
                 gsl_vector_set(x, 1, x2);
                 func_f(x, NULL, f);

                 chisq = (*f1) * (*f1) + (*f2) * (*f2);
                 printf("%f %f %f\n", x1, x2, chisq);
               }
             printf("\n");
           }
         printf("\n\n");
       }

       /* define function to be minimized */
       fdf.f = func_f;
       fdf.df = func_df;
       fdf.fvv = func_fvv;
       fdf.n = n;
       fdf.p = p;
       fdf.params = NULL;

       /* starting point */
       gsl_vector_set(x, 0, -0.5);
       gsl_vector_set(x, 1, 1.75);

       fprintf(stderr, "=== Solving system without acceleration ===\n");
       fdf_params.trs = gsl_multifit_nlinear_trs_lm;
       solve_system(x, &fdf, &fdf_params);

       fprintf(stderr, "=== Solving system with acceleration ===\n");
       fdf_params.trs = gsl_multifit_nlinear_trs_lmaccel;
       solve_system(x, &fdf, &fdf_params);

       gsl_vector_free(f);
       gsl_vector_free(x);

       return 0;
     }


File: gsl-ref.info,  Node: Nonlinear Least-Squares Comparison Example,  Next: Nonlinear Least-Squares Large Example,  Prev: Nonlinear Least-Squares Geodesic Acceleration Example,  Up: Nonlinear Least-Squares Examples

39.12.3 Comparing TRS Methods Example
-------------------------------------

The following program compares all available nonlinear least squares
trust-region subproblem (TRS) methods on the Branin function, a common
optimization test problem.  The cost function is given by

     \Phi(x) &= 1/2 (f_1^2 + f_2^2)
     f_1 &= x_2 + a_1 x_1^2 + a_2 x_1 + a_3
     f_2 &= sqrt(a_4) sqrt(1 + (1 - a_5) cos(x_1))

   with a_1 = -{5.1 \over 4 \pi^2}, a_2 = {5 \over \pi}, a_3 = -6, a_4 =
10, a_5 = {1 \over 8\pi}.  There are three minima of this function in
the range (x_1,x_2) \in [-5,15] \times [-5,15].  The program below uses
the starting point (x_1,x_2) = (6,14.5) and calculates the solution with
all available nonlinear least squares TRS methods.  The program output
is shown below.

Method                    NITER  NFEV  NJEV  Initial Cost  Final cost   Final cond(J) Final x
levenberg-marquardt       20     27    21    1.9874e+02    3.9789e-01   6.1399e+07    (-3.14e+00, 1.23e+01)
levenberg-marquardt+accel 27     36    28    1.9874e+02    3.9789e-01   1.4465e+07    (3.14e+00, 2.27e+00)
dogleg                    23     64    23    1.9874e+02    3.9789e-01   5.0692e+08    (3.14e+00, 2.28e+00)
double-dogleg             24     69    24    1.9874e+02    3.9789e-01   3.4879e+07    (3.14e+00, 2.27e+00)
2D-subspace               23     54    24    1.9874e+02    3.9789e-01   2.5142e+07    (3.14e+00, 2.27e+00)

The first row of output above corresponds to standard
Levenberg-Marquardt, while the second row includes geodesic
acceleration.  We see that the standard LM method converges to the
minimum at (-\pi,12.275) and also uses the least number of iterations
and Jacobian evaluations.  All other methods converge to the minimum
(\pi,2.275) and perform similarly in terms of number of Jacobian
evaluations.  We see that J is fairly ill-conditioned at both minima,
indicating that the QR (or SVD) solver is the best choice for this
problem.  Since there are only two parameters in this optimization
problem, we can easily visualize the paths taken by each method, which
are shown in the figure below.  The figure shows contours of the cost
function \Phi(x_1,x_2) which exhibits three global minima in the range
[-5,15] \times [-5,15].  The paths taken by each solver are shown as
colored lines.

The program is given below.

     #include <stdlib.h>
     #include <stdio.h>
     #include <gsl/gsl_vector.h>
     #include <gsl/gsl_matrix.h>
     #include <gsl/gsl_blas.h>
     #include <gsl/gsl_multifit_nlinear.h>

     /* parameters to model */
     struct model_params
     {
       double a1;
       double a2;
       double a3;
       double a4;
       double a5;
     };

     /* Branin function */
     int
     func_f (const gsl_vector * x, void *params, gsl_vector * f)
     {
       struct model_params *par = (struct model_params *) params;
       double x1 = gsl_vector_get(x, 0);
       double x2 = gsl_vector_get(x, 1);
       double f1 = x2 + par->a1 * x1 * x1 + par->a2 * x1 + par->a3;
       double f2 = sqrt(par->a4) * sqrt(1.0 + (1.0 - par->a5) * cos(x1));

       gsl_vector_set(f, 0, f1);
       gsl_vector_set(f, 1, f2);

       return GSL_SUCCESS;
     }

     int
     func_df (const gsl_vector * x, void *params, gsl_matrix * J)
     {
       struct model_params *par = (struct model_params *) params;
       double x1 = gsl_vector_get(x, 0);
       double f2 = sqrt(par->a4) * sqrt(1.0 + (1.0 - par->a5) * cos(x1));

       gsl_matrix_set(J, 0, 0, 2.0 * par->a1 * x1 + par->a2);
       gsl_matrix_set(J, 0, 1, 1.0);

       gsl_matrix_set(J, 1, 0, -0.5 * par->a4 / f2 * (1.0 - par->a5) * sin(x1));
       gsl_matrix_set(J, 1, 1, 0.0);

       return GSL_SUCCESS;
     }

     int
     func_fvv (const gsl_vector * x, const gsl_vector * v,
               void *params, gsl_vector * fvv)
     {
       struct model_params *par = (struct model_params *) params;
       double x1 = gsl_vector_get(x, 0);
       double v1 = gsl_vector_get(v, 0);
       double c = cos(x1);
       double s = sin(x1);
       double f2 = sqrt(par->a4) * sqrt(1.0 + (1.0 - par->a5) * c);
       double t = 0.5 * par->a4 * (1.0 - par->a5) / f2;

       gsl_vector_set(fvv, 0, 2.0 * par->a1 * v1 * v1);
       gsl_vector_set(fvv, 1, -t * (c + s*s/f2) * v1 * v1);

       return GSL_SUCCESS;
     }

     void
     callback(const size_t iter, void *params,
              const gsl_multifit_nlinear_workspace *w)
     {
       gsl_vector * x = gsl_multifit_nlinear_position(w);
       double x1 = gsl_vector_get(x, 0);
       double x2 = gsl_vector_get(x, 1);

       /* print out current location */
       printf("%f %f\n", x1, x2);
     }

     void
     solve_system(gsl_vector *x0, gsl_multifit_nlinear_fdf *fdf,
                  gsl_multifit_nlinear_parameters *params)
     {
       const gsl_multifit_nlinear_type *T = gsl_multifit_nlinear_trust;
       const size_t max_iter = 200;
       const double xtol = 1.0e-8;
       const double gtol = 1.0e-8;
       const double ftol = 1.0e-8;
       const size_t n = fdf->n;
       const size_t p = fdf->p;
       gsl_multifit_nlinear_workspace *work =
         gsl_multifit_nlinear_alloc(T, params, n, p);
       gsl_vector * f = gsl_multifit_nlinear_residual(work);
       gsl_vector * x = gsl_multifit_nlinear_position(work);
       int info;
       double chisq0, chisq, rcond;

       printf("# %s/%s\n",
              gsl_multifit_nlinear_name(work),
              gsl_multifit_nlinear_trs_name(work));

       /* initialize solver */
       gsl_multifit_nlinear_init(x0, fdf, work);

       /* store initial cost */
       gsl_blas_ddot(f, f, &chisq0);

       /* iterate until convergence */
       gsl_multifit_nlinear_driver(max_iter, xtol, gtol, ftol,
                                   callback, NULL, &info, work);

       /* store final cost */
       gsl_blas_ddot(f, f, &chisq);

       /* store cond(J(x)) */
       gsl_multifit_nlinear_rcond(&rcond, work);

       /* print summary */
       fprintf(stderr, "%-25s %-6zu %-5zu %-5zu %-13.4e %-12.4e %-13.4e (%.2e, %.2e)\n",
               gsl_multifit_nlinear_trs_name(work),
               gsl_multifit_nlinear_niter(work),
               fdf->nevalf,
               fdf->nevaldf,
               chisq0,
               chisq,
               1.0 / rcond,
               gsl_vector_get(x, 0),
               gsl_vector_get(x, 1));

       printf("\n\n");

       gsl_multifit_nlinear_free(work);
     }

     int
     main (void)
     {
       const size_t n = 2;
       const size_t p = 2;
       gsl_vector *f = gsl_vector_alloc(n);
       gsl_vector *x = gsl_vector_alloc(p);
       gsl_multifit_nlinear_fdf fdf;
       gsl_multifit_nlinear_parameters fdf_params =
         gsl_multifit_nlinear_default_parameters();
       struct model_params params;

       params.a1 = -5.1 / (4.0 * M_PI * M_PI);
       params.a2 = 5.0 / M_PI;
       params.a3 = -6.0;
       params.a4 = 10.0;
       params.a5 = 1.0 / (8.0 * M_PI);

       /* print map of Phi(x1, x2) */
       {
         double x1, x2, chisq;

         for (x1 = -5.0; x1 < 15.0; x1 += 0.1)
           {
             for (x2 = -5.0; x2 < 15.0; x2 += 0.1)
               {
                 gsl_vector_set(x, 0, x1);
                 gsl_vector_set(x, 1, x2);
                 func_f(x, &params, f);

                 gsl_blas_ddot(f, f, &chisq);

                 printf("%f %f %f\n", x1, x2, chisq);
               }
             printf("\n");
           }
         printf("\n\n");
       }

       /* define function to be minimized */
       fdf.f = func_f;
       fdf.df = func_df;
       fdf.fvv = func_fvv;
       fdf.n = n;
       fdf.p = p;
       fdf.params = &params;

       /* starting point */
       gsl_vector_set(x, 0, 6.0);
       gsl_vector_set(x, 1, 14.5);

       fprintf(stderr, "%-25s %-6s %-5s %-5s %-13s %-12s %-13s %-15s\n",
               "Method", "NITER", "NFEV", "NJEV", "Initial Cost",
               "Final cost", "Final cond(J)", "Final x");

       fdf_params.trs = gsl_multifit_nlinear_trs_lm;
       solve_system(x, &fdf, &fdf_params);

       fdf_params.trs = gsl_multifit_nlinear_trs_lmaccel;
       solve_system(x, &fdf, &fdf_params);

       fdf_params.trs = gsl_multifit_nlinear_trs_dogleg;
       solve_system(x, &fdf, &fdf_params);

       fdf_params.trs = gsl_multifit_nlinear_trs_ddogleg;
       solve_system(x, &fdf, &fdf_params);

       fdf_params.trs = gsl_multifit_nlinear_trs_subspace2D;
       solve_system(x, &fdf, &fdf_params);

       gsl_vector_free(f);
       gsl_vector_free(x);

       return 0;
     }


File: gsl-ref.info,  Node: Nonlinear Least-Squares Large Example,  Prev: Nonlinear Least-Squares Comparison Example,  Up: Nonlinear Least-Squares Examples

39.12.4 Large Nonlinear Least Squares Example
---------------------------------------------

The following program illustrates the large nonlinear least squares
solvers on a system with significant sparse structure in the Jacobian.
The cost function is given by

     \Phi(x) &= 1/2 \sum_{i=1}^{p+1} f_i^2
     f_i &= \sqrt{\alpha} (x_i - 1), 1 \le i \le p
     f_{p+1} &= ||x||^2 - 1/4

   with \alpha = 10^{-5}.  The residual f_{p+1} imposes a constraint on
the p parameters x, to ensure that ||x||^2 \approx {1 \over 4}.  The
(p+1)-by-p Jacobian for this system is given by

     J(x) = [ \sqrt{alpha} I_p; 2 x^T ]

   and the normal equations matrix is given by

     J^T J = [ \alpha I_p + 4 x x^T ]

Finally, the second directional derivative of f for the geodesic
acceleration method is given by

     fvv = [ 0; 2 ||v||^2 ]

Since the upper p-by-p block of J is diagonal, this sparse structure
should be exploited in the nonlinear solver.  For comparison, the
following program solves the system for p = 2000 using the dense direct
Cholesky solver based on the normal equations matrix J^T J, as well as
the iterative Steihaug-Toint solver, based on sparse matrix-vector
products J u and J^T u.  The program output is shown below.

Method                    NITER NFEV NJUEV NJTJEV NAEV Init Cost  Final cost cond(J) Final |x|^2 Time (s)
levenberg-marquardt       25    31   26    26     0    7.1218e+18 1.9555e-02 447.50  2.5044e-01  46.28
levenberg-marquardt+accel 22    23   45    23     22   7.1218e+18 1.9555e-02 447.64  2.5044e-01  33.92
dogleg                    37    87   36    36     0    7.1218e+18 1.9555e-02 447.59  2.5044e-01  56.05
double-dogleg             35    88   34    34     0    7.1218e+18 1.9555e-02 447.62  2.5044e-01  52.65
2D-subspace               37    88   36    36     0    7.1218e+18 1.9555e-02 447.71  2.5044e-01  59.75
steihaug-toint            35    88   345   0      0    7.1218e+18 1.9555e-02 inf     2.5044e-01  0.09

The first five rows use methods based on factoring the dense J^T J
matrix while the last row uses the iterative Steihaug-Toint method.
While the number of Jacobian matrix-vector products (NJUEV) is less for
the dense methods, the added time to construct and factor the J^T J
matrix (NJTJEV) results in a much larger runtime than the iterative
method (see last column).

The program is given below.

     #include <stdlib.h>
     #include <stdio.h>
     #include <sys/time.h>
     #include <gsl/gsl_vector.h>
     #include <gsl/gsl_matrix.h>
     #include <gsl/gsl_blas.h>
     #include <gsl/gsl_multilarge_nlinear.h>
     #include <gsl/gsl_spblas.h>
     #include <gsl/gsl_spmatrix.h>

     /* parameters for functions */
     struct model_params
     {
       double alpha;
       gsl_spmatrix *J;
     };

     /* penalty function */
     int
     penalty_f (const gsl_vector * x, void *params, gsl_vector * f)
     {
       struct model_params *par = (struct model_params *) params;
       const double sqrt_alpha = sqrt(par->alpha);
       const size_t p = x->size;
       size_t i;
       double sum = 0.0;

       for (i = 0; i < p; ++i)
         {
           double xi = gsl_vector_get(x, i);

           gsl_vector_set(f, i, sqrt_alpha*(xi - 1.0));

           sum += xi * xi;
         }

       gsl_vector_set(f, p, sum - 0.25);

       return GSL_SUCCESS;
     }

     int
     penalty_df (CBLAS_TRANSPOSE_t TransJ, const gsl_vector * x,
                 const gsl_vector * u, void * params, gsl_vector * v,
                 gsl_matrix * JTJ)
     {
       struct model_params *par = (struct model_params *) params;
       const size_t p = x->size;
       size_t j;

       /* store 2*x in last row of J */
       for (j = 0; j < p; ++j)
         {
           double xj = gsl_vector_get(x, j);
           gsl_spmatrix_set(par->J, p, j, 2.0 * xj);
         }

       /* compute v = op(J) u */
       if (v)
         gsl_spblas_dgemv(TransJ, 1.0, par->J, u, 0.0, v);

       if (JTJ)
         {
           gsl_vector_view diag = gsl_matrix_diagonal(JTJ);

           /* compute J^T J = [ alpha*I_p + 4 x x^T ] */
           gsl_matrix_set_zero(JTJ);

           /* store 4 x x^T in lower half of JTJ */
           gsl_blas_dsyr(CblasLower, 4.0, x, JTJ);

           /* add alpha to diag(JTJ) */
           gsl_vector_add_constant(&diag.vector, par->alpha);
         }

       return GSL_SUCCESS;
     }

     int
     penalty_fvv (const gsl_vector * x, const gsl_vector * v,
                  void *params, gsl_vector * fvv)
     {
       const size_t p = x->size;
       double normv = gsl_blas_dnrm2(v);

       gsl_vector_set_zero(fvv);
       gsl_vector_set(fvv, p, 2.0 * normv * normv);

       (void)params; /* avoid unused parameter warning */

       return GSL_SUCCESS;
     }

     void
     solve_system(const gsl_vector *x0, gsl_multilarge_nlinear_fdf *fdf,
                  gsl_multilarge_nlinear_parameters *params)
     {
       const gsl_multilarge_nlinear_type *T = gsl_multilarge_nlinear_trust;
       const size_t max_iter = 200;
       const double xtol = 1.0e-8;
       const double gtol = 1.0e-8;
       const double ftol = 1.0e-8;
       const size_t n = fdf->n;
       const size_t p = fdf->p;
       gsl_multilarge_nlinear_workspace *work =
         gsl_multilarge_nlinear_alloc(T, params, n, p);
       gsl_vector * f = gsl_multilarge_nlinear_residual(work);
       gsl_vector * x = gsl_multilarge_nlinear_position(work);
       int info;
       double chisq0, chisq, rcond, xsq;
       struct timeval tv0, tv1;

       gettimeofday(&tv0, NULL);

       /* initialize solver */
       gsl_multilarge_nlinear_init(x0, fdf, work);

       /* store initial cost */
       gsl_blas_ddot(f, f, &chisq0);

       /* iterate until convergence */
       gsl_multilarge_nlinear_driver(max_iter, xtol, gtol, ftol,
                                     NULL, NULL, &info, work);

       gettimeofday(&tv1, NULL);

       /* store final cost */
       gsl_blas_ddot(f, f, &chisq);

       /* compute final ||x||^2 */
       gsl_blas_ddot(x, x, &xsq);

       /* store cond(J(x)) */
       gsl_multilarge_nlinear_rcond(&rcond, work);

       /* print summary */
       fprintf(stderr, "%-25s %-5zu %-4zu %-5zu %-6zu %-4zu %-10.4e %-10.4e %-7.2f %-11.4e %.2f\n",
               gsl_multilarge_nlinear_trs_name(work),
               gsl_multilarge_nlinear_niter(work),
               fdf->nevalf,
               fdf->nevaldfu,
               fdf->nevaldf2,
               fdf->nevalfvv,
               chisq0,
               chisq,
               1.0 / rcond,
               xsq,
               (tv1.tv_sec - tv0.tv_sec) + 1.0e-6 * (tv1.tv_usec - tv0.tv_usec));

       gsl_multilarge_nlinear_free(work);
     }

     int
     main (void)
     {
       const size_t p = 2000;
       const size_t n = p + 1;
       gsl_vector *f = gsl_vector_alloc(n);
       gsl_vector *x = gsl_vector_alloc(p);

       /* allocate sparse Jacobian matrix with 2*p non-zero elements in triplet format */
       gsl_spmatrix *J = gsl_spmatrix_alloc_nzmax(n, p, 2 * p, GSL_SPMATRIX_TRIPLET);

       gsl_multilarge_nlinear_fdf fdf;
       gsl_multilarge_nlinear_parameters fdf_params =
         gsl_multilarge_nlinear_default_parameters();
       struct model_params params;
       size_t i;

       params.alpha = 1.0e-5;
       params.J = J;

       /* define function to be minimized */
       fdf.f = penalty_f;
       fdf.df = penalty_df;
       fdf.fvv = penalty_fvv;
       fdf.n = n;
       fdf.p = p;
       fdf.params = &params;

       for (i = 0; i < p; ++i)
         {
           /* starting point */
           gsl_vector_set(x, i, i + 1.0);

           /* store sqrt(alpha)*I_p in upper p-by-p block of J */
           gsl_spmatrix_set(J, i, i, sqrt(params.alpha));
         }

       fprintf(stderr, "%-25s %-4s %-4s %-5s %-6s %-4s %-10s %-10s %-7s %-11s %-10s\n",
               "Method", "NITER", "NFEV", "NJUEV", "NJTJEV", "NAEV", "Init Cost",
               "Final cost", "cond(J)", "Final |x|^2", "Time (s)");

       fdf_params.scale = gsl_multilarge_nlinear_scale_levenberg;

       fdf_params.trs = gsl_multilarge_nlinear_trs_lm;
       solve_system(x, &fdf, &fdf_params);

       fdf_params.trs = gsl_multilarge_nlinear_trs_lmaccel;
       solve_system(x, &fdf, &fdf_params);

       fdf_params.trs = gsl_multilarge_nlinear_trs_dogleg;
       solve_system(x, &fdf, &fdf_params);

       fdf_params.trs = gsl_multilarge_nlinear_trs_ddogleg;
       solve_system(x, &fdf, &fdf_params);

       fdf_params.trs = gsl_multilarge_nlinear_trs_subspace2D;
       solve_system(x, &fdf, &fdf_params);

       fdf_params.trs = gsl_multilarge_nlinear_trs_cgst;
       solve_system(x, &fdf, &fdf_params);

       gsl_vector_free(f);
       gsl_vector_free(x);
       gsl_spmatrix_free(J);

       return 0;
     }


File: gsl-ref.info,  Node: Nonlinear Least-Squares References and Further Reading,  Prev: Nonlinear Least-Squares Examples,  Up: Nonlinear Least-Squares Fitting

39.13 References and Further Reading
====================================

The following publications are relevant to the algorithms described in
this section,

     J.J. More', 'The Levenberg-Marquardt Algorithm: Implementation and
     Theory', Lecture Notes in Mathematics, v630 (1978), ed G. Watson.

     H. B. Nielsen, "Damping Parameter in Marquardt's Method", IMM
     Department of Mathematical Modeling, DTU, Tech.  Report
     IMM-REP-1999-05 (1999).

     K. Madsen and H. B. Nielsen, "Introduction to Optimization and Data
     Fitting", IMM Department of Mathematical Modeling, DTU, 2010.

     J. E. Dennis and R. B. Schnabel, Numerical Methods for
     Unconstrained Optimization and Nonlinear Equations, SIAM, 1996.

     M. K. Transtrum, B. B. Machta, and J. P. Sethna, Geometry of
     nonlinear least squares with applications to sloppy models and
     optimization, Phys.  Rev.  E 83, 036701, 2011.

     M. K. Transtrum and J. P. Sethna, Improvements to the
     Levenberg-Marquardt algorithm for nonlinear least-squares
     minimization, arXiv:1201.5885, 2012.

     J.J. More', B.S. Garbow, K.E. Hillstrom, "Testing Unconstrained
     Optimization Software", ACM Transactions on Mathematical Software,
     Vol 7, No 1 (1981), p 17-41.

     H. B. Nielsen, "UCTP Test Problems for Unconstrained Optimization",
     IMM Department of Mathematical Modeling, DTU, Tech.  Report
     IMM-REP-2000-17 (2000).


File: gsl-ref.info,  Node: Basis Splines,  Next: Sparse Matrices,  Prev: Nonlinear Least-Squares Fitting,  Up: Top

40 Basis Splines
****************

This chapter describes functions for the computation of smoothing basis
splines (B-splines).  A smoothing spline differs from an interpolating
spline in that the resulting curve is not required to pass through each
datapoint.  *Note Interpolation::, for information about interpolating
splines.

   The header file 'gsl_bspline.h' contains the prototypes for the
bspline functions and related declarations.

* Menu:

* Overview of B-splines::
* Initializing the B-splines solver::
* Constructing the knots vector::
* Evaluation of B-spline basis functions::
* Evaluation of B-spline basis function derivatives::
* Working with the Greville abscissae::
* Example programs for B-splines::
* B-Spline References and Further Reading::


File: gsl-ref.info,  Node: Overview of B-splines,  Next: Initializing the B-splines solver,  Up: Basis Splines

40.1 Overview
=============

B-splines are commonly used as basis functions to fit smoothing curves
to large data sets.  To do this, the abscissa axis is broken up into
some number of intervals, where the endpoints of each interval are
called "breakpoints".  These breakpoints are then converted to "knots"
by imposing various continuity and smoothness conditions at each
interface.  Given a nondecreasing knot vector t = {t_0, t_1, ...,
t_{n+k-1}}, the n basis splines of order k are defined by

     B_(i,1)(x) = (1, t_i <= x < t_(i+1)
                  (0, else
     B_(i,k)(x) = [(x - t_i)/(t_(i+k-1) - t_i)] B_(i,k-1)(x)
                   + [(t_(i+k) - x)/(t_(i+k) - t_(i+1))] B_(i+1,k-1)(x)

for i = 0, ..., n-1.  The common case of cubic B-splines is given by k =
4.  The above recurrence relation can be evaluated in a numerically
stable way by the de Boor algorithm.

   If we define appropriate knots on an interval [a,b] then the B-spline
basis functions form a complete set on that interval.  Therefore we can
expand a smoothing function as

     f(x) = \sum_i c_i B_(i,k)(x)

given enough (x_j, f(x_j)) data pairs.  The coefficients c_i can be
readily obtained from a least-squares fit.


File: gsl-ref.info,  Node: Initializing the B-splines solver,  Next: Constructing the knots vector,  Prev: Overview of B-splines,  Up: Basis Splines

40.2 Initializing the B-splines solver
======================================

The computation of B-spline functions requires a preallocated workspace
of type 'gsl_bspline_workspace'.

 -- Function: gsl_bspline_workspace * gsl_bspline_alloc (const size_t K,
          const size_t NBREAK)
     This function allocates a workspace for computing B-splines of
     order K.  The number of breakpoints is given by NBREAK.  This leads
     to n = nbreak + k - 2 basis functions.  Cubic B-splines are
     specified by k = 4.  The size of the workspace is O(2k^2 + 5k +
     nbreak).

 -- Function: void gsl_bspline_free (gsl_bspline_workspace * W)
     This function frees the memory associated with the workspace W.


File: gsl-ref.info,  Node: Constructing the knots vector,  Next: Evaluation of B-spline basis functions,  Prev: Initializing the B-splines solver,  Up: Basis Splines

40.3 Constructing the knots vector
==================================

 -- Function: int gsl_bspline_knots (const gsl_vector * BREAKPTS,
          gsl_bspline_workspace * W)
     This function computes the knots associated with the given
     breakpoints and stores them internally in 'w->knots'.

 -- Function: int gsl_bspline_knots_uniform (const double A, const
          double B, gsl_bspline_workspace * W)
     This function assumes uniformly spaced breakpoints on [a,b] and
     constructs the corresponding knot vector using the previously
     specified NBREAK parameter.  The knots are stored in 'w->knots'.


File: gsl-ref.info,  Node: Evaluation of B-spline basis functions,  Next: Evaluation of B-spline basis function derivatives,  Prev: Constructing the knots vector,  Up: Basis Splines

40.4 Evaluation of B-splines
============================

 -- Function: int gsl_bspline_eval (const double X, gsl_vector * B,
          gsl_bspline_workspace * W)
     This function evaluates all B-spline basis functions at the
     position X and stores them in the vector B, so that the i-th
     element is B_i(x).  The vector B must be of length n = nbreak + k -
     2.  This value may also be obtained by calling
     'gsl_bspline_ncoeffs'.  Computing all the basis functions at once
     is more efficient than computing them individually, due to the
     nature of the defining recurrence relation.

 -- Function: int gsl_bspline_eval_nonzero (const double X, gsl_vector *
          BK, size_t * ISTART, size_t * IEND, gsl_bspline_workspace * W)
     This function evaluates all potentially nonzero B-spline basis
     functions at the position X and stores them in the vector BK, so
     that the i-th element is B_(istart+i)(x).  The last element of BK
     is B_(iend)(x).  The vector BK must be of length k.  By returning
     only the nonzero basis functions, this function allows quantities
     involving linear combinations of the B_i(x) to be computed without
     unnecessary terms (such linear combinations occur, for example,
     when evaluating an interpolated function).

 -- Function: size_t gsl_bspline_ncoeffs (gsl_bspline_workspace * W)
     This function returns the number of B-spline coefficients given by
     n = nbreak + k - 2.


File: gsl-ref.info,  Node: Evaluation of B-spline basis function derivatives,  Next: Working with the Greville abscissae,  Prev: Evaluation of B-spline basis functions,  Up: Basis Splines

40.5 Evaluation of B-spline derivatives
=======================================

 -- Function: int gsl_bspline_deriv_eval (const double X, const size_t
          NDERIV, gsl_matrix * DB, gsl_bspline_workspace * W)
     This function evaluates all B-spline basis function derivatives of
     orders 0 through nderiv (inclusive) at the position X and stores
     them in the matrix DB.  The (i,j)-th element of DB is
     d^jB_i(x)/dx^j.  The matrix DB must be of size n = nbreak + k - 2
     by nderiv + 1.  The value n may also be obtained by calling
     'gsl_bspline_ncoeffs'.  Note that function evaluations are included
     as the zeroth order derivatives in DB.  Computing all the basis
     function derivatives at once is more efficient than computing them
     individually, due to the nature of the defining recurrence
     relation.

 -- Function: int gsl_bspline_deriv_eval_nonzero (const double X, const
          size_t NDERIV, gsl_matrix * DB, size_t * ISTART, size_t *
          IEND, gsl_bspline_workspace * W)
     This function evaluates all potentially nonzero B-spline basis
     function derivatives of orders 0 through nderiv (inclusive) at the
     position X and stores them in the matrix DB.  The (i,j)-th element
     of DB is d^j/dx^j B_(istart+i)(x).  The last row of DB contains
     d^j/dx^j B_(iend)(x).  The matrix DB must be of size k by at least
     nderiv + 1.  Note that function evaluations are included as the
     zeroth order derivatives in DB.  By returning only the nonzero
     basis functions, this function allows quantities involving linear
     combinations of the B_i(x) and their derivatives to be computed
     without unnecessary terms.


File: gsl-ref.info,  Node: Working with the Greville abscissae,  Next: Example programs for B-splines,  Prev: Evaluation of B-spline basis function derivatives,  Up: Basis Splines

40.6 Working with the Greville abscissae
========================================

The Greville abscissae are defined to be the mean location of k-1
consecutive knots in the knot vector for each basis spline function of
order k.  With the first and last knots in the 'gsl_bspline_workspace'
knot vector excluded, there are 'gsl_bspline_ncoeffs' Greville abscissae
for any given B-spline basis.  These values are often used in B-spline
collocation applications and may also be called Marsden-Schoenberg
points.

 -- Function: double gsl_bspline_greville_abscissa (size_t I,
          gsl_bspline_workspace *W);
     Returns the location of the i-th Greville abscissa for the given
     B-spline basis.  For the ill-defined case when k=1, the
     implementation chooses to return breakpoint interval midpoints.


File: gsl-ref.info,  Node: Example programs for B-splines,  Next: B-Spline References and Further Reading,  Prev: Working with the Greville abscissae,  Up: Basis Splines

40.7 Examples
=============

The following program computes a linear least squares fit to data using
cubic B-spline basis functions with uniform breakpoints.  The data is
generated from the curve y(x) = \cos{(x)} \exp{(-x/10)} on the interval
[0, 15] with Gaussian noise added.

     #include <stdio.h>
     #include <stdlib.h>
     #include <math.h>
     #include <gsl/gsl_bspline.h>
     #include <gsl/gsl_multifit.h>
     #include <gsl/gsl_rng.h>
     #include <gsl/gsl_randist.h>
     #include <gsl/gsl_statistics.h>

     /* number of data points to fit */
     #define N        200

     /* number of fit coefficients */
     #define NCOEFFS  12

     /* nbreak = ncoeffs + 2 - k = ncoeffs - 2 since k = 4 */
     #define NBREAK   (NCOEFFS - 2)

     int
     main (void)
     {
       const size_t n = N;
       const size_t ncoeffs = NCOEFFS;
       const size_t nbreak = NBREAK;
       size_t i, j;
       gsl_bspline_workspace *bw;
       gsl_vector *B;
       double dy;
       gsl_rng *r;
       gsl_vector *c, *w;
       gsl_vector *x, *y;
       gsl_matrix *X, *cov;
       gsl_multifit_linear_workspace *mw;
       double chisq, Rsq, dof, tss;

       gsl_rng_env_setup();
       r = gsl_rng_alloc(gsl_rng_default);

       /* allocate a cubic bspline workspace (k = 4) */
       bw = gsl_bspline_alloc(4, nbreak);
       B = gsl_vector_alloc(ncoeffs);

       x = gsl_vector_alloc(n);
       y = gsl_vector_alloc(n);
       X = gsl_matrix_alloc(n, ncoeffs);
       c = gsl_vector_alloc(ncoeffs);
       w = gsl_vector_alloc(n);
       cov = gsl_matrix_alloc(ncoeffs, ncoeffs);
       mw = gsl_multifit_linear_alloc(n, ncoeffs);

       printf("#m=0,S=0\n");
       /* this is the data to be fitted */
       for (i = 0; i < n; ++i)
         {
           double sigma;
           double xi = (15.0 / (N - 1)) * i;
           double yi = cos(xi) * exp(-0.1 * xi);

           sigma = 0.1 * yi;
           dy = gsl_ran_gaussian(r, sigma);
           yi += dy;

           gsl_vector_set(x, i, xi);
           gsl_vector_set(y, i, yi);
           gsl_vector_set(w, i, 1.0 / (sigma * sigma));

           printf("%f %f\n", xi, yi);
         }

       /* use uniform breakpoints on [0, 15] */
       gsl_bspline_knots_uniform(0.0, 15.0, bw);

       /* construct the fit matrix X */
       for (i = 0; i < n; ++i)
         {
           double xi = gsl_vector_get(x, i);

           /* compute B_j(xi) for all j */
           gsl_bspline_eval(xi, B, bw);

           /* fill in row i of X */
           for (j = 0; j < ncoeffs; ++j)
             {
               double Bj = gsl_vector_get(B, j);
               gsl_matrix_set(X, i, j, Bj);
             }
         }

       /* do the fit */
       gsl_multifit_wlinear(X, w, y, c, cov, &chisq, mw);

       dof = n - ncoeffs;
       tss = gsl_stats_wtss(w->data, 1, y->data, 1, y->size);
       Rsq = 1.0 - chisq / tss;

       fprintf(stderr, "chisq/dof = %e, Rsq = %f\n",
                        chisq / dof, Rsq);

       /* output the smoothed curve */
       {
         double xi, yi, yerr;

         printf("#m=1,S=0\n");
         for (xi = 0.0; xi < 15.0; xi += 0.1)
           {
             gsl_bspline_eval(xi, B, bw);
             gsl_multifit_linear_est(B, c, cov, &yi, &yerr);
             printf("%f %f\n", xi, yi);
           }
       }

       gsl_rng_free(r);
       gsl_bspline_free(bw);
       gsl_vector_free(B);
       gsl_vector_free(x);
       gsl_vector_free(y);
       gsl_matrix_free(X);
       gsl_vector_free(c);
       gsl_vector_free(w);
       gsl_matrix_free(cov);
       gsl_multifit_linear_free(mw);

       return 0;
     } /* main() */

   The output can be plotted with GNU 'graph'.

     $ ./a.out > bspline.txt
     chisq/dof = 1.118217e+00, Rsq = 0.989771
     $ graph -T ps -X x -Y y -x 0 15 -y -1 1.3 < bspline.txt > bspline.ps


File: gsl-ref.info,  Node: B-Spline References and Further Reading,  Prev: Example programs for B-splines,  Up: Basis Splines

40.8 B-Spline References and Further Reading
============================================

Further information on the algorithms described in this section can be
found in the following book,

     C. de Boor, 'A Practical Guide to Splines' (1978), Springer-Verlag,
     ISBN 0-387-90356-9.

   Further information of Greville abscissae and B-spline collocation
can be found in the following paper,

     Richard W. Johnson, Higher order B-spline collocation at the
     Greville abscissae.  'Applied Numerical Mathematics'.  vol. 52,
     2005, 63-75.

A large collection of B-spline routines is available in the PPPACK
library available at <http://www.netlib.org/pppack>, which is also part
of SLATEC.


File: gsl-ref.info,  Node: Sparse Matrices,  Next: Sparse BLAS Support,  Prev: Basis Splines,  Up: Top

41 Sparse Matrices
******************

This chapter describes functions for the construction and manipulation
of sparse matrices, matrices which are populated primarily with zeros
and contain only a few non-zero elements.  Sparse matrices often appear
in the solution of partial differential equations.  It is beneficial to
use specialized data structures and algorithms for storing and working
with sparse matrices, since dense matrix algorithms and structures can
be very slow and use huge amounts of memory when applied to sparse
matrices.

The header file 'gsl_spmatrix.h' contains the prototypes for the sparse
matrix functions and related declarations.

* Menu:

* Sparse Matrices Overview::
* Sparse Matrices Allocation::
* Sparse Matrices Accessing Elements::
* Sparse Matrices Initializing Elements::
* Sparse Matrices Reading and Writing::
* Sparse Matrices Copying::
* Sparse Matrices Exchanging Rows and Columns::
* Sparse Matrices Operations::
* Sparse Matrices Properties::
* Sparse Matrices Finding Maximum and Minimum Elements::
* Sparse Matrices Compressed Format::
* Sparse Matrices Conversion Between Sparse and Dense::
* Sparse Matrices Examples::
* Sparse Matrices References and Further Reading::


File: gsl-ref.info,  Node: Sparse Matrices Overview,  Next: Sparse Matrices Allocation,  Up: Sparse Matrices

41.1 Overview
=============

These routines provide support for constructing and manipulating sparse
matrices in GSL, using an API similar to 'gsl_matrix'.  The basic
structure is called 'gsl_spmatrix'.  There are three supported storage
formats for sparse matrices: the triplet, compressed column storage
(CCS) and compressed row storage (CRS) formats.  The triplet format
stores triplets (i,j,x) for each non-zero element of the matrix.  This
notation means that the (i,j) element of the matrix A is A_{ij} = x.
Compressed column storage stores each column of non-zero values in the
sparse matrix in a continuous memory block, keeping pointers to the
beginning of each column in that memory block, and storing the row
indices of each non-zero element.  Compressed row storage stores each
row of non-zero values in a continuous memory block, keeping pointers to
the beginning of each row in the block and storing the column indices of
each non-zero element.  The triplet format is ideal for adding elements
to the sparse matrix structure while it is being constructed, while the
compressed storage formats are better suited for matrix-matrix
multiplication or linear solvers.

The 'gsl_spmatrix' structure is defined as

     typedef struct
     {
       size_t size1;
       size_t size2;
       size_t *i;
       double *data;
       size_t *p;
       size_t nzmax;
       size_t nz;
       gsl_spmatrix_tree *tree_data;
       void *work;
       size_t sptype;
     } gsl_spmatrix;

This defines a SIZE1-by-SIZE2 sparse matrix.  The number of non-zero
elements currently in the matrix is given by NZ.  For the triplet
representation, I, P, and DATA are arrays of size NZ which contain the
row indices, column indices, and element value, respectively.  So if
data[k] = A(i,j), then i = i[k] and j = p[k].

For compressed column storage, I and DATA are arrays of size NZ
containing the row indices and element values, identical to the triplet
case.  P is an array of size size2 + 1 where p[j] points to the index in
DATA of the start of column J.  Thus, if data[k] = A(i,j), then i = i[k]
and p[j] <= k < p[j+1].

For compressed row storage, I and DATA are arrays of size NZ containing
the column indices and element values, identical to the triplet case.  P
is an array of size size1 + 1 where p[i] points to the index in DATA of
the start of row I.  Thus, if data[k] = A(i,j), then j = i[k] and p[i]
<= k < p[i+1].

The parameter TREE_DATA is a binary tree structure used in the triplet
representation, specifically a balanced AVL tree.  This speeds up
element searches and duplicate detection during the matrix assembly
process.  The parameter WORK is additional workspace needed for various
operations like converting from triplet to compressed storage.  SPTYPE
indicates the type of storage format being used (triplet, CCS or CRS).

The compressed storage format defined above makes it very simple to
interface with sophisticated external linear solver libraries which
accept compressed storage input.  The user can simply pass the arrays I,
P, and DATA as the inputs to external libraries.


File: gsl-ref.info,  Node: Sparse Matrices Allocation,  Next: Sparse Matrices Accessing Elements,  Prev: Sparse Matrices Overview,  Up: Sparse Matrices

41.2 Allocation
===============

The functions for allocating memory for a sparse matrix follow the style
of 'malloc' and 'free'.  They also perform their own error checking.  If
there is insufficient memory available to allocate a matrix then the
functions call the GSL error handler with an error code of 'GSL_ENOMEM'
in addition to returning a null pointer.

 -- Function: gsl_spmatrix * gsl_spmatrix_alloc (const size_t N1, const
          size_t N2)
     This function allocates a sparse matrix of size N1-by-N2 and
     initializes it to all zeros.  If the size of the matrix is not
     known at allocation time, both N1 and N2 may be set to 1, and they
     will automatically grow as elements are added to the matrix.  This
     function sets the matrix to the triplet representation, which is
     the easiest for adding and accessing matrix elements.  This
     function tries to make a reasonable guess for the number of
     non-zero elements (NZMAX) which will be added to the matrix by
     assuming a sparse density of 10\%.  The function
     'gsl_spmatrix_alloc_nzmax' can be used if this number is known more
     accurately.  The workspace is of size O(nzmax).

 -- Function: gsl_spmatrix * gsl_spmatrix_alloc_nzmax (const size_t N1,
          const size_t N2, const size_t NZMAX, const size_t SPTYPE)
     This function allocates a sparse matrix of size N1-by-N2 and
     initializes it to all zeros.  If the size of the matrix is not
     known at allocation time, both N1 and N2 may be set to 1, and they
     will automatically grow as elements are added to the matrix.  The
     parameter NZMAX specifies the maximum number of non-zero elements
     which will be added to the matrix.  It does not need to be
     precisely known in advance, since storage space will automatically
     grow using 'gsl_spmatrix_realloc' if NZMAX is not large enough.
     Accurate knowledge of this parameter reduces the number of
     reallocation calls required.  The parameter SPTYPE specifies the
     storage format of the sparse matrix.  Possible values are
     'GSL_SPMATRIX_TRIPLET'
          This flag specifies triplet storage.

     'GSL_SPMATRIX_CCS'
          This flag specifies compressed column storage.

     'GSL_SPMATRIX_CRS'
          This flag specifies compressed row storage.
     The allocated 'gsl_spmatrix' structure is of size O(nzmax).

 -- Function: int gsl_spmatrix_realloc (const size_t NZMAX, gsl_spmatrix
          * M)
     This function reallocates the storage space for M to accomodate
     NZMAX non-zero elements.  It is typically called internally by
     'gsl_spmatrix_set' if the user wants to add more elements to the
     sparse matrix than the previously specified NZMAX.

 -- Function: void gsl_spmatrix_free (gsl_spmatrix * M)
     This function frees the memory associated with the sparse matrix M.


File: gsl-ref.info,  Node: Sparse Matrices Accessing Elements,  Next: Sparse Matrices Initializing Elements,  Prev: Sparse Matrices Allocation,  Up: Sparse Matrices

41.3 Accessing Matrix Elements
==============================

 -- Function: double gsl_spmatrix_get (const gsl_spmatrix * M, const
          size_t I, const size_t J)
     This function returns element (I,J) of the matrix M.  The matrix
     may be in triplet or compressed format.

 -- Function: int gsl_spmatrix_set (gsl_spmatrix * M, const size_t I,
          const size_t J, const double X)
     This function sets element (I,J) of the matrix M to the value X.
     The matrix must be in triplet representation.

 -- Function: double * gsl_spmatrix_ptr (gsl_spmatrix * M, const size_t
          I, const size_t J)
     This function returns a pointer to the (I,J) element of the matrix
     M.  If the (I,J) element is not explicitly stored in the matrix, a
     null pointer is returned.


File: gsl-ref.info,  Node: Sparse Matrices Initializing Elements,  Next: Sparse Matrices Reading and Writing,  Prev: Sparse Matrices Accessing Elements,  Up: Sparse Matrices

41.4 Initializing Matrix Elements
=================================

Since the sparse matrix format only stores the non-zero elements, it is
automatically initialized to zero upon allocation.  The function
'gsl_spmatrix_set_zero' may be used to re-initialize a matrix to zero
after elements have been added to it.

 -- Function: int gsl_spmatrix_set_zero (gsl_spmatrix * M)
     This function sets (or resets) all the elements of the matrix M to
     zero.


File: gsl-ref.info,  Node: Sparse Matrices Reading and Writing,  Next: Sparse Matrices Copying,  Prev: Sparse Matrices Initializing Elements,  Up: Sparse Matrices

41.5 Reading and Writing Matrices
=================================

 -- Function: int gsl_spmatrix_fwrite (FILE * STREAM, const gsl_spmatrix
          * M)
     This function writes the elements of the matrix M to the stream
     STREAM in binary format.  The return value is 0 for success and
     'GSL_EFAILED' if there was a problem writing to the file.  Since
     the data is written in the native binary format it may not be
     portable between different architectures.

 -- Function: int gsl_spmatrix_fread (FILE * STREAM, gsl_spmatrix * M)
     This function reads into the matrix M from the open stream STREAM
     in binary format.  The matrix M must be preallocated with the
     correct storage format, dimensions and have a sufficiently large
     'nzmax' in order to read in all matrix elements, otherwise
     'GSL_EBADLEN' is returned.  The return value is 0 for success and
     'GSL_EFAILED' if there was a problem reading from the file.  The
     data is assumed to have been written in the native binary format on
     the same architecture.

 -- Function: int gsl_spmatrix_fprintf (FILE * STREAM, const
          gsl_spmatrix * M, const char * FORMAT)
     This function writes the elements of the matrix M line-by-line to
     the stream STREAM using the format specifier FORMAT, which should
     be one of the '%g', '%e' or '%f' formats for floating point
     numbers.  The function returns 0 for success and 'GSL_EFAILED' if
     there was a problem writing to the file.  The input matrix M may be
     in any storage format, and the output file will be written in
     MatrixMarket format.

 -- Function: gsl_spmatrix * gsl_spmatrix_fscanf (FILE * STREAM)
     This function reads sparse matrix data in the MatrixMarket format
     from the stream STREAM and stores it in a newly allocated matrix
     which is returned in triplet format.  The function returns 0 for
     success and 'GSL_EFAILED' if there was a problem reading from the
     file.  The user should free the returned matrix when it is no
     longer needed.


File: gsl-ref.info,  Node: Sparse Matrices Copying,  Next: Sparse Matrices Exchanging Rows and Columns,  Prev: Sparse Matrices Reading and Writing,  Up: Sparse Matrices

41.6 Copying Matrices
=====================

 -- Function: int gsl_spmatrix_memcpy (gsl_spmatrix * DEST, const
          gsl_spmatrix * SRC)
     This function copies the elements of the sparse matrix SRC into
     DEST.  The two matrices must have the same dimensions and be in the
     same storage format.


File: gsl-ref.info,  Node: Sparse Matrices Exchanging Rows and Columns,  Next: Sparse Matrices Operations,  Prev: Sparse Matrices Copying,  Up: Sparse Matrices

41.7 Exchanging Rows and Columns
================================

 -- Function: int gsl_spmatrix_transpose_memcpy (gsl_spmatrix * DEST,
          const gsl_spmatrix * SRC)
     This function copies the transpose of the sparse matrix SRC into
     DEST.  The dimensions of DEST must match the transpose of the
     matrix SRC.  Also, both matrices must use the same sparse storage
     format.

 -- Function: int gsl_spmatrix_transpose (gsl_spmatrix * M)
     This function replaces the matrix M by its transpose, preserving
     the storage format of the input matrix.  Currently, only triplet
     matrix inputs are supported.

 -- Function: int gsl_spmatrix_transpose2 (gsl_spmatrix * M)
     This function replaces the matrix M by its transpose, but changes
     the storage format for compressed matrix inputs.  Since compressed
     column storage is the transpose of compressed row storage, this
     function simply converts a CCS matrix to CRS and vice versa.  This
     is the most efficient way to transpose a compressed storage matrix,
     but the user should note that the storage format of their
     compressed matrix will change on output.  For triplet matrices, the
     output matrix is also in triplet storage.


File: gsl-ref.info,  Node: Sparse Matrices Operations,  Next: Sparse Matrices Properties,  Prev: Sparse Matrices Exchanging Rows and Columns,  Up: Sparse Matrices

41.8 Matrix Operations
======================

 -- Function: int gsl_spmatrix_add (gsl_spmatrix * C, const gsl_spmatrix
          * A, const gsl_spmatrix * B)
     This function computes the sum c = a + b.  The three matrices must
     have the same dimensions and be stored in a compressed format.

 -- Function: int gsl_spmatrix_scale (gsl_spmatrix * M, const double X)
     This function scales all elements of the matrix M by the constant
     factor X.  The result m(i,j) \leftarrow x m(i,j) is stored in M.


File: gsl-ref.info,  Node: Sparse Matrices Properties,  Next: Sparse Matrices Finding Maximum and Minimum Elements,  Prev: Sparse Matrices Operations,  Up: Sparse Matrices

41.9 Matrix Properties
======================

 -- Function: size_t gsl_spmatrix_nnz (const gsl_spmatrix * M)
     This function returns the number of non-zero elements in M.

 -- Function: int gsl_spmatrix_equal (const gsl_spmatrix * A, const
          gsl_spmatrix * B)
     This function returns 1 if the matrices A and B are equal (by
     comparison of element values) and 0 otherwise.  The matrices A and
     B must be in the same sparse storage format for comparison.


File: gsl-ref.info,  Node: Sparse Matrices Finding Maximum and Minimum Elements,  Next: Sparse Matrices Compressed Format,  Prev: Sparse Matrices Properties,  Up: Sparse Matrices

41.10 Finding Maximum and Minimum Elements
==========================================

 -- Function: int gsl_spmatrix_minmax (const gsl_spmatrix * M, double *
          MIN_OUT, double * MAX_OUT)
     This function returns the minimum and maximum elements of the
     matrix M, storing them in MIN_OUT and MAX_OUT, and searching only
     the non-zero values.


File: gsl-ref.info,  Node: Sparse Matrices Compressed Format,  Next: Sparse Matrices Conversion Between Sparse and Dense,  Prev: Sparse Matrices Finding Maximum and Minimum Elements,  Up: Sparse Matrices

41.11 Compressed Format
=======================

GSL supports compressed column storage (CCS) and compressed row storage
(CRS) formats.

 -- Function: gsl_spmatrix * gsl_spmatrix_ccs (const gsl_spmatrix * T)
     This function creates a sparse matrix in compressed column format
     from the input sparse matrix T which must be in triplet format.  A
     pointer to a newly allocated matrix is returned.  The calling
     function should free the newly allocated matrix when it is no
     longer needed.

 -- Function: gsl_spmatrix * gsl_spmatrix_crs (const gsl_spmatrix * T)
     This function creates a sparse matrix in compressed row format from
     the input sparse matrix T which must be in triplet format.  A
     pointer to a newly allocated matrix is returned.  The calling
     function should free the newly allocated matrix when it is no
     longer needed.


File: gsl-ref.info,  Node: Sparse Matrices Conversion Between Sparse and Dense,  Next: Sparse Matrices Examples,  Prev: Sparse Matrices Compressed Format,  Up: Sparse Matrices

41.12 Conversion Between Sparse and Dense Matrices
==================================================

The 'gsl_spmatrix' structure can be converted into the dense
'gsl_matrix' format and vice versa with the following routines.

 -- Function: int gsl_spmatrix_d2sp (gsl_spmatrix * S, const gsl_matrix
          * A)
     This function converts the dense matrix A into sparse triplet
     format and stores the result in S.

 -- Function: int gsl_spmatrix_sp2d (gsl_matrix * A, const gsl_spmatrix
          * S)
     This function converts the sparse matrix S into a dense matrix and
     stores the result in A.  S must be in triplet format.


File: gsl-ref.info,  Node: Sparse Matrices Examples,  Next: Sparse Matrices References and Further Reading,  Prev: Sparse Matrices Conversion Between Sparse and Dense,  Up: Sparse Matrices

41.13 Examples
==============

The following example program builds a 5-by-4 sparse matrix and prints
it in triplet, compressed column, and compressed row format.  The matrix
which is constructed is The output of the program is

     printing all matrix elements:
     A(0,0) = 0
     A(0,1) = 0
     A(0,2) = 3.1
     A(0,3) = 4.6
     A(1,0) = 1
     .
     .
     .
     A(4,0) = 4.1
     A(4,1) = 0
     A(4,2) = 0
     A(4,3) = 0
     matrix in triplet format (i,j,Aij):
     (0, 2, 3.1)
     (0, 3, 4.6)
     (1, 0, 1.0)
     (1, 2, 7.2)
     (3, 0, 2.1)
     (3, 1, 2.9)
     (3, 3, 8.5)
     (4, 0, 4.1)
     matrix in compressed column format:
     i = [ 1, 3, 4, 3, 0, 1, 0, 3, ]
     p = [ 0, 3, 4, 6, 8, ]
     d = [ 1, 2.1, 4.1, 2.9, 3.1, 7.2, 4.6, 8.5, ]
     matrix in compressed row format:
     i = [ 2, 3, 0, 2, 0, 1, 3, 0, ]
     p = [ 0, 2, 4, 4, 7, 8, ]
     d = [ 3.1, 4.6, 1, 7.2, 2.1, 2.9, 8.5, 4.1, ]
We see in the compressed column output, the data array stores each
column contiguously, the array i stores the row index of the
corresponding data element, and the array p stores the index of the
start of each column in the data array.  Similarly, for the compressed
row output, the data array stores each row contiguously, the array i
stores the column index of the corresponding data element, and the p
array stores the index of the start of each row in the data array.

     #include <stdio.h>
     #include <stdlib.h>

     #include <gsl/gsl_spmatrix.h>

     int
     main()
     {
       gsl_spmatrix *A = gsl_spmatrix_alloc(5, 4); /* triplet format */
       gsl_spmatrix *B, *C;
       size_t i, j;

       /* build the sparse matrix */
       gsl_spmatrix_set(A, 0, 2, 3.1);
       gsl_spmatrix_set(A, 0, 3, 4.6);
       gsl_spmatrix_set(A, 1, 0, 1.0);
       gsl_spmatrix_set(A, 1, 2, 7.2);
       gsl_spmatrix_set(A, 3, 0, 2.1);
       gsl_spmatrix_set(A, 3, 1, 2.9);
       gsl_spmatrix_set(A, 3, 3, 8.5);
       gsl_spmatrix_set(A, 4, 0, 4.1);

       printf("printing all matrix elements:\n");
       for (i = 0; i < 5; ++i)
         for (j = 0; j < 4; ++j)
           printf("A(%zu,%zu) = %g\n", i, j,
                  gsl_spmatrix_get(A, i, j));

       /* print out elements in triplet format */
       printf("matrix in triplet format (i,j,Aij):\n");
       gsl_spmatrix_fprintf(stdout, A, "%.1f");

       /* convert to compressed column format */
       B = gsl_spmatrix_ccs(A);

       printf("matrix in compressed column format:\n");
       printf("i = [ ");
       for (i = 0; i < B->nz; ++i)
         printf("%zu, ", B->i[i]);
       printf("]\n");

       printf("p = [ ");
       for (i = 0; i < B->size2 + 1; ++i)
         printf("%zu, ", B->p[i]);
       printf("]\n");

       printf("d = [ ");
       for (i = 0; i < B->nz; ++i)
         printf("%g, ", B->data[i]);
       printf("]\n");

       /* convert to compressed row format */
       C = gsl_spmatrix_crs(A);

       printf("matrix in compressed row format:\n");
       printf("i = [ ");
       for (i = 0; i < C->nz; ++i)
         printf("%zu, ", C->i[i]);
       printf("]\n");

       printf("p = [ ");
       for (i = 0; i < C->size1 + 1; ++i)
         printf("%zu, ", C->p[i]);
       printf("]\n");

       printf("d = [ ");
       for (i = 0; i < C->nz; ++i)
         printf("%g, ", C->data[i]);
       printf("]\n");

       gsl_spmatrix_free(A);
       gsl_spmatrix_free(B);
       gsl_spmatrix_free(C);

       return 0;
     }


File: gsl-ref.info,  Node: Sparse Matrices References and Further Reading,  Prev: Sparse Matrices Examples,  Up: Sparse Matrices

41.14 References and Further Reading
====================================

The algorithms used by these functions are described in the following
sources:

     T. A. Davis, Direct Methods for Sparse Linear Systems, SIAM, 2006.

     CSparse software library,
     <https://www.cise.ufl.edu/research/sparse/CSparse>


File: gsl-ref.info,  Node: Sparse BLAS Support,  Next: Sparse Linear Algebra,  Prev: Sparse Matrices,  Up: Top

42 Sparse BLAS Support
**********************

The Sparse Basic Linear Algebra Subprograms (BLAS) define a set of
fundamental operations on vectors and sparse matrices which can be used
to create optimized higher-level linear algebra functionality.  GSL
supports a limited number of BLAS operations for sparse matrices.

The header file 'gsl_spblas.h' contains the prototypes for the sparse
BLAS functions and related declarations.

* Menu:

* Sparse BLAS operations::
* Sparse BLAS References and Further Reading::


File: gsl-ref.info,  Node: Sparse BLAS operations,  Next: Sparse BLAS References and Further Reading,  Up: Sparse BLAS Support

42.1 Sparse BLAS operations
===========================

 -- Function: int gsl_spblas_dgemv (const CBLAS_TRANSPOSE_t TransA,
          const double ALPHA, const gsl_spmatrix * A, const gsl_vector *
          X, const double BETA, gsl_vector * Y)
     This function computes the matrix-vector product and sum y
     \leftarrow \alpha op(A) x + \beta y, where op(A) = A, A^T for
     TRANSA = 'CblasNoTrans', 'CblasTrans'.  In-place computations are
     not supported, so X and Y must be distinct vectors.  The matrix A
     may be in triplet or compressed format.

 -- Function: int gsl_spblas_dgemm (const double ALPHA, const
          gsl_spmatrix * A, const gsl_spmatrix * B, gsl_spmatrix * C)
     This function computes the sparse matrix-matrix product C = \alpha
     A B.  The matrices must be in compressed format.


File: gsl-ref.info,  Node: Sparse BLAS References and Further Reading,  Prev: Sparse BLAS operations,  Up: Sparse BLAS Support

42.2 References and Further Reading
===================================

The algorithms used by these functions are described in the following
sources:

     T. A. Davis, Direct Methods for Sparse Linear Systems, SIAM, 2006.

     CSparse software library,
     <https://www.cise.ufl.edu/research/sparse/CSparse>


File: gsl-ref.info,  Node: Sparse Linear Algebra,  Next: Physical Constants,  Prev: Sparse BLAS Support,  Up: Top

43 Sparse Linear Algebra
************************

This chapter describes functions for solving sparse linear systems of
equations.  The library provides linear algebra routines which operate
directly on the 'gsl_spmatrix' and 'gsl_vector' objects.

The functions described in this chapter are declared in the header file
'gsl_splinalg.h'.

* Menu:

* Overview of Sparse Linear Algebra::
* Sparse Iterative Solvers::
* Sparse Linear Algebra Examples::
* Sparse Linear Algebra References and Further Reading::


File: gsl-ref.info,  Node: Overview of Sparse Linear Algebra,  Next: Sparse Iterative Solvers,  Up: Sparse Linear Algebra

43.1 Overview
=============

This chapter is primarily concerned with the solution of the linear
system
     A x = b
   where A is a general square n-by-n non-singular sparse matrix, x is
an unknown n-by-1 vector, and b is a given n-by-1 right hand side
vector.  There exist many methods for solving such sparse linear
systems, which broadly fall into either direct or iterative categories.
Direct methods include LU and QR decompositions, while iterative methods
start with an initial guess for the vector x and update the guess
through iteration until convergence.  GSL does not currently provide any
direct sparse solvers.


File: gsl-ref.info,  Node: Sparse Iterative Solvers,  Next: Sparse Linear Algebra Examples,  Prev: Overview of Sparse Linear Algebra,  Up: Sparse Linear Algebra

43.2 Sparse Iterative Solvers
=============================

* Menu:

* Sparse Iterative Solver Overview::
* Sparse Iterative Solvers Types::
* Iterating the Sparse Linear System::


File: gsl-ref.info,  Node: Sparse Iterative Solver Overview,  Next: Sparse Iterative Solvers Types,  Up: Sparse Iterative Solvers

43.2.1 Overview
---------------

Many practical iterative methods of solving large n-by-n sparse linear
systems involve projecting an approximate solution for X onto a subspace
of {\bf R}^n.  If we define a m-dimensional subspace {\cal K} as the
subspace of approximations to the solution X, then m constraints must be
imposed to determine the next approximation.  These m constraints define
another m-dimensional subspace denoted by {\cal L}.  The subspace
dimension m is typically chosen to be much smaller than n in order to
reduce the computational effort needed to generate the next approximate
solution vector.  The many iterative algorithms which exist differ
mainly in their choice of {\cal K} and {\cal L}.


File: gsl-ref.info,  Node: Sparse Iterative Solvers Types,  Next: Iterating the Sparse Linear System,  Prev: Sparse Iterative Solver Overview,  Up: Sparse Iterative Solvers

43.2.2 Types of Sparse Iterative Solvers
----------------------------------------

The sparse linear algebra library provides the following types of
iterative solvers:

 -- Sparse Iterative Type: gsl_splinalg_itersolve_gmres
     This specifies the Generalized Minimum Residual Method (GMRES).
     This is a projection method using {\cal K} = {\cal K}_m and {\cal
     L} = A {\cal K}_m where {\cal K}_m is the m-th Krylov subspace
          K_m = span( r_0, A r_0, ..., A^(m-1) r_0)
     and r_0 = b - A x_0 is the residual vector of the initial guess
     x_0.  If m is set equal to n, then the Krylov subspace is {\bf R}^n
     and GMRES will provide the exact solution X.  However, the goal is
     for the method to arrive at a very good approximation to X using a
     much smaller subspace {\cal K}_m.  By default, the GMRES method
     selects m = MIN(n,10) but the user may specify a different value
     for m.  The GMRES storage requirements grow as O(n(m+1)) and the
     number of flops grow as O(4 m^2 n - 4 m^3 / 3).

     In the below function 'gsl_splinalg_itersolve_iterate', one GMRES
     iteration is defined as projecting the approximate solution vector
     onto each Krylov subspace {\cal K}_1, ..., {\cal K}_m, and so m can
     be kept smaller by "restarting" the method and calling
     'gsl_splinalg_itersolve_iterate' multiple times, providing the
     updated approximation X to each new call.  If the method is not
     adequately converging, the user may try increasing the parameter m.

     GMRES is considered a robust general purpose iterative solver,
     however there are cases where the method stagnates if the matrix is
     not positive-definite and fails to reduce the residual until the
     very last projection onto the subspace {\cal K}_n = {\bf R}^n.  In
     these cases, preconditioning the linear system can help, but GSL
     does not currently provide any preconditioners.


File: gsl-ref.info,  Node: Iterating the Sparse Linear System,  Prev: Sparse Iterative Solvers Types,  Up: Sparse Iterative Solvers

43.2.3 Iterating the Sparse Linear System
-----------------------------------------

The following functions are provided to allocate storage for the sparse
linear solvers and iterate the system to a solution.

 -- Function: gsl_splinalg_itersolve * gsl_splinalg_itersolve_alloc
          (const gsl_splinalg_itersolve_type * T, const size_t N, const
          size_t M)
     This function allocates a workspace for the iterative solution of
     N-by-N sparse matrix systems.  The iterative solver type is
     specified by T.  The argument M specifies the size of the solution
     candidate subspace {\cal K}_m.  The dimension M may be set to 0 in
     which case a reasonable default value is used.

 -- Function: void gsl_splinalg_itersolve_free (gsl_splinalg_itersolve *
          W)
     This function frees the memory associated with the workspace W.

 -- Function: const char * gsl_splinalg_itersolve_name (const
          gsl_splinalg_itersolve * W)
     This function returns a string pointer to the name of the solver.

 -- Function: int gsl_splinalg_itersolve_iterate (const gsl_spmatrix *A,
          const gsl_vector *B, const double TOL, gsl_vector *X,
          gsl_splinalg_itersolve *W)
     This function performs one iteration of the iterative method for
     the sparse linear system specfied by the matrix A, right hand side
     vector B and solution vector X.  On input, X must be set to an
     initial guess for the solution.  On output, X is updated to give
     the current solution estimate.  The parameter TOL specifies the
     relative tolerance between the residual norm and norm of B in order
     to check for convergence.  When the following condition is
     satisfied:
          || A x - b || <= tol * || b ||
     the method has converged, the function returns 'GSL_SUCCESS' and
     the final solution is provided in X.  Otherwise, the function
     returns 'GSL_CONTINUE' to signal that more iterations are required.
     Here, || \cdot || represents the Euclidean norm.  The input matrix
     A may be in triplet or compressed column format.

 -- Function: double gsl_splinalg_itersolve_normr (const
          gsl_splinalg_itersolve *W)
     This function returns the current residual norm ||r|| = ||A x -
     b||, which is updated after each call to
     'gsl_splinalg_itersolve_iterate'.


File: gsl-ref.info,  Node: Sparse Linear Algebra Examples,  Next: Sparse Linear Algebra References and Further Reading,  Prev: Sparse Iterative Solvers,  Up: Sparse Linear Algebra

43.3 Examples
=============

This example program demonstrates the sparse linear algebra routines on
the solution of a simple 1D Poisson equation on [0,1]:
     u''(x) = f(x) = -\pi^2 \sin(\pi x)
   with boundary conditions u(0) = u(1) = 0.  The analytic solution of
this simple problem is u(x) = \sin{\pi x}.  We will solve this problem
by finite differencing the left hand side to give
     1/h^2 ( u_(i+1) - 2 u_i + u_(i-1) ) = f_i
   Defining a grid of N points, h = 1/(N-1).  In the finite difference
equation above, u_0 = u_{N-1} = 0 are known from the boundary
conditions, so we will only put the equations for i = 1, ..., N-2 into
the matrix system.  The resulting (N-2) \times (N-2) matrix equation is
An example program which constructs and solves this system is given
below.  The system is solved using the iterative GMRES solver.  Here is
the output of the program:

     iter 0 residual = 4.297275996844e-11
     Converged
showing that the method converged in a single iteration.  The calculated
solution is shown in the following plot.

     #include <stdio.h>
     #include <stdlib.h>
     #include <math.h>

     #include <gsl/gsl_math.h>
     #include <gsl/gsl_vector.h>
     #include <gsl/gsl_spmatrix.h>
     #include <gsl/gsl_splinalg.h>

     int
     main()
     {
       const size_t N = 100;                       /* number of grid points */
       const size_t n = N - 2;                     /* subtract 2 to exclude boundaries */
       const double h = 1.0 / (N - 1.0);           /* grid spacing */
       gsl_spmatrix *A = gsl_spmatrix_alloc(n ,n); /* triplet format */
       gsl_spmatrix *C;                            /* compressed format */
       gsl_vector *f = gsl_vector_alloc(n);        /* right hand side vector */
       gsl_vector *u = gsl_vector_alloc(n);        /* solution vector */
       size_t i;

       /* construct the sparse matrix for the finite difference equation */

       /* construct first row */
       gsl_spmatrix_set(A, 0, 0, -2.0);
       gsl_spmatrix_set(A, 0, 1, 1.0);

       /* construct rows [1:n-2] */
       for (i = 1; i < n - 1; ++i)
         {
           gsl_spmatrix_set(A, i, i + 1, 1.0);
           gsl_spmatrix_set(A, i, i, -2.0);
           gsl_spmatrix_set(A, i, i - 1, 1.0);
         }

       /* construct last row */
       gsl_spmatrix_set(A, n - 1, n - 1, -2.0);
       gsl_spmatrix_set(A, n - 1, n - 2, 1.0);

       /* scale by h^2 */
       gsl_spmatrix_scale(A, 1.0 / (h * h));

       /* construct right hand side vector */
       for (i = 0; i < n; ++i)
         {
           double xi = (i + 1) * h;
           double fi = -M_PI * M_PI * sin(M_PI * xi);
           gsl_vector_set(f, i, fi);
         }

       /* convert to compressed column format */
       C = gsl_spmatrix_ccs(A);

       /* now solve the system with the GMRES iterative solver */
       {
         const double tol = 1.0e-6;  /* solution relative tolerance */
         const size_t max_iter = 10; /* maximum iterations */
         const gsl_splinalg_itersolve_type *T = gsl_splinalg_itersolve_gmres;
         gsl_splinalg_itersolve *work =
           gsl_splinalg_itersolve_alloc(T, n, 0);
         size_t iter = 0;
         double residual;
         int status;

         /* initial guess u = 0 */
         gsl_vector_set_zero(u);

         /* solve the system A u = f */
         do
           {
             status = gsl_splinalg_itersolve_iterate(C, f, tol, u, work);

             /* print out residual norm ||A*u - f|| */
             residual = gsl_splinalg_itersolve_normr(work);
             fprintf(stderr, "iter %zu residual = %.12e\n", iter, residual);

             if (status == GSL_SUCCESS)
               fprintf(stderr, "Converged\n");
           }
         while (status == GSL_CONTINUE && ++iter < max_iter);

         /* output solution */
         for (i = 0; i < n; ++i)
           {
             double xi = (i + 1) * h;
             double u_exact = sin(M_PI * xi);
             double u_gsl = gsl_vector_get(u, i);

             printf("%f %.12e %.12e\n", xi, u_gsl, u_exact);
           }

         gsl_splinalg_itersolve_free(work);
       }

       gsl_spmatrix_free(A);
       gsl_spmatrix_free(C);
       gsl_vector_free(f);
       gsl_vector_free(u);

       return 0;
     } /* main() */


File: gsl-ref.info,  Node: Sparse Linear Algebra References and Further Reading,  Prev: Sparse Linear Algebra Examples,  Up: Sparse Linear Algebra

43.4 References and Further Reading
===================================

The implementation of the GMRES iterative solver closely follows the
publications

     H. F. Walker, Implementation of the GMRES method using Householder
     transformations, SIAM J. Sci.  Stat.  Comput.  9(1), 1988.

     Y. Saad, Iterative methods for sparse linear systems, 2nd edition,
     SIAM, 2003.


File: gsl-ref.info,  Node: Physical Constants,  Next: IEEE floating-point arithmetic,  Prev: Sparse Linear Algebra,  Up: Top

44 Physical Constants
*********************

This chapter describes macros for the values of physical constants, such
as the speed of light, c, and gravitational constant, G.  The values are
available in different unit systems, including the standard MKSA system
(meters, kilograms, seconds, amperes) and the CGSM system (centimeters,
grams, seconds, gauss), which is commonly used in Astronomy.

   The definitions of constants in the MKSA system are available in the
file 'gsl_const_mksa.h'.  The constants in the CGSM system are defined
in 'gsl_const_cgsm.h'.  Dimensionless constants, such as the fine
structure constant, which are pure numbers are defined in
'gsl_const_num.h'.

* Menu:

* Fundamental Constants::       
* Astronomy and Astrophysics::  
* Atomic and Nuclear Physics::  
* Measurement of Time::         
* Imperial Units ::             
* Speed and Nautical Units::    
* Printers Units::              
* Volume Area and Length::      
* Mass and Weight ::            
* Thermal Energy and Power::    
* Pressure::                    
* Viscosity::                   
* Light and Illumination::      
* Radioactivity::               
* Force and Energy::            
* Prefixes::                    
* Physical Constant Examples::  
* Physical Constant References and Further Reading::  

   The full list of constants is described briefly below.  Consult the
header files themselves for the values of the constants used in the
library.


File: gsl-ref.info,  Node: Fundamental Constants,  Next: Astronomy and Astrophysics,  Up: Physical Constants

44.1 Fundamental Constants
==========================

'GSL_CONST_MKSA_SPEED_OF_LIGHT'
     The speed of light in vacuum, c.

'GSL_CONST_MKSA_VACUUM_PERMEABILITY'
     The permeability of free space, \mu_0.  This constant is defined in
     the MKSA system only.

'GSL_CONST_MKSA_VACUUM_PERMITTIVITY'
     The permittivity of free space, \epsilon_0.  This constant is
     defined in the MKSA system only.

'GSL_CONST_MKSA_PLANCKS_CONSTANT_H'
     Planck's constant, h.

'GSL_CONST_MKSA_PLANCKS_CONSTANT_HBAR'
     Planck's constant divided by 2\pi, \hbar.

'GSL_CONST_NUM_AVOGADRO'
     Avogadro's number, N_a.

'GSL_CONST_MKSA_FARADAY'
     The molar charge of 1 Faraday.

'GSL_CONST_MKSA_BOLTZMANN'
     The Boltzmann constant, k.

'GSL_CONST_MKSA_MOLAR_GAS'
     The molar gas constant, R_0.

'GSL_CONST_MKSA_STANDARD_GAS_VOLUME'
     The standard gas volume, V_0.

'GSL_CONST_MKSA_STEFAN_BOLTZMANN_CONSTANT'
     The Stefan-Boltzmann radiation constant, \sigma.

'GSL_CONST_MKSA_GAUSS'
     The magnetic field of 1 Gauss.


File: gsl-ref.info,  Node: Astronomy and Astrophysics,  Next: Atomic and Nuclear Physics,  Prev: Fundamental Constants,  Up: Physical Constants

44.2 Astronomy and Astrophysics
===============================

'GSL_CONST_MKSA_ASTRONOMICAL_UNIT'
     The length of 1 astronomical unit (mean earth-sun distance), au.

'GSL_CONST_MKSA_GRAVITATIONAL_CONSTANT'
     The gravitational constant, G.

'GSL_CONST_MKSA_LIGHT_YEAR'
     The distance of 1 light-year, ly.

'GSL_CONST_MKSA_PARSEC'
     The distance of 1 parsec, pc.

'GSL_CONST_MKSA_GRAV_ACCEL'
     The standard gravitational acceleration on Earth, g.

'GSL_CONST_MKSA_SOLAR_MASS'
     The mass of the Sun.


File: gsl-ref.info,  Node: Atomic and Nuclear Physics,  Next: Measurement of Time,  Prev: Astronomy and Astrophysics,  Up: Physical Constants

44.3 Atomic and Nuclear Physics
===============================

'GSL_CONST_MKSA_ELECTRON_CHARGE'
     The charge of the electron, e.

'GSL_CONST_MKSA_ELECTRON_VOLT'
     The energy of 1 electron volt, eV.

'GSL_CONST_MKSA_UNIFIED_ATOMIC_MASS'
     The unified atomic mass, amu.

'GSL_CONST_MKSA_MASS_ELECTRON'
     The mass of the electron, m_e.

'GSL_CONST_MKSA_MASS_MUON'
     The mass of the muon, m_\mu.

'GSL_CONST_MKSA_MASS_PROTON'
     The mass of the proton, m_p.

'GSL_CONST_MKSA_MASS_NEUTRON'
     The mass of the neutron, m_n.

'GSL_CONST_NUM_FINE_STRUCTURE'
     The electromagnetic fine structure constant \alpha.

'GSL_CONST_MKSA_RYDBERG'
     The Rydberg constant, Ry, in units of energy.  This is related to
     the Rydberg inverse wavelength R_\infty by Ry = h c R_\infty.

'GSL_CONST_MKSA_BOHR_RADIUS'
     The Bohr radius, a_0.

'GSL_CONST_MKSA_ANGSTROM'
     The length of 1 angstrom.

'GSL_CONST_MKSA_BARN'
     The area of 1 barn.

'GSL_CONST_MKSA_BOHR_MAGNETON'
     The Bohr Magneton, \mu_B.

'GSL_CONST_MKSA_NUCLEAR_MAGNETON'
     The Nuclear Magneton, \mu_N.

'GSL_CONST_MKSA_ELECTRON_MAGNETIC_MOMENT'
     The absolute value of the magnetic moment of the electron, \mu_e.
     The physical magnetic moment of the electron is negative.

'GSL_CONST_MKSA_PROTON_MAGNETIC_MOMENT'
     The magnetic moment of the proton, \mu_p.

'GSL_CONST_MKSA_THOMSON_CROSS_SECTION'
     The Thomson cross section, \sigma_T.

'GSL_CONST_MKSA_DEBYE'
     The electric dipole moment of 1 Debye, D.


File: gsl-ref.info,  Node: Measurement of Time,  Next: Imperial Units,  Prev: Atomic and Nuclear Physics,  Up: Physical Constants

44.4 Measurement of Time
========================

'GSL_CONST_MKSA_MINUTE'
     The number of seconds in 1 minute.

'GSL_CONST_MKSA_HOUR'
     The number of seconds in 1 hour.

'GSL_CONST_MKSA_DAY'
     The number of seconds in 1 day.

'GSL_CONST_MKSA_WEEK'
     The number of seconds in 1 week.


File: gsl-ref.info,  Node: Imperial Units,  Next: Speed and Nautical Units,  Prev: Measurement of Time,  Up: Physical Constants

44.5 Imperial Units
===================

'GSL_CONST_MKSA_INCH'
     The length of 1 inch.

'GSL_CONST_MKSA_FOOT'
     The length of 1 foot.

'GSL_CONST_MKSA_YARD'
     The length of 1 yard.

'GSL_CONST_MKSA_MILE'
     The length of 1 mile.

'GSL_CONST_MKSA_MIL'
     The length of 1 mil (1/1000th of an inch).


File: gsl-ref.info,  Node: Speed and Nautical Units,  Next: Printers Units,  Prev: Imperial Units,  Up: Physical Constants

44.6 Speed and Nautical Units
=============================

'GSL_CONST_MKSA_KILOMETERS_PER_HOUR'
     The speed of 1 kilometer per hour.

'GSL_CONST_MKSA_MILES_PER_HOUR'
     The speed of 1 mile per hour.

'GSL_CONST_MKSA_NAUTICAL_MILE'
     The length of 1 nautical mile.

'GSL_CONST_MKSA_FATHOM'
     The length of 1 fathom.

'GSL_CONST_MKSA_KNOT'
     The speed of 1 knot.


File: gsl-ref.info,  Node: Printers Units,  Next: Volume Area and Length,  Prev: Speed and Nautical Units,  Up: Physical Constants

44.7 Printers Units
===================

'GSL_CONST_MKSA_POINT'
     The length of 1 printer's point (1/72 inch).

'GSL_CONST_MKSA_TEXPOINT'
     The length of 1 TeX point (1/72.27 inch).


File: gsl-ref.info,  Node: Volume Area and Length,  Next: Mass and Weight,  Prev: Printers Units,  Up: Physical Constants

44.8 Volume, Area and Length
============================

'GSL_CONST_MKSA_MICRON'
     The length of 1 micron.

'GSL_CONST_MKSA_HECTARE'
     The area of 1 hectare.

'GSL_CONST_MKSA_ACRE'
     The area of 1 acre.

'GSL_CONST_MKSA_LITER'
     The volume of 1 liter.

'GSL_CONST_MKSA_US_GALLON'
     The volume of 1 US gallon.

'GSL_CONST_MKSA_CANADIAN_GALLON'
     The volume of 1 Canadian gallon.

'GSL_CONST_MKSA_UK_GALLON'
     The volume of 1 UK gallon.

'GSL_CONST_MKSA_QUART'
     The volume of 1 quart.

'GSL_CONST_MKSA_PINT'
     The volume of 1 pint.


File: gsl-ref.info,  Node: Mass and Weight,  Next: Thermal Energy and Power,  Prev: Volume Area and Length,  Up: Physical Constants

44.9 Mass and Weight
====================

'GSL_CONST_MKSA_POUND_MASS'
     The mass of 1 pound.

'GSL_CONST_MKSA_OUNCE_MASS'
     The mass of 1 ounce.

'GSL_CONST_MKSA_TON'
     The mass of 1 ton.

'GSL_CONST_MKSA_METRIC_TON'
     The mass of 1 metric ton (1000 kg).

'GSL_CONST_MKSA_UK_TON'
     The mass of 1 UK ton.

'GSL_CONST_MKSA_TROY_OUNCE'
     The mass of 1 troy ounce.

'GSL_CONST_MKSA_CARAT'
     The mass of 1 carat.

'GSL_CONST_MKSA_GRAM_FORCE'
     The force of 1 gram weight.

'GSL_CONST_MKSA_POUND_FORCE'
     The force of 1 pound weight.

'GSL_CONST_MKSA_KILOPOUND_FORCE'
     The force of 1 kilopound weight.

'GSL_CONST_MKSA_POUNDAL'
     The force of 1 poundal.


File: gsl-ref.info,  Node: Thermal Energy and Power,  Next: Pressure,  Prev: Mass and Weight,  Up: Physical Constants

44.10 Thermal Energy and Power
==============================

'GSL_CONST_MKSA_CALORIE'
     The energy of 1 calorie.

'GSL_CONST_MKSA_BTU'
     The energy of 1 British Thermal Unit, btu.

'GSL_CONST_MKSA_THERM'
     The energy of 1 Therm.

'GSL_CONST_MKSA_HORSEPOWER'
     The power of 1 horsepower.


File: gsl-ref.info,  Node: Pressure,  Next: Viscosity,  Prev: Thermal Energy and Power,  Up: Physical Constants

44.11 Pressure
==============

'GSL_CONST_MKSA_BAR'
     The pressure of 1 bar.

'GSL_CONST_MKSA_STD_ATMOSPHERE'
     The pressure of 1 standard atmosphere.

'GSL_CONST_MKSA_TORR'
     The pressure of 1 torr.

'GSL_CONST_MKSA_METER_OF_MERCURY'
     The pressure of 1 meter of mercury.

'GSL_CONST_MKSA_INCH_OF_MERCURY'
     The pressure of 1 inch of mercury.

'GSL_CONST_MKSA_INCH_OF_WATER'
     The pressure of 1 inch of water.

'GSL_CONST_MKSA_PSI'
     The pressure of 1 pound per square inch.


File: gsl-ref.info,  Node: Viscosity,  Next: Light and Illumination,  Prev: Pressure,  Up: Physical Constants

44.12 Viscosity
===============

'GSL_CONST_MKSA_POISE'
     The dynamic viscosity of 1 poise.

'GSL_CONST_MKSA_STOKES'
     The kinematic viscosity of 1 stokes.


File: gsl-ref.info,  Node: Light and Illumination,  Next: Radioactivity,  Prev: Viscosity,  Up: Physical Constants

44.13 Light and Illumination
============================

'GSL_CONST_MKSA_STILB'
     The luminance of 1 stilb.

'GSL_CONST_MKSA_LUMEN'
     The luminous flux of 1 lumen.

'GSL_CONST_MKSA_LUX'
     The illuminance of 1 lux.

'GSL_CONST_MKSA_PHOT'
     The illuminance of 1 phot.

'GSL_CONST_MKSA_FOOTCANDLE'
     The illuminance of 1 footcandle.

'GSL_CONST_MKSA_LAMBERT'
     The luminance of 1 lambert.

'GSL_CONST_MKSA_FOOTLAMBERT'
     The luminance of 1 footlambert.


File: gsl-ref.info,  Node: Radioactivity,  Next: Force and Energy,  Prev: Light and Illumination,  Up: Physical Constants

44.14 Radioactivity
===================

'GSL_CONST_MKSA_CURIE'
     The activity of 1 curie.

'GSL_CONST_MKSA_ROENTGEN'
     The exposure of 1 roentgen.

'GSL_CONST_MKSA_RAD'
     The absorbed dose of 1 rad.


File: gsl-ref.info,  Node: Force and Energy,  Next: Prefixes,  Prev: Radioactivity,  Up: Physical Constants

44.15 Force and Energy
======================

'GSL_CONST_MKSA_NEWTON'
     The SI unit of force, 1 Newton.

'GSL_CONST_MKSA_DYNE'
     The force of 1 Dyne = 10^-5 Newton.

'GSL_CONST_MKSA_JOULE'
     The SI unit of energy, 1 Joule.

'GSL_CONST_MKSA_ERG'
     The energy 1 erg = 10^-7 Joule.


File: gsl-ref.info,  Node: Prefixes,  Next: Physical Constant Examples,  Prev: Force and Energy,  Up: Physical Constants

44.16 Prefixes
==============

These constants are dimensionless scaling factors.

'GSL_CONST_NUM_YOTTA'
     10^24

'GSL_CONST_NUM_ZETTA'
     10^21

'GSL_CONST_NUM_EXA'
     10^18

'GSL_CONST_NUM_PETA'
     10^15

'GSL_CONST_NUM_TERA'
     10^12

'GSL_CONST_NUM_GIGA'
     10^9

'GSL_CONST_NUM_MEGA'
     10^6

'GSL_CONST_NUM_KILO'
     10^3

'GSL_CONST_NUM_MILLI'
     10^-3

'GSL_CONST_NUM_MICRO'
     10^-6

'GSL_CONST_NUM_NANO'
     10^-9

'GSL_CONST_NUM_PICO'
     10^-12

'GSL_CONST_NUM_FEMTO'
     10^-15

'GSL_CONST_NUM_ATTO'
     10^-18

'GSL_CONST_NUM_ZEPTO'
     10^-21

'GSL_CONST_NUM_YOCTO'
     10^-24


File: gsl-ref.info,  Node: Physical Constant Examples,  Next: Physical Constant References and Further Reading,  Prev: Prefixes,  Up: Physical Constants

44.17 Examples
==============

The following program demonstrates the use of the physical constants in
a calculation.  In this case, the goal is to calculate the range of
light-travel times from Earth to Mars.

   The required data is the average distance of each planet from the Sun
in astronomical units (the eccentricities and inclinations of the orbits
will be neglected for the purposes of this calculation).  The average
radius of the orbit of Mars is 1.52 astronomical units, and for the
orbit of Earth it is 1 astronomical unit (by definition).  These values
are combined with the MKSA values of the constants for the speed of
light and the length of an astronomical unit to produce a result for the
shortest and longest light-travel times in seconds.  The figures are
converted into minutes before being displayed.

     #include <stdio.h>
     #include <gsl/gsl_const_mksa.h>

     int
     main (void)
     {
       double c  = GSL_CONST_MKSA_SPEED_OF_LIGHT;
       double au = GSL_CONST_MKSA_ASTRONOMICAL_UNIT;
       double minutes = GSL_CONST_MKSA_MINUTE;

       /* distance stored in meters */
       double r_earth = 1.00 * au;
       double r_mars  = 1.52 * au;

       double t_min, t_max;

       t_min = (r_mars - r_earth) / c;
       t_max = (r_mars + r_earth) / c;

       printf ("light travel time from Earth to Mars:\n");
       printf ("minimum = %.1f minutes\n", t_min / minutes);
       printf ("maximum = %.1f minutes\n", t_max / minutes);

       return 0;
     }

Here is the output from the program,

     light travel time from Earth to Mars:
     minimum = 4.3 minutes
     maximum = 21.0 minutes


File: gsl-ref.info,  Node: Physical Constant References and Further Reading,  Prev: Physical Constant Examples,  Up: Physical Constants

44.18 References and Further Reading
====================================

The authoritative sources for physical constants are the 2006 CODATA
recommended values, published in the article below.  Further information
on the values of physical constants is also available from the NIST
website.

     P.J. Mohr, B.N. Taylor, D.B. Newell, "CODATA Recommended Values of
     the Fundamental Physical Constants: 2006", Reviews of Modern
     Physics, 80(2), pp.  633-730 (2008).
     <http://www.physics.nist.gov/cuu/Constants/index.html>
     <http://physics.nist.gov/Pubs/SP811/appenB9.html>


File: gsl-ref.info,  Node: IEEE floating-point arithmetic,  Next: Debugging Numerical Programs,  Prev: Physical Constants,  Up: Top

45 IEEE floating-point arithmetic
*********************************

This chapter describes functions for examining the representation of
floating point numbers and controlling the floating point environment of
your program.  The functions described in this chapter are declared in
the header file 'gsl_ieee_utils.h'.

* Menu:

* Representation of floating point numbers::  
* Setting up your IEEE environment::  
* IEEE References and Further Reading::  


File: gsl-ref.info,  Node: Representation of floating point numbers,  Next: Setting up your IEEE environment,  Up: IEEE floating-point arithmetic

45.1 Representation of floating point numbers
=============================================

The IEEE Standard for Binary Floating-Point Arithmetic defines binary
formats for single and double precision numbers.  Each number is
composed of three parts: a "sign bit" (s), an "exponent" (E) and a
"fraction" (f).  The numerical value of the combination (s,E,f) is given
by the following formula,

     (-1)^s (1.fffff...) 2^E

The sign bit is either zero or one.  The exponent ranges from a minimum
value E_min to a maximum value E_max depending on the precision.  The
exponent is converted to an unsigned number e, known as the "biased
exponent", for storage by adding a "bias" parameter, e = E + bias.  The
sequence fffff... represents the digits of the binary fraction f.  The
binary digits are stored in "normalized form", by adjusting the exponent
to give a leading digit of 1.  Since the leading digit is always 1 for
normalized numbers it is assumed implicitly and does not have to be
stored.  Numbers smaller than 2^(E_min) are be stored in "denormalized
form" with a leading zero,

     (-1)^s (0.fffff...) 2^(E_min)

This allows gradual underflow down to 2^(E_min - p) for p bits of
precision.  A zero is encoded with the special exponent of 2^(E_min - 1)
and infinities with the exponent of 2^(E_max + 1).

The format for single precision numbers uses 32 bits divided in the
following way,

     seeeeeeeefffffffffffffffffffffff

     s = sign bit, 1 bit
     e = exponent, 8 bits  (E_min=-126, E_max=127, bias=127)
     f = fraction, 23 bits

The format for double precision numbers uses 64 bits divided in the
following way,

     seeeeeeeeeeeffffffffffffffffffffffffffffffffffffffffffffffffffff

     s = sign bit, 1 bit
     e = exponent, 11 bits  (E_min=-1022, E_max=1023, bias=1023)
     f = fraction, 52 bits

It is often useful to be able to investigate the behavior of a
calculation at the bit-level and the library provides functions for
printing the IEEE representations in a human-readable form.

 -- Function: void gsl_ieee_fprintf_float (FILE * STREAM, const float *
          X)
 -- Function: void gsl_ieee_fprintf_double (FILE * STREAM, const double
          * X)
     These functions output a formatted version of the IEEE
     floating-point number pointed to by X to the stream STREAM.  A
     pointer is used to pass the number indirectly, to avoid any
     undesired promotion from 'float' to 'double'.  The output takes one
     of the following forms,

     'NaN'
          the Not-a-Number symbol

     'Inf, -Inf'
          positive or negative infinity

     '1.fffff...*2^E, -1.fffff...*2^E'
          a normalized floating point number

     '0.fffff...*2^E, -0.fffff...*2^E'
          a denormalized floating point number

     '0, -0'
          positive or negative zero

     The output can be used directly in GNU Emacs Calc mode by preceding
     it with '2#' to indicate binary.

 -- Function: void gsl_ieee_printf_float (const float * X)
 -- Function: void gsl_ieee_printf_double (const double * X)
     These functions output a formatted version of the IEEE
     floating-point number pointed to by X to the stream 'stdout'.

The following program demonstrates the use of the functions by printing
the single and double precision representations of the fraction 1/3.
For comparison the representation of the value promoted from single to
double precision is also printed.

     #include <stdio.h>
     #include <gsl/gsl_ieee_utils.h>

     int
     main (void)
     {
       float f = 1.0/3.0;
       double d = 1.0/3.0;

       double fd = f; /* promote from float to double */

       printf (" f="); gsl_ieee_printf_float(&f);
       printf ("\n");

       printf ("fd="); gsl_ieee_printf_double(&fd);
       printf ("\n");

       printf (" d="); gsl_ieee_printf_double(&d);
       printf ("\n");

       return 0;
     }

The binary representation of 1/3 is 0.01010101... .  The output below
shows that the IEEE format normalizes this fraction to give a leading
digit of 1,

      f= 1.01010101010101010101011*2^-2
     fd= 1.0101010101010101010101100000000000000000000000000000*2^-2
      d= 1.0101010101010101010101010101010101010101010101010101*2^-2

The output also shows that a single-precision number is promoted to
double-precision by adding zeros in the binary representation.


File: gsl-ref.info,  Node: Setting up your IEEE environment,  Next: IEEE References and Further Reading,  Prev: Representation of floating point numbers,  Up: IEEE floating-point arithmetic

45.2 Setting up your IEEE environment
=====================================

The IEEE standard defines several "modes" for controlling the behavior
of floating point operations.  These modes specify the important
properties of computer arithmetic: the direction used for rounding (e.g.
whether numbers should be rounded up, down or to the nearest number),
the rounding precision and how the program should handle arithmetic
exceptions, such as division by zero.

   Many of these features can now be controlled via standard functions
such as 'fpsetround', which should be used whenever they are available.
Unfortunately in the past there has been no universal API for
controlling their behavior--each system has had its own low-level way of
accessing them.  To help you write portable programs GSL allows you to
specify modes in a platform-independent way using the environment
variable 'GSL_IEEE_MODE'.  The library then takes care of all the
necessary machine-specific initializations for you when you call the
function 'gsl_ieee_env_setup'.

 -- Function: void gsl_ieee_env_setup ()
     This function reads the environment variable 'GSL_IEEE_MODE' and
     attempts to set up the corresponding specified IEEE modes.  The
     environment variable should be a list of keywords, separated by
     commas, like this,

          'GSL_IEEE_MODE' = "KEYWORD,KEYWORD,..."

     where KEYWORD is one of the following mode-names,

          'single-precision'
          'double-precision'
          'extended-precision'
          'round-to-nearest'
          'round-down'
          'round-up'
          'round-to-zero'
          'mask-all'
          'mask-invalid'
          'mask-denormalized'
          'mask-division-by-zero'
          'mask-overflow'
          'mask-underflow'
          'trap-inexact'
          'trap-common'

     If 'GSL_IEEE_MODE' is empty or undefined then the function returns
     immediately and no attempt is made to change the system's IEEE
     mode.  When the modes from 'GSL_IEEE_MODE' are turned on the
     function prints a short message showing the new settings to remind
     you that the results of the program will be affected.

     If the requested modes are not supported by the platform being used
     then the function calls the error handler and returns an error code
     of 'GSL_EUNSUP'.

     When options are specified using this method, the resulting mode is
     based on a default setting of the highest available precision
     (double precision or extended precision, depending on the platform)
     in round-to-nearest mode, with all exceptions enabled apart from
     the INEXACT exception.  The INEXACT exception is generated whenever
     rounding occurs, so it must generally be disabled in typical
     scientific calculations.  All other floating-point exceptions are
     enabled by default, including underflows and the use of
     denormalized numbers, for safety.  They can be disabled with the
     individual 'mask-' settings or together using 'mask-all'.

     The following adjusted combination of modes is convenient for many
     purposes,

          GSL_IEEE_MODE="double-precision,"\
                          "mask-underflow,"\
                            "mask-denormalized"

     This choice ignores any errors relating to small numbers (either
     denormalized, or underflowing to zero) but traps overflows,
     division by zero and invalid operations.

     Note that on the x86 series of processors this function sets both
     the original x87 mode and the newer MXCSR mode, which controls SSE
     floating-point operations.  The SSE floating-point units do not
     have a precision-control bit, and always work in double-precision.
     The single-precision and extended-precision keywords have no effect
     in this case.

To demonstrate the effects of different rounding modes consider the
following program which computes e, the base of natural logarithms, by
summing a rapidly-decreasing series,

     e = 1 + 1/2! + 1/3! + 1/4! + ...
       = 2.71828182846...

     #include <stdio.h>
     #include <gsl/gsl_math.h>
     #include <gsl/gsl_ieee_utils.h>

     int
     main (void)
     {
       double x = 1, oldsum = 0, sum = 0;
       int i = 0;

       gsl_ieee_env_setup (); /* read GSL_IEEE_MODE */

       do
         {
           i++;

           oldsum = sum;
           sum += x;
           x = x / i;

           printf ("i=%2d sum=%.18f error=%g\n",
                   i, sum, sum - M_E);

           if (i > 30)
              break;
         }
       while (sum != oldsum);

       return 0;
     }

Here are the results of running the program in 'round-to-nearest' mode.
This is the IEEE default so it isn't really necessary to specify it
here,

     $ GSL_IEEE_MODE="round-to-nearest" ./a.out
     i= 1 sum=1.000000000000000000 error=-1.71828
     i= 2 sum=2.000000000000000000 error=-0.718282
     ....
     i=18 sum=2.718281828459045535 error=4.44089e-16
     i=19 sum=2.718281828459045535 error=4.44089e-16

After nineteen terms the sum converges to within 4 \times 10^-16 of the
correct value.  If we now change the rounding mode to 'round-down' the
final result is less accurate,

     $ GSL_IEEE_MODE="round-down" ./a.out
     i= 1 sum=1.000000000000000000 error=-1.71828
     ....
     i=19 sum=2.718281828459041094 error=-3.9968e-15

The result is about 4 \times 10^-15 below the correct value, an order of
magnitude worse than the result obtained in the 'round-to-nearest' mode.

   If we change to rounding mode to 'round-up' then the final result is
higher than the correct value (when we add each term to the sum the
final result is always rounded up, which increases the sum by at least
one tick until the added term underflows to zero).  To avoid this
problem we would need to use a safer converge criterion, such as 'while
(fabs(sum - oldsum) > epsilon)', with a suitably chosen value of
epsilon.

   Finally we can see the effect of computing the sum using
single-precision rounding, in the default 'round-to-nearest' mode.  In
this case the program thinks it is still using double precision numbers
but the CPU rounds the result of each floating point operation to
single-precision accuracy.  This simulates the effect of writing the
program using single-precision 'float' variables instead of 'double'
variables.  The iteration stops after about half the number of
iterations and the final result is much less accurate,

     $ GSL_IEEE_MODE="single-precision" ./a.out
     ....
     i=12 sum=2.718281984329223633 error=1.5587e-07

with an error of O(10^-7), which corresponds to single precision
accuracy (about 1 part in 10^7).  Continuing the iterations further does
not decrease the error because all the subsequent results are rounded to
the same value.


File: gsl-ref.info,  Node: IEEE References and Further Reading,  Prev: Setting up your IEEE environment,  Up: IEEE floating-point arithmetic

45.3 References and Further Reading
===================================

The reference for the IEEE standard is,

     ANSI/IEEE Std 754-1985, IEEE Standard for Binary Floating-Point
     Arithmetic.

A more pedagogical introduction to the standard can be found in the
following paper,

     David Goldberg: What Every Computer Scientist Should Know About
     Floating-Point Arithmetic.  'ACM Computing Surveys', Vol. 23, No. 1
     (March 1991), pages 5-48.

     Corrigendum: 'ACM Computing Surveys', Vol. 23, No. 3 (September
     1991), page 413.  and see also the sections by B. A. Wichmann and
     Charles B. Dunham in Surveyor's Forum: "What Every Computer
     Scientist Should Know About Floating-Point Arithmetic".  'ACM
     Computing Surveys', Vol. 24, No. 3 (September 1992), page 319.

   A detailed textbook on IEEE arithmetic and its practical use is
available from SIAM Press,

     Michael L. Overton, 'Numerical Computing with IEEE Floating Point
     Arithmetic', SIAM Press, ISBN 0898715717.


File: gsl-ref.info,  Node: Debugging Numerical Programs,  Next: Contributors to GSL,  Prev: IEEE floating-point arithmetic,  Up: Top

Appendix A Debugging Numerical Programs
***************************************

This chapter describes some tips and tricks for debugging numerical
programs which use GSL.

* Menu:

* Using gdb::                   
* Examining floating point registers::  
* Handling floating point exceptions::  
* GCC warning options for numerical programs::  
* Debugging References::        


File: gsl-ref.info,  Node: Using gdb,  Next: Examining floating point registers,  Up: Debugging Numerical Programs

A.1 Using gdb
=============

Any errors reported by the library are passed to the function
'gsl_error'.  By running your programs under gdb and setting a
breakpoint in this function you can automatically catch any library
errors.  You can add a breakpoint for every session by putting

     break gsl_error

into your '.gdbinit' file in the directory where your program is
started.

   If the breakpoint catches an error then you can use a backtrace
('bt') to see the call-tree, and the arguments which possibly caused the
error.  By moving up into the calling function you can investigate the
values of variables at that point.  Here is an example from the program
'fft/test_trap', which contains the following line,

     status = gsl_fft_complex_wavetable_alloc (0, &complex_wavetable);

The function 'gsl_fft_complex_wavetable_alloc' takes the length of an
FFT as its first argument.  When this line is executed an error will be
generated because the length of an FFT is not allowed to be zero.

   To debug this problem we start 'gdb', using the file '.gdbinit' to
define a breakpoint in 'gsl_error',

     $ gdb test_trap

     GDB is free software and you are welcome to distribute copies
     of it under certain conditions; type "show copying" to see
     the conditions.  There is absolutely no warranty for GDB;
     type "show warranty" for details.  GDB 4.16 (i586-debian-linux),
     Copyright 1996 Free Software Foundation, Inc.

     Breakpoint 1 at 0x8050b1e: file error.c, line 14.

When we run the program this breakpoint catches the error and shows the
reason for it.

     (gdb) run
     Starting program: test_trap

     Breakpoint 1, gsl_error (reason=0x8052b0d
         "length n must be positive integer",
         file=0x8052b04 "c_init.c", line=108, gsl_errno=1)
         at error.c:14
     14        if (gsl_error_handler)

The first argument of 'gsl_error' is always a string describing the
error.  Now we can look at the backtrace to see what caused the problem,

     (gdb) bt
     #0  gsl_error (reason=0x8052b0d
         "length n must be positive integer",
         file=0x8052b04 "c_init.c", line=108, gsl_errno=1)
         at error.c:14
     #1  0x8049376 in gsl_fft_complex_wavetable_alloc (n=0,
         wavetable=0xbffff778) at c_init.c:108
     #2  0x8048a00 in main (argc=1, argv=0xbffff9bc)
         at test_trap.c:94
     #3  0x80488be in ___crt_dummy__ ()

We can see that the error was generated in the function
'gsl_fft_complex_wavetable_alloc' when it was called with an argument of
N=0.  The original call came from line 94 in the file 'test_trap.c'.

   By moving up to the level of the original call we can find the line
that caused the error,

     (gdb) up
     #1  0x8049376 in gsl_fft_complex_wavetable_alloc (n=0,
         wavetable=0xbffff778) at c_init.c:108
     108   GSL_ERROR ("length n must be positive integer", GSL_EDOM);
     (gdb) up
     #2  0x8048a00 in main (argc=1, argv=0xbffff9bc)
         at test_trap.c:94
     94    status = gsl_fft_complex_wavetable_alloc (0,
             &complex_wavetable);

Thus we have found the line that caused the problem.  From this point we
could also print out the values of other variables such as
'complex_wavetable'.


File: gsl-ref.info,  Node: Examining floating point registers,  Next: Handling floating point exceptions,  Prev: Using gdb,  Up: Debugging Numerical Programs

A.2 Examining floating point registers
======================================

The contents of floating point registers can be examined using the
command 'info float' (on supported platforms).

     (gdb) info float
          st0: 0xc4018b895aa17a945000  Valid Normal -7.838871e+308
          st1: 0x3ff9ea3f50e4d7275000  Valid Normal 0.0285946
          st2: 0x3fe790c64ce27dad4800  Valid Normal 6.7415931e-08
          st3: 0x3ffaa3ef0df6607d7800  Spec  Normal 0.0400229
          st4: 0x3c028000000000000000  Valid Normal 4.4501477e-308
          st5: 0x3ffef5412c22219d9000  Zero  Normal 0.9580257
          st6: 0x3fff8000000000000000  Valid Normal 1
          st7: 0xc4028b65a1f6d243c800  Valid Normal -1.566206e+309
        fctrl: 0x0272 53 bit; NEAR; mask DENOR UNDER LOS;
        fstat: 0xb9ba flags 0001; top 7; excep DENOR OVERF UNDER LOS
         ftag: 0x3fff
          fip: 0x08048b5c
          fcs: 0x051a0023
       fopoff: 0x08086820
       fopsel: 0x002b

Individual registers can be examined using the variables $REG, where REG
is the register name.

     (gdb) p $st1
     $1 = 0.02859464454261210347719


File: gsl-ref.info,  Node: Handling floating point exceptions,  Next: GCC warning options for numerical programs,  Prev: Examining floating point registers,  Up: Debugging Numerical Programs

A.3 Handling floating point exceptions
======================================

It is possible to stop the program whenever a 'SIGFPE' floating point
exception occurs.  This can be useful for finding the cause of an
unexpected infinity or 'NaN'.  The current handler settings can be shown
with the command 'info signal SIGFPE'.

     (gdb) info signal SIGFPE
     Signal  Stop  Print  Pass to program Description
     SIGFPE  Yes   Yes    Yes             Arithmetic exception

Unless the program uses a signal handler the default setting should be
changed so that SIGFPE is not passed to the program, as this would cause
it to exit.  The command 'handle SIGFPE stop nopass' prevents this.

     (gdb) handle SIGFPE stop nopass
     Signal  Stop  Print  Pass to program Description
     SIGFPE  Yes   Yes    No              Arithmetic exception

Depending on the platform it may be necessary to instruct the kernel to
generate signals for floating point exceptions.  For programs using GSL
this can be achieved using the 'GSL_IEEE_MODE' environment variable in
conjunction with the function 'gsl_ieee_env_setup' as described in *note
IEEE floating-point arithmetic::.

     (gdb) set env GSL_IEEE_MODE=double-precision


File: gsl-ref.info,  Node: GCC warning options for numerical programs,  Next: Debugging References,  Prev: Handling floating point exceptions,  Up: Debugging Numerical Programs

A.4 GCC warning options for numerical programs
==============================================

Writing reliable numerical programs in C requires great care.  The
following GCC warning options are recommended when compiling numerical
programs:

     gcc -ansi -pedantic -Werror -Wall -W
       -Wmissing-prototypes -Wstrict-prototypes
       -Wconversion -Wshadow -Wpointer-arith
       -Wcast-qual -Wcast-align
       -Wwrite-strings -Wnested-externs
       -fshort-enums -fno-common -Dinline= -g -O2

For details of each option consult the manual 'Using and Porting GCC'.
The following table gives a brief explanation of what types of errors
these options catch.

'-ansi -pedantic'
     Use ANSI C, and reject any non-ANSI extensions.  These flags help
     in writing portable programs that will compile on other systems.
'-Werror'
     Consider warnings to be errors, so that compilation stops.  This
     prevents warnings from scrolling off the top of the screen and
     being lost.  You won't be able to compile the program until it is
     completely warning-free.
'-Wall'
     This turns on a set of warnings for common programming problems.
     You need '-Wall', but it is not enough on its own.
'-O2'
     Turn on optimization.  The warnings for uninitialized variables in
     '-Wall' rely on the optimizer to analyze the code.  If there is no
     optimization then these warnings aren't generated.
'-W'
     This turns on some extra warnings not included in '-Wall', such as
     missing return values and comparisons between signed and unsigned
     integers.
'-Wmissing-prototypes -Wstrict-prototypes'
     Warn if there are any missing or inconsistent prototypes.  Without
     prototypes it is harder to detect problems with incorrect
     arguments.
'-Wconversion'
     The main use of this option is to warn about conversions from
     signed to unsigned integers.  For example, 'unsigned int x = -1'.
     If you need to perform such a conversion you can use an explicit
     cast.
'-Wshadow'
     This warns whenever a local variable shadows another local
     variable.  If two variables have the same name then it is a
     potential source of confusion.
'-Wpointer-arith -Wcast-qual -Wcast-align'
     These options warn if you try to do pointer arithmetic for types
     which don't have a size, such as 'void', if you remove a 'const'
     cast from a pointer, or if you cast a pointer to a type which has a
     different size, causing an invalid alignment.
'-Wwrite-strings'
     This option gives string constants a 'const' qualifier so that it
     will be a compile-time error to attempt to overwrite them.
'-fshort-enums'
     This option makes the type of 'enum' as short as possible.
     Normally this makes an 'enum' different from an 'int'.
     Consequently any attempts to assign a pointer-to-int to a
     pointer-to-enum will generate a cast-alignment warning.
'-fno-common'
     This option prevents global variables being simultaneously defined
     in different object files (you get an error at link time).  Such a
     variable should be defined in one file and referred to in other
     files with an 'extern' declaration.
'-Wnested-externs'
     This warns if an 'extern' declaration is encountered within a
     function.
'-Dinline='
     The 'inline' keyword is not part of ANSI C. Thus if you want to use
     '-ansi' with a program which uses inline functions you can use this
     preprocessor definition to remove the 'inline' keywords.
'-g'
     It always makes sense to put debugging symbols in the executable so
     that you can debug it using 'gdb'.  The only effect of debugging
     symbols is to increase the size of the file, and you can use the
     'strip' command to remove them later if necessary.


File: gsl-ref.info,  Node: Debugging References,  Prev: GCC warning options for numerical programs,  Up: Debugging Numerical Programs

A.5 References and Further Reading
==================================

The following books are essential reading for anyone writing and
debugging numerical programs with GCC and GDB.

     R.M. Stallman, 'Using and Porting GNU CC', Free Software
     Foundation, ISBN 1882114388

     R.M. Stallman, R.H. Pesch, 'Debugging with GDB: The GNU
     Source-Level Debugger', Free Software Foundation, ISBN 1882114779

For a tutorial introduction to the GNU C Compiler and related programs,
see

     B.J. Gough, 'An Introduction to GCC', Network Theory Ltd, ISBN
     0954161793


File: gsl-ref.info,  Node: Contributors to GSL,  Next: Autoconf Macros,  Prev: Debugging Numerical Programs,  Up: Top

Appendix B Contributors to GSL
******************************

(See the AUTHORS file in the distribution for up-to-date information.)

*Mark Galassi*
     Conceived GSL (with James Theiler) and wrote the design document.
     Wrote the simulated annealing package and the relevant chapter in
     the manual.

*James Theiler*
     Conceived GSL (with Mark Galassi).  Wrote the random number
     generators and the relevant chapter in this manual.

*Jim Davies*
     Wrote the statistical routines and the relevant chapter in this
     manual.

*Brian Gough*
     FFTs, numerical integration, random number generators and
     distributions, root finding, minimization and fitting, polynomial
     solvers, complex numbers, physical constants, permutations, vector
     and matrix functions, histograms, statistics, ieee-utils, revised
     CBLAS Level 2 & 3, matrix decompositions, eigensystems, cumulative
     distribution functions, testing, documentation and releases.

*Reid Priedhorsky*
     Wrote and documented the initial version of the root finding
     routines while at Los Alamos National Laboratory, Mathematical
     Modeling and Analysis Group.

*Gerard Jungman*
     Special Functions, Series acceleration, ODEs, BLAS, Linear Algebra,
     Eigensystems, Hankel Transforms.

*Mike Booth*
     Wrote the Monte Carlo library.

*Jorma Olavi Ta"htinen*
     Wrote the initial complex arithmetic functions.

*Thomas Walter*
     Wrote the initial heapsort routines and Cholesky decomposition.

*Fabrice Rossi*
     Multidimensional minimization.

*Carlo Perassi*
     Implementation of the random number generators in Knuth's
     'Seminumerical Algorithms', 3rd Ed.

*Szymon Jaroszewicz*
     Wrote the routines for generating combinations.

*Nicolas Darnis*
     Wrote the cyclic functions and the initial functions for canonical
     permutations.

*Jason H. Stover*
     Wrote the major cumulative distribution functions.

*Ivo Alxneit*
     Wrote the routines for wavelet transforms.

*Tuomo Keskitalo*
     Improved the implementation of the ODE solvers and wrote the
     ode-initval2 routines.

*Lowell Johnson*
     Implementation of the Mathieu functions.

*Patrick Alken*
     Implementation of nonsymmetric and generalized eigensystems,
     B-splines, robust linear regression, and sparse matrices.

*Rhys Ulerich*
     Wrote the multiset routines.

*Pavel Holoborodko*
     Wrote the fixed order Gauss-Legendre quadrature routines.

*Pedro Gonnet*
     Wrote the CQUAD integration routines.

   Thanks to Nigel Lowry for help in proofreading the manual.

   The non-symmetric eigensystems routines contain code based on the
LAPACK linear algebra library.  LAPACK is distributed under the
following license:


     Copyright (c) 1992-2006 The University of Tennessee.  All rights
     reserved.

     Redistribution and use in source and binary forms, with or without
     modification, are permitted provided that the following conditions
     are met:

     * Redistributions of source code must retain the above copyright
     notice, this list of conditions and the following disclaimer.

     * Redistributions in binary form must reproduce the above copyright
     notice, this list of conditions and the following disclaimer listed
     in this license in the documentation and/or other materials
     provided with the distribution.

     * Neither the name of the copyright holders nor the names of its
     contributors may be used to endorse or promote products derived
     from this software without specific prior written permission.

     THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
     "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
     LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
     FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
     COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
     INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
     (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
     SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
     HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
     STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
     ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
     OF THE POSSIBILITY OF SUCH DAMAGE.


File: gsl-ref.info,  Node: Autoconf Macros,  Next: GSL CBLAS Library,  Prev: Contributors to GSL,  Up: Top

Appendix C Autoconf Macros
**************************

For applications using 'autoconf' the standard macro 'AC_CHECK_LIB' can
be used to link with GSL automatically from a 'configure' script.  The
library itself depends on the presence of a CBLAS and math library as
well, so these must also be located before linking with the main
'libgsl' file.  The following commands should be placed in the
'configure.ac' file to perform these tests,

     AC_CHECK_LIB([m],[cos])
     AC_CHECK_LIB([gslcblas],[cblas_dgemm])
     AC_CHECK_LIB([gsl],[gsl_blas_dgemm])

It is important to check for 'libm' and 'libgslcblas' before 'libgsl',
otherwise the tests will fail.  Assuming the libraries are found the
output during the configure stage looks like this,

     checking for cos in -lm... yes
     checking for cblas_dgemm in -lgslcblas... yes
     checking for gsl_blas_dgemm in -lgsl... yes

If the library is found then the tests will define the macros
'HAVE_LIBGSL', 'HAVE_LIBGSLCBLAS', 'HAVE_LIBM' and add the options
'-lgsl -lgslcblas -lm' to the variable 'LIBS'.

   The tests above will find any version of the library.  They are
suitable for general use, where the versions of the functions are not
important.  An alternative macro is available in the file 'gsl.m4' to
test for a specific version of the library.  To use this macro simply
add the following line to your 'configure.in' file instead of the tests
above:

     AX_PATH_GSL(GSL_VERSION,
                [action-if-found],
                [action-if-not-found])

The argument 'GSL_VERSION' should be the two or three digit MAJOR.MINOR
or MAJOR.MINOR.MICRO version number of the release you require.  A
suitable choice for 'action-if-not-found' is,

     AC_MSG_ERROR(could not find required version of GSL)

Then you can add the variables 'GSL_LIBS' and 'GSL_CFLAGS' to your
Makefile.am files to obtain the correct compiler flags.  'GSL_LIBS' is
equal to the output of the 'gsl-config --libs' command and 'GSL_CFLAGS'
is equal to 'gsl-config --cflags' command.  For example,

     libfoo_la_LDFLAGS = -lfoo $(GSL_LIBS) -lgslcblas

Note that the macro 'AX_PATH_GSL' needs to use the C compiler so it
should appear in the 'configure.in' file before the macro
'AC_LANG_CPLUSPLUS' for programs that use C++.

   To test for 'inline' the following test should be placed in your
'configure.in' file,

     AC_C_INLINE

     if test "$ac_cv_c_inline" != no ; then
       AC_DEFINE(HAVE_INLINE,1)
       AC_SUBST(HAVE_INLINE)
     fi

and the macro will then be defined in the compilation flags or by
including the file 'config.h' before any library headers.

   The following autoconf test will check for 'extern inline',

     dnl Check for "extern inline", using a modified version
     dnl of the test for AC_C_INLINE from acspecific.mt
     dnl
     AC_CACHE_CHECK([for extern inline], ac_cv_c_extern_inline,
     [ac_cv_c_extern_inline=no
     AC_TRY_COMPILE([extern $ac_cv_c_inline double foo(double x);
     extern $ac_cv_c_inline double foo(double x) { return x+1.0; };
     double foo (double x) { return x + 1.0; };],
     [  foo(1.0)  ],
     [ac_cv_c_extern_inline="yes"])
     ])

     if test "$ac_cv_c_extern_inline" != no ; then
       AC_DEFINE(HAVE_INLINE,1)
       AC_SUBST(HAVE_INLINE)
     fi

   The substitution of portability functions can be made automatically
if you use 'autoconf'.  For example, to test whether the BSD function
'hypot' is available you can include the following line in the configure
file 'configure.in' for your application,

     AC_CHECK_FUNCS(hypot)

and place the following macro definitions in the file 'config.h.in',

     /* Substitute gsl_hypot for missing system hypot */

     #ifndef HAVE_HYPOT
     #define hypot gsl_hypot
     #endif

The application source files can then use the include command '#include
<config.h>' to substitute 'gsl_hypot' for each occurrence of 'hypot'
when 'hypot' is not available.


File: gsl-ref.info,  Node: GSL CBLAS Library,  Next: GNU General Public License,  Prev: Autoconf Macros,  Up: Top

Appendix D GSL CBLAS Library
****************************

The prototypes for the low-level CBLAS functions are declared in the
file 'gsl_cblas.h'.  For the definition of the functions consult the
documentation available from Netlib (*note BLAS References and Further
Reading::).

* Menu:

* Level 1 CBLAS Functions::     
* Level 2 CBLAS Functions::     
* Level 3 CBLAS Functions::     
* GSL CBLAS Examples::          


File: gsl-ref.info,  Node: Level 1 CBLAS Functions,  Next: Level 2 CBLAS Functions,  Up: GSL CBLAS Library

D.1 Level 1
===========

 -- Function: float cblas_sdsdot (const int N, const float ALPHA, const
          float * X, const int INCX, const float * Y, const int INCY)

 -- Function: double cblas_dsdot (const int N, const float * X, const
          int INCX, const float * Y, const int INCY)

 -- Function: float cblas_sdot (const int N, const float * X, const int
          INCX, const float * Y, const int INCY)

 -- Function: double cblas_ddot (const int N, const double * X, const
          int INCX, const double * Y, const int INCY)

 -- Function: void cblas_cdotu_sub (const int N, const void * X, const
          int INCX, const void * Y, const int INCY, void * DOTU)

 -- Function: void cblas_cdotc_sub (const int N, const void * X, const
          int INCX, const void * Y, const int INCY, void * DOTC)

 -- Function: void cblas_zdotu_sub (const int N, const void * X, const
          int INCX, const void * Y, const int INCY, void * DOTU)

 -- Function: void cblas_zdotc_sub (const int N, const void * X, const
          int INCX, const void * Y, const int INCY, void * DOTC)

 -- Function: float cblas_snrm2 (const int N, const float * X, const int
          INCX)

 -- Function: float cblas_sasum (const int N, const float * X, const int
          INCX)

 -- Function: double cblas_dnrm2 (const int N, const double * X, const
          int INCX)

 -- Function: double cblas_dasum (const int N, const double * X, const
          int INCX)

 -- Function: float cblas_scnrm2 (const int N, const void * X, const int
          INCX)

 -- Function: float cblas_scasum (const int N, const void * X, const int
          INCX)

 -- Function: double cblas_dznrm2 (const int N, const void * X, const
          int INCX)

 -- Function: double cblas_dzasum (const int N, const void * X, const
          int INCX)

 -- Function: CBLAS_INDEX cblas_isamax (const int N, const float * X,
          const int INCX)

 -- Function: CBLAS_INDEX cblas_idamax (const int N, const double * X,
          const int INCX)

 -- Function: CBLAS_INDEX cblas_icamax (const int N, const void * X,
          const int INCX)

 -- Function: CBLAS_INDEX cblas_izamax (const int N, const void * X,
          const int INCX)

 -- Function: void cblas_sswap (const int N, float * X, const int INCX,
          float * Y, const int INCY)

 -- Function: void cblas_scopy (const int N, const float * X, const int
          INCX, float * Y, const int INCY)

 -- Function: void cblas_saxpy (const int N, const float ALPHA, const
          float * X, const int INCX, float * Y, const int INCY)

 -- Function: void cblas_dswap (const int N, double * X, const int INCX,
          double * Y, const int INCY)

 -- Function: void cblas_dcopy (const int N, const double * X, const int
          INCX, double * Y, const int INCY)

 -- Function: void cblas_daxpy (const int N, const double ALPHA, const
          double * X, const int INCX, double * Y, const int INCY)

 -- Function: void cblas_cswap (const int N, void * X, const int INCX,
          void * Y, const int INCY)

 -- Function: void cblas_ccopy (const int N, const void * X, const int
          INCX, void * Y, const int INCY)

 -- Function: void cblas_caxpy (const int N, const void * ALPHA, const
          void * X, const int INCX, void * Y, const int INCY)

 -- Function: void cblas_zswap (const int N, void * X, const int INCX,
          void * Y, const int INCY)

 -- Function: void cblas_zcopy (const int N, const void * X, const int
          INCX, void * Y, const int INCY)

 -- Function: void cblas_zaxpy (const int N, const void * ALPHA, const
          void * X, const int INCX, void * Y, const int INCY)

 -- Function: void cblas_srotg (float * A, float * B, float * C, float *
          S)

 -- Function: void cblas_srotmg (float * D1, float * D2, float * B1,
          const float B2, float * P)

 -- Function: void cblas_srot (const int N, float * X, const int INCX,
          float * Y, const int INCY, const float C, const float S)

 -- Function: void cblas_srotm (const int N, float * X, const int INCX,
          float * Y, const int INCY, const float * P)

 -- Function: void cblas_drotg (double * A, double * B, double * C,
          double * S)

 -- Function: void cblas_drotmg (double * D1, double * D2, double * B1,
          const double B2, double * P)

 -- Function: void cblas_drot (const int N, double * X, const int INCX,
          double * Y, const int INCY, const double C, const double S)

 -- Function: void cblas_drotm (const int N, double * X, const int INCX,
          double * Y, const int INCY, const double * P)

 -- Function: void cblas_sscal (const int N, const float ALPHA, float *
          X, const int INCX)

 -- Function: void cblas_dscal (const int N, const double ALPHA, double
          * X, const int INCX)

 -- Function: void cblas_cscal (const int N, const void * ALPHA, void *
          X, const int INCX)

 -- Function: void cblas_zscal (const int N, const void * ALPHA, void *
          X, const int INCX)

 -- Function: void cblas_csscal (const int N, const float ALPHA, void *
          X, const int INCX)

 -- Function: void cblas_zdscal (const int N, const double ALPHA, void *
          X, const int INCX)


File: gsl-ref.info,  Node: Level 2 CBLAS Functions,  Next: Level 3 CBLAS Functions,  Prev: Level 1 CBLAS Functions,  Up: GSL CBLAS Library

D.2 Level 2
===========

 -- Function: void cblas_sgemv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_TRANSPOSE TRANSA, const int M, const int N, const float
          ALPHA, const float * A, const int LDA, const float * X, const
          int INCX, const float BETA, float * Y, const int INCY)

 -- Function: void cblas_sgbmv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_TRANSPOSE TRANSA, const int M, const int N, const int
          KL, const int KU, const float ALPHA, const float * A, const
          int LDA, const float * X, const int INCX, const float BETA,
          float * Y, const int INCY)

 -- Function: void cblas_strmv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const enum CBLAS_TRANSPOSE TRANSA, const enum
          CBLAS_DIAG DIAG, const int N, const float * A, const int LDA,
          float * X, const int INCX)

 -- Function: void cblas_stbmv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const enum CBLAS_TRANSPOSE TRANSA, const enum
          CBLAS_DIAG DIAG, const int N, const int K, const float * A,
          const int LDA, float * X, const int INCX)

 -- Function: void cblas_stpmv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const enum CBLAS_TRANSPOSE TRANSA, const enum
          CBLAS_DIAG DIAG, const int N, const float * AP, float * X,
          const int INCX)

 -- Function: void cblas_strsv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const enum CBLAS_TRANSPOSE TRANSA, const enum
          CBLAS_DIAG DIAG, const int N, const float * A, const int LDA,
          float * X, const int INCX)

 -- Function: void cblas_stbsv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const enum CBLAS_TRANSPOSE TRANSA, const enum
          CBLAS_DIAG DIAG, const int N, const int K, const float * A,
          const int LDA, float * X, const int INCX)

 -- Function: void cblas_stpsv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const enum CBLAS_TRANSPOSE TRANSA, const enum
          CBLAS_DIAG DIAG, const int N, const float * AP, float * X,
          const int INCX)

 -- Function: void cblas_dgemv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_TRANSPOSE TRANSA, const int M, const int N, const double
          ALPHA, const double * A, const int LDA, const double * X,
          const int INCX, const double BETA, double * Y, const int INCY)

 -- Function: void cblas_dgbmv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_TRANSPOSE TRANSA, const int M, const int N, const int
          KL, const int KU, const double ALPHA, const double * A, const
          int LDA, const double * X, const int INCX, const double BETA,
          double * Y, const int INCY)

 -- Function: void cblas_dtrmv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const enum CBLAS_TRANSPOSE TRANSA, const enum
          CBLAS_DIAG DIAG, const int N, const double * A, const int LDA,
          double * X, const int INCX)

 -- Function: void cblas_dtbmv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const enum CBLAS_TRANSPOSE TRANSA, const enum
          CBLAS_DIAG DIAG, const int N, const int K, const double * A,
          const int LDA, double * X, const int INCX)

 -- Function: void cblas_dtpmv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const enum CBLAS_TRANSPOSE TRANSA, const enum
          CBLAS_DIAG DIAG, const int N, const double * AP, double * X,
          const int INCX)

 -- Function: void cblas_dtrsv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const enum CBLAS_TRANSPOSE TRANSA, const enum
          CBLAS_DIAG DIAG, const int N, const double * A, const int LDA,
          double * X, const int INCX)

 -- Function: void cblas_dtbsv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const enum CBLAS_TRANSPOSE TRANSA, const enum
          CBLAS_DIAG DIAG, const int N, const int K, const double * A,
          const int LDA, double * X, const int INCX)

 -- Function: void cblas_dtpsv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const enum CBLAS_TRANSPOSE TRANSA, const enum
          CBLAS_DIAG DIAG, const int N, const double * AP, double * X,
          const int INCX)

 -- Function: void cblas_cgemv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_TRANSPOSE TRANSA, const int M, const int N, const void *
          ALPHA, const void * A, const int LDA, const void * X, const
          int INCX, const void * BETA, void * Y, const int INCY)

 -- Function: void cblas_cgbmv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_TRANSPOSE TRANSA, const int M, const int N, const int
          KL, const int KU, const void * ALPHA, const void * A, const
          int LDA, const void * X, const int INCX, const void * BETA,
          void * Y, const int INCY)

 -- Function: void cblas_ctrmv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const enum CBLAS_TRANSPOSE TRANSA, const enum
          CBLAS_DIAG DIAG, const int N, const void * A, const int LDA,
          void * X, const int INCX)

 -- Function: void cblas_ctbmv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const enum CBLAS_TRANSPOSE TRANSA, const enum
          CBLAS_DIAG DIAG, const int N, const int K, const void * A,
          const int LDA, void * X, const int INCX)

 -- Function: void cblas_ctpmv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const enum CBLAS_TRANSPOSE TRANSA, const enum
          CBLAS_DIAG DIAG, const int N, const void * AP, void * X, const
          int INCX)

 -- Function: void cblas_ctrsv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const enum CBLAS_TRANSPOSE TRANSA, const enum
          CBLAS_DIAG DIAG, const int N, const void * A, const int LDA,
          void * X, const int INCX)

 -- Function: void cblas_ctbsv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const enum CBLAS_TRANSPOSE TRANSA, const enum
          CBLAS_DIAG DIAG, const int N, const int K, const void * A,
          const int LDA, void * X, const int INCX)

 -- Function: void cblas_ctpsv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const enum CBLAS_TRANSPOSE TRANSA, const enum
          CBLAS_DIAG DIAG, const int N, const void * AP, void * X, const
          int INCX)

 -- Function: void cblas_zgemv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_TRANSPOSE TRANSA, const int M, const int N, const void *
          ALPHA, const void * A, const int LDA, const void * X, const
          int INCX, const void * BETA, void * Y, const int INCY)

 -- Function: void cblas_zgbmv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_TRANSPOSE TRANSA, const int M, const int N, const int
          KL, const int KU, const void * ALPHA, const void * A, const
          int LDA, const void * X, const int INCX, const void * BETA,
          void * Y, const int INCY)

 -- Function: void cblas_ztrmv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const enum CBLAS_TRANSPOSE TRANSA, const enum
          CBLAS_DIAG DIAG, const int N, const void * A, const int LDA,
          void * X, const int INCX)

 -- Function: void cblas_ztbmv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const enum CBLAS_TRANSPOSE TRANSA, const enum
          CBLAS_DIAG DIAG, const int N, const int K, const void * A,
          const int LDA, void * X, const int INCX)

 -- Function: void cblas_ztpmv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const enum CBLAS_TRANSPOSE TRANSA, const enum
          CBLAS_DIAG DIAG, const int N, const void * AP, void * X, const
          int INCX)

 -- Function: void cblas_ztrsv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const enum CBLAS_TRANSPOSE TRANSA, const enum
          CBLAS_DIAG DIAG, const int N, const void * A, const int LDA,
          void * X, const int INCX)

 -- Function: void cblas_ztbsv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const enum CBLAS_TRANSPOSE TRANSA, const enum
          CBLAS_DIAG DIAG, const int N, const int K, const void * A,
          const int LDA, void * X, const int INCX)

 -- Function: void cblas_ztpsv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const enum CBLAS_TRANSPOSE TRANSA, const enum
          CBLAS_DIAG DIAG, const int N, const void * AP, void * X, const
          int INCX)

 -- Function: void cblas_ssymv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const int N, const float ALPHA, const float *
          A, const int LDA, const float * X, const int INCX, const float
          BETA, float * Y, const int INCY)

 -- Function: void cblas_ssbmv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const int N, const int K, const float ALPHA,
          const float * A, const int LDA, const float * X, const int
          INCX, const float BETA, float * Y, const int INCY)

 -- Function: void cblas_sspmv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const int N, const float ALPHA, const float *
          AP, const float * X, const int INCX, const float BETA, float *
          Y, const int INCY)

 -- Function: void cblas_sger (const enum CBLAS_ORDER ORDER, const int
          M, const int N, const float ALPHA, const float * X, const int
          INCX, const float * Y, const int INCY, float * A, const int
          LDA)

 -- Function: void cblas_ssyr (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const int N, const float ALPHA, const float *
          X, const int INCX, float * A, const int LDA)

 -- Function: void cblas_sspr (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const int N, const float ALPHA, const float *
          X, const int INCX, float * AP)

 -- Function: void cblas_ssyr2 (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const int N, const float ALPHA, const float *
          X, const int INCX, const float * Y, const int INCY, float * A,
          const int LDA)

 -- Function: void cblas_sspr2 (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const int N, const float ALPHA, const float *
          X, const int INCX, const float * Y, const int INCY, float * A)

 -- Function: void cblas_dsymv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const int N, const double ALPHA, const double
          * A, const int LDA, const double * X, const int INCX, const
          double BETA, double * Y, const int INCY)

 -- Function: void cblas_dsbmv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const int N, const int K, const double ALPHA,
          const double * A, const int LDA, const double * X, const int
          INCX, const double BETA, double * Y, const int INCY)

 -- Function: void cblas_dspmv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const int N, const double ALPHA, const double
          * AP, const double * X, const int INCX, const double BETA,
          double * Y, const int INCY)

 -- Function: void cblas_dger (const enum CBLAS_ORDER ORDER, const int
          M, const int N, const double ALPHA, const double * X, const
          int INCX, const double * Y, const int INCY, double * A, const
          int LDA)

 -- Function: void cblas_dsyr (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const int N, const double ALPHA, const double
          * X, const int INCX, double * A, const int LDA)

 -- Function: void cblas_dspr (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const int N, const double ALPHA, const double
          * X, const int INCX, double * AP)

 -- Function: void cblas_dsyr2 (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const int N, const double ALPHA, const double
          * X, const int INCX, const double * Y, const int INCY, double
          * A, const int LDA)

 -- Function: void cblas_dspr2 (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const int N, const double ALPHA, const double
          * X, const int INCX, const double * Y, const int INCY, double
          * A)

 -- Function: void cblas_chemv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const int N, const void * ALPHA, const void *
          A, const int LDA, const void * X, const int INCX, const void *
          BETA, void * Y, const int INCY)

 -- Function: void cblas_chbmv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const int N, const int K, const void * ALPHA,
          const void * A, const int LDA, const void * X, const int INCX,
          const void * BETA, void * Y, const int INCY)

 -- Function: void cblas_chpmv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const int N, const void * ALPHA, const void *
          AP, const void * X, const int INCX, const void * BETA, void *
          Y, const int INCY)

 -- Function: void cblas_cgeru (const enum CBLAS_ORDER ORDER, const int
          M, const int N, const void * ALPHA, const void * X, const int
          INCX, const void * Y, const int INCY, void * A, const int LDA)

 -- Function: void cblas_cgerc (const enum CBLAS_ORDER ORDER, const int
          M, const int N, const void * ALPHA, const void * X, const int
          INCX, const void * Y, const int INCY, void * A, const int LDA)

 -- Function: void cblas_cher (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const int N, const float ALPHA, const void *
          X, const int INCX, void * A, const int LDA)

 -- Function: void cblas_chpr (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const int N, const float ALPHA, const void *
          X, const int INCX, void * A)

 -- Function: void cblas_cher2 (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const int N, const void * ALPHA, const void *
          X, const int INCX, const void * Y, const int INCY, void * A,
          const int LDA)

 -- Function: void cblas_chpr2 (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const int N, const void * ALPHA, const void *
          X, const int INCX, const void * Y, const int INCY, void * AP)

 -- Function: void cblas_zhemv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const int N, const void * ALPHA, const void *
          A, const int LDA, const void * X, const int INCX, const void *
          BETA, void * Y, const int INCY)

 -- Function: void cblas_zhbmv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const int N, const int K, const void * ALPHA,
          const void * A, const int LDA, const void * X, const int INCX,
          const void * BETA, void * Y, const int INCY)

 -- Function: void cblas_zhpmv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const int N, const void * ALPHA, const void *
          AP, const void * X, const int INCX, const void * BETA, void *
          Y, const int INCY)

 -- Function: void cblas_zgeru (const enum CBLAS_ORDER ORDER, const int
          M, const int N, const void * ALPHA, const void * X, const int
          INCX, const void * Y, const int INCY, void * A, const int LDA)

 -- Function: void cblas_zgerc (const enum CBLAS_ORDER ORDER, const int
          M, const int N, const void * ALPHA, const void * X, const int
          INCX, const void * Y, const int INCY, void * A, const int LDA)

 -- Function: void cblas_zher (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const int N, const double ALPHA, const void *
          X, const int INCX, void * A, const int LDA)

 -- Function: void cblas_zhpr (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const int N, const double ALPHA, const void *
          X, const int INCX, void * A)

 -- Function: void cblas_zher2 (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const int N, const void * ALPHA, const void *
          X, const int INCX, const void * Y, const int INCY, void * A,
          const int LDA)

 -- Function: void cblas_zhpr2 (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const int N, const void * ALPHA, const void *
          X, const int INCX, const void * Y, const int INCY, void * AP)


File: gsl-ref.info,  Node: Level 3 CBLAS Functions,  Next: GSL CBLAS Examples,  Prev: Level 2 CBLAS Functions,  Up: GSL CBLAS Library

D.3 Level 3
===========

 -- Function: void cblas_sgemm (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_TRANSPOSE TRANSA, const enum CBLAS_TRANSPOSE TRANSB,
          const int M, const int N, const int K, const float ALPHA,
          const float * A, const int LDA, const float * B, const int
          LDB, const float BETA, float * C, const int LDC)

 -- Function: void cblas_ssymm (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_SIDE SIDE, const enum CBLAS_UPLO UPLO, const int M,
          const int N, const float ALPHA, const float * A, const int
          LDA, const float * B, const int LDB, const float BETA, float *
          C, const int LDC)

 -- Function: void cblas_ssyrk (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const enum CBLAS_TRANSPOSE TRANS, const int
          N, const int K, const float ALPHA, const float * A, const int
          LDA, const float BETA, float * C, const int LDC)

 -- Function: void cblas_ssyr2k (const enum CBLAS_ORDER ORDER, const
          enum CBLAS_UPLO UPLO, const enum CBLAS_TRANSPOSE TRANS, const
          int N, const int K, const float ALPHA, const float * A, const
          int LDA, const float * B, const int LDB, const float BETA,
          float * C, const int LDC)

 -- Function: void cblas_strmm (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_SIDE SIDE, const enum CBLAS_UPLO UPLO, const enum
          CBLAS_TRANSPOSE TRANSA, const enum CBLAS_DIAG DIAG, const int
          M, const int N, const float ALPHA, const float * A, const int
          LDA, float * B, const int LDB)

 -- Function: void cblas_strsm (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_SIDE SIDE, const enum CBLAS_UPLO UPLO, const enum
          CBLAS_TRANSPOSE TRANSA, const enum CBLAS_DIAG DIAG, const int
          M, const int N, const float ALPHA, const float * A, const int
          LDA, float * B, const int LDB)

 -- Function: void cblas_dgemm (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_TRANSPOSE TRANSA, const enum CBLAS_TRANSPOSE TRANSB,
          const int M, const int N, const int K, const double ALPHA,
          const double * A, const int LDA, const double * B, const int
          LDB, const double BETA, double * C, const int LDC)

 -- Function: void cblas_dsymm (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_SIDE SIDE, const enum CBLAS_UPLO UPLO, const int M,
          const int N, const double ALPHA, const double * A, const int
          LDA, const double * B, const int LDB, const double BETA,
          double * C, const int LDC)

 -- Function: void cblas_dsyrk (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const enum CBLAS_TRANSPOSE TRANS, const int
          N, const int K, const double ALPHA, const double * A, const
          int LDA, const double BETA, double * C, const int LDC)

 -- Function: void cblas_dsyr2k (const enum CBLAS_ORDER ORDER, const
          enum CBLAS_UPLO UPLO, const enum CBLAS_TRANSPOSE TRANS, const
          int N, const int K, const double ALPHA, const double * A,
          const int LDA, const double * B, const int LDB, const double
          BETA, double * C, const int LDC)

 -- Function: void cblas_dtrmm (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_SIDE SIDE, const enum CBLAS_UPLO UPLO, const enum
          CBLAS_TRANSPOSE TRANSA, const enum CBLAS_DIAG DIAG, const int
          M, const int N, const double ALPHA, const double * A, const
          int LDA, double * B, const int LDB)

 -- Function: void cblas_dtrsm (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_SIDE SIDE, const enum CBLAS_UPLO UPLO, const enum
          CBLAS_TRANSPOSE TRANSA, const enum CBLAS_DIAG DIAG, const int
          M, const int N, const double ALPHA, const double * A, const
          int LDA, double * B, const int LDB)

 -- Function: void cblas_cgemm (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_TRANSPOSE TRANSA, const enum CBLAS_TRANSPOSE TRANSB,
          const int M, const int N, const int K, const void * ALPHA,
          const void * A, const int LDA, const void * B, const int LDB,
          const void * BETA, void * C, const int LDC)

 -- Function: void cblas_csymm (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_SIDE SIDE, const enum CBLAS_UPLO UPLO, const int M,
          const int N, const void * ALPHA, const void * A, const int
          LDA, const void * B, const int LDB, const void * BETA, void *
          C, const int LDC)

 -- Function: void cblas_csyrk (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const enum CBLAS_TRANSPOSE TRANS, const int
          N, const int K, const void * ALPHA, const void * A, const int
          LDA, const void * BETA, void * C, const int LDC)

 -- Function: void cblas_csyr2k (const enum CBLAS_ORDER ORDER, const
          enum CBLAS_UPLO UPLO, const enum CBLAS_TRANSPOSE TRANS, const
          int N, const int K, const void * ALPHA, const void * A, const
          int LDA, const void * B, const int LDB, const void * BETA,
          void * C, const int LDC)

 -- Function: void cblas_ctrmm (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_SIDE SIDE, const enum CBLAS_UPLO UPLO, const enum
          CBLAS_TRANSPOSE TRANSA, const enum CBLAS_DIAG DIAG, const int
          M, const int N, const void * ALPHA, const void * A, const int
          LDA, void * B, const int LDB)

 -- Function: void cblas_ctrsm (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_SIDE SIDE, const enum CBLAS_UPLO UPLO, const enum
          CBLAS_TRANSPOSE TRANSA, const enum CBLAS_DIAG DIAG, const int
          M, const int N, const void * ALPHA, const void * A, const int
          LDA, void * B, const int LDB)

 -- Function: void cblas_zgemm (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_TRANSPOSE TRANSA, const enum CBLAS_TRANSPOSE TRANSB,
          const int M, const int N, const int K, const void * ALPHA,
          const void * A, const int LDA, const void * B, const int LDB,
          const void * BETA, void * C, const int LDC)

 -- Function: void cblas_zsymm (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_SIDE SIDE, const enum CBLAS_UPLO UPLO, const int M,
          const int N, const void * ALPHA, const void * A, const int
          LDA, const void * B, const int LDB, const void * BETA, void *
          C, const int LDC)

 -- Function: void cblas_zsyrk (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const enum CBLAS_TRANSPOSE TRANS, const int
          N, const int K, const void * ALPHA, const void * A, const int
          LDA, const void * BETA, void * C, const int LDC)

 -- Function: void cblas_zsyr2k (const enum CBLAS_ORDER ORDER, const
          enum CBLAS_UPLO UPLO, const enum CBLAS_TRANSPOSE TRANS, const
          int N, const int K, const void * ALPHA, const void * A, const
          int LDA, const void * B, const int LDB, const void * BETA,
          void * C, const int LDC)

 -- Function: void cblas_ztrmm (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_SIDE SIDE, const enum CBLAS_UPLO UPLO, const enum
          CBLAS_TRANSPOSE TRANSA, const enum CBLAS_DIAG DIAG, const int
          M, const int N, const void * ALPHA, const void * A, const int
          LDA, void * B, const int LDB)

 -- Function: void cblas_ztrsm (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_SIDE SIDE, const enum CBLAS_UPLO UPLO, const enum
          CBLAS_TRANSPOSE TRANSA, const enum CBLAS_DIAG DIAG, const int
          M, const int N, const void * ALPHA, const void * A, const int
          LDA, void * B, const int LDB)

 -- Function: void cblas_chemm (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_SIDE SIDE, const enum CBLAS_UPLO UPLO, const int M,
          const int N, const void * ALPHA, const void * A, const int
          LDA, const void * B, const int LDB, const void * BETA, void *
          C, const int LDC)

 -- Function: void cblas_cherk (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const enum CBLAS_TRANSPOSE TRANS, const int
          N, const int K, const float ALPHA, const void * A, const int
          LDA, const float BETA, void * C, const int LDC)

 -- Function: void cblas_cher2k (const enum CBLAS_ORDER ORDER, const
          enum CBLAS_UPLO UPLO, const enum CBLAS_TRANSPOSE TRANS, const
          int N, const int K, const void * ALPHA, const void * A, const
          int LDA, const void * B, const int LDB, const float BETA, void
          * C, const int LDC)

 -- Function: void cblas_zhemm (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_SIDE SIDE, const enum CBLAS_UPLO UPLO, const int M,
          const int N, const void * ALPHA, const void * A, const int
          LDA, const void * B, const int LDB, const void * BETA, void *
          C, const int LDC)

 -- Function: void cblas_zherk (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const enum CBLAS_TRANSPOSE TRANS, const int
          N, const int K, const double ALPHA, const void * A, const int
          LDA, const double BETA, void * C, const int LDC)

 -- Function: void cblas_zher2k (const enum CBLAS_ORDER ORDER, const
          enum CBLAS_UPLO UPLO, const enum CBLAS_TRANSPOSE TRANS, const
          int N, const int K, const void * ALPHA, const void * A, const
          int LDA, const void * B, const int LDB, const double BETA,
          void * C, const int LDC)

 -- Function: void cblas_xerbla (int P, const char * ROUT, const char *
          FORM, ...)


File: gsl-ref.info,  Node: GSL CBLAS Examples,  Prev: Level 3 CBLAS Functions,  Up: GSL CBLAS Library

D.4 Examples
============

The following program computes the product of two matrices using the
Level-3 BLAS function SGEMM,

     [ 0.11 0.12 0.13 ]  [ 1011 1012 ]     [ 367.76 368.12 ]
     [ 0.21 0.22 0.23 ]  [ 1021 1022 ]  =  [ 674.06 674.72 ]
                         [ 1031 1032 ]

The matrices are stored in row major order but could be stored in column
major order if the first argument of the call to 'cblas_sgemm' was
changed to 'CblasColMajor'.

     #include <stdio.h>
     #include <gsl/gsl_cblas.h>

     int
     main (void)
     {
       int lda = 3;

       float A[] = { 0.11, 0.12, 0.13,
                     0.21, 0.22, 0.23 };

       int ldb = 2;

       float B[] = { 1011, 1012,
                     1021, 1022,
                     1031, 1032 };

       int ldc = 2;

       float C[] = { 0.00, 0.00,
                     0.00, 0.00 };

       /* Compute C = A B */

       cblas_sgemm (CblasRowMajor,
                    CblasNoTrans, CblasNoTrans, 2, 2, 3,
                    1.0, A, lda, B, ldb, 0.0, C, ldc);

       printf ("[ %g, %g\n", C[0], C[1]);
       printf ("  %g, %g ]\n", C[2], C[3]);

       return 0;
     }

To compile the program use the following command line,

     $ gcc -Wall demo.c -lgslcblas

There is no need to link with the main library '-lgsl' in this case as
the CBLAS library is an independent unit.  Here is the output from the
program,

     $ ./a.out
     [ 367.76, 368.12
       674.06, 674.72 ]


File: gsl-ref.info,  Node: GNU General Public License,  Next: GNU Free Documentation License,  Prev: GSL CBLAS Library,  Up: Top

GNU General Public License
**************************

                        Version 3, 29 June 2007

     Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>

     Everyone is permitted to copy and distribute verbatim copies of this
     license document, but changing it is not allowed.

Preamble
========

The GNU General Public License is a free, copyleft license for software
and other kinds of works.

   The licenses for most software and other practical works are designed
to take away your freedom to share and change the works.  By contrast,
the GNU General Public License is intended to guarantee your freedom to
share and change all versions of a program-to make sure it remains free
software for all its users.  We, the Free Software Foundation, use the
GNU General Public License for most of our software; it applies also to
any other work released this way by its authors.  You can apply it to
your programs, too.

   When we speak of free software, we are referring to freedom, not
price.  Our General Public Licenses are designed to make sure that you
have the freedom to distribute copies of free software (and charge for
them if you wish), that you receive source code or can get it if you
want it, that you can change the software or use pieces of it in new
free programs, and that you know you can do these things.

   To protect your rights, we need to prevent others from denying you
these rights or asking you to surrender the rights.  Therefore, you have
certain responsibilities if you distribute copies of the software, or if
you modify it: responsibilities to respect the freedom of others.

   For example, if you distribute copies of such a program, whether
gratis or for a fee, you must pass on to the recipients the same
freedoms that you received.  You must make sure that they, too, receive
or can get the source code.  And you must show them these terms so they
know their rights.

   Developers that use the GNU GPL protect your rights with two steps:
(1) assert copyright on the software, and (2) offer you this License
giving you legal permission to copy, distribute and/or modify it.

   For the developers' and authors' protection, the GPL clearly explains
that there is no warranty for this free software.  For both users' and
authors' sake, the GPL requires that modified versions be marked as
changed, so that their problems will not be attributed erroneously to
authors of previous versions.

   Some devices are designed to deny users access to install or run
modified versions of the software inside them, although the manufacturer
can do so.  This is fundamentally incompatible with the aim of
protecting users' freedom to change the software.  The systematic
pattern of such abuse occurs in the area of products for individuals to
use, which is precisely where it is most unacceptable.  Therefore, we
have designed this version of the GPL to prohibit the practice for those
products.  If such problems arise substantially in other domains, we
stand ready to extend this provision to those domains in future versions
of the GPL, as needed to protect the freedom of users.

   Finally, every program is threatened constantly by software patents.
States should not allow patents to restrict development and use of
software on general-purpose computers, but in those that do, we wish to
avoid the special danger that patents applied to a free program could
make it effectively proprietary.  To prevent this, the GPL assures that
patents cannot be used to render the program non-free.

   The precise terms and conditions for copying, distribution and
modification follow.

TERMS AND CONDITIONS
====================

  0. Definitions.

     "This License" refers to version 3 of the GNU General Public
     License.

     "Copyright" also means copyright-like laws that apply to other
     kinds of works, such as semiconductor masks.

     "The Program" refers to any copyrightable work licensed under this
     License.  Each licensee is addressed as "you".  "Licensees" and
     "recipients" may be individuals or organizations.

     To "modify" a work means to copy from or adapt all or part of the
     work in a fashion requiring copyright permission, other than the
     making of an exact copy.  The resulting work is called a "modified
     version" of the earlier work or a work "based on" the earlier work.

     A "covered work" means either the unmodified Program or a work
     based on the Program.

     To "propagate" a work means to do anything with it that, without
     permission, would make you directly or secondarily liable for
     infringement under applicable copyright law, except executing it on
     a computer or modifying a private copy.  Propagation includes
     copying, distribution (with or without modification), making
     available to the public, and in some countries other activities as
     well.

     To "convey" a work means any kind of propagation that enables other
     parties to make or receive copies.  Mere interaction with a user
     through a computer network, with no transfer of a copy, is not
     conveying.

     An interactive user interface displays "Appropriate Legal Notices"
     to the extent that it includes a convenient and prominently visible
     feature that (1) displays an appropriate copyright notice, and (2)
     tells the user that there is no warranty for the work (except to
     the extent that warranties are provided), that licensees may convey
     the work under this License, and how to view a copy of this
     License.  If the interface presents a list of user commands or
     options, such as a menu, a prominent item in the list meets this
     criterion.

  1. Source Code.

     The "source code" for a work means the preferred form of the work
     for making modifications to it.  "Object code" means any non-source
     form of a work.

     A "Standard Interface" means an interface that either is an
     official standard defined by a recognized standards body, or, in
     the case of interfaces specified for a particular programming
     language, one that is widely used among developers working in that
     language.

     The "System Libraries" of an executable work include anything,
     other than the work as a whole, that (a) is included in the normal
     form of packaging a Major Component, but which is not part of that
     Major Component, and (b) serves only to enable use of the work with
     that Major Component, or to implement a Standard Interface for
     which an implementation is available to the public in source code
     form.  A "Major Component", in this context, means a major
     essential component (kernel, window system, and so on) of the
     specific operating system (if any) on which the executable work
     runs, or a compiler used to produce the work, or an object code
     interpreter used to run it.

     The "Corresponding Source" for a work in object code form means all
     the source code needed to generate, install, and (for an executable
     work) run the object code and to modify the work, including scripts
     to control those activities.  However, it does not include the
     work's System Libraries, or general-purpose tools or generally
     available free programs which are used unmodified in performing
     those activities but which are not part of the work.  For example,
     Corresponding Source includes interface definition files associated
     with source files for the work, and the source code for shared
     libraries and dynamically linked subprograms that the work is
     specifically designed to require, such as by intimate data
     communication or control flow between those subprograms and other
     parts of the work.

     The Corresponding Source need not include anything that users can
     regenerate automatically from other parts of the Corresponding
     Source.

     The Corresponding Source for a work in source code form is that
     same work.

  2. Basic Permissions.

     All rights granted under this License are granted for the term of
     copyright on the Program, and are irrevocable provided the stated
     conditions are met.  This License explicitly affirms your unlimited
     permission to run the unmodified Program.  The output from running
     a covered work is covered by this License only if the output, given
     its content, constitutes a covered work.  This License acknowledges
     your rights of fair use or other equivalent, as provided by
     copyright law.

     You may make, run and propagate covered works that you do not
     convey, without conditions so long as your license otherwise
     remains in force.  You may convey covered works to others for the
     sole purpose of having them make modifications exclusively for you,
     or provide you with facilities for running those works, provided
     that you comply with the terms of this License in conveying all
     material for which you do not control copyright.  Those thus making
     or running the covered works for you must do so exclusively on your
     behalf, under your direction and control, on terms that prohibit
     them from making any copies of your copyrighted material outside
     their relationship with you.

     Conveying under any other circumstances is permitted solely under
     the conditions stated below.  Sublicensing is not allowed; section
     10 makes it unnecessary.

  3. Protecting Users' Legal Rights From Anti-Circumvention Law.

     No covered work shall be deemed part of an effective technological
     measure under any applicable law fulfilling obligations under
     article 11 of the WIPO copyright treaty adopted on 20 December
     1996, or similar laws prohibiting or restricting circumvention of
     such measures.

     When you convey a covered work, you waive any legal power to forbid
     circumvention of technological measures to the extent such
     circumvention is effected by exercising rights under this License
     with respect to the covered work, and you disclaim any intention to
     limit operation or modification of the work as a means of
     enforcing, against the work's users, your or third parties' legal
     rights to forbid circumvention of technological measures.

  4. Conveying Verbatim Copies.

     You may convey verbatim copies of the Program's source code as you
     receive it, in any medium, provided that you conspicuously and
     appropriately publish on each copy an appropriate copyright notice;
     keep intact all notices stating that this License and any
     non-permissive terms added in accord with section 7 apply to the
     code; keep intact all notices of the absence of any warranty; and
     give all recipients a copy of this License along with the Program.

     You may charge any price or no price for each copy that you convey,
     and you may offer support or warranty protection for a fee.

  5. Conveying Modified Source Versions.

     You may convey a work based on the Program, or the modifications to
     produce it from the Program, in the form of source code under the
     terms of section 4, provided that you also meet all of these
     conditions:

       a. The work must carry prominent notices stating that you
          modified it, and giving a relevant date.

       b. The work must carry prominent notices stating that it is
          released under this License and any conditions added under
          section 7.  This requirement modifies the requirement in
          section 4 to "keep intact all notices".

       c. You must license the entire work, as a whole, under this
          License to anyone who comes into possession of a copy.  This
          License will therefore apply, along with any applicable
          section 7 additional terms, to the whole of the work, and all
          its parts, regardless of how they are packaged.  This License
          gives no permission to license the work in any other way, but
          it does not invalidate such permission if you have separately
          received it.

       d. If the work has interactive user interfaces, each must display
          Appropriate Legal Notices; however, if the Program has
          interactive interfaces that do not display Appropriate Legal
          Notices, your work need not make them do so.

     A compilation of a covered work with other separate and independent
     works, which are not by their nature extensions of the covered
     work, and which are not combined with it such as to form a larger
     program, in or on a volume of a storage or distribution medium, is
     called an "aggregate" if the compilation and its resulting
     copyright are not used to limit the access or legal rights of the
     compilation's users beyond what the individual works permit.
     Inclusion of a covered work in an aggregate does not cause this
     License to apply to the other parts of the aggregate.

  6. Conveying Non-Source Forms.

     You may convey a covered work in object code form under the terms
     of sections 4 and 5, provided that you also convey the
     machine-readable Corresponding Source under the terms of this
     License, in one of these ways:

       a. Convey the object code in, or embodied in, a physical product
          (including a physical distribution medium), accompanied by the
          Corresponding Source fixed on a durable physical medium
          customarily used for software interchange.

       b. Convey the object code in, or embodied in, a physical product
          (including a physical distribution medium), accompanied by a
          written offer, valid for at least three years and valid for as
          long as you offer spare parts or customer support for that
          product model, to give anyone who possesses the object code
          either (1) a copy of the Corresponding Source for all the
          software in the product that is covered by this License, on a
          durable physical medium customarily used for software
          interchange, for a price no more than your reasonable cost of
          physically performing this conveying of source, or (2) access
          to copy the Corresponding Source from a network server at no
          charge.

       c. Convey individual copies of the object code with a copy of the
          written offer to provide the Corresponding Source.  This
          alternative is allowed only occasionally and noncommercially,
          and only if you received the object code with such an offer,
          in accord with subsection 6b.

       d. Convey the object code by offering access from a designated
          place (gratis or for a charge), and offer equivalent access to
          the Corresponding Source in the same way through the same
          place at no further charge.  You need not require recipients
          to copy the Corresponding Source along with the object code.
          If the place to copy the object code is a network server, the
          Corresponding Source may be on a different server (operated by
          you or a third party) that supports equivalent copying
          facilities, provided you maintain clear directions next to the
          object code saying where to find the Corresponding Source.
          Regardless of what server hosts the Corresponding Source, you
          remain obligated to ensure that it is available for as long as
          needed to satisfy these requirements.

       e. Convey the object code using peer-to-peer transmission,
          provided you inform other peers where the object code and
          Corresponding Source of the work are being offered to the
          general public at no charge under subsection 6d.

     A separable portion of the object code, whose source code is
     excluded from the Corresponding Source as a System Library, need
     not be included in conveying the object code work.

     A "User Product" is either (1) a "consumer product", which means
     any tangible personal property which is normally used for personal,
     family, or household purposes, or (2) anything designed or sold for
     incorporation into a dwelling.  In determining whether a product is
     a consumer product, doubtful cases shall be resolved in favor of
     coverage.  For a particular product received by a particular user,
     "normally used" refers to a typical or common use of that class of
     product, regardless of the status of the particular user or of the
     way in which the particular user actually uses, or expects or is
     expected to use, the product.  A product is a consumer product
     regardless of whether the product has substantial commercial,
     industrial or non-consumer uses, unless such uses represent the
     only significant mode of use of the product.

     "Installation Information" for a User Product means any methods,
     procedures, authorization keys, or other information required to
     install and execute modified versions of a covered work in that
     User Product from a modified version of its Corresponding Source.
     The information must suffice to ensure that the continued
     functioning of the modified object code is in no case prevented or
     interfered with solely because modification has been made.

     If you convey an object code work under this section in, or with,
     or specifically for use in, a User Product, and the conveying
     occurs as part of a transaction in which the right of possession
     and use of the User Product is transferred to the recipient in
     perpetuity or for a fixed term (regardless of how the transaction
     is characterized), the Corresponding Source conveyed under this
     section must be accompanied by the Installation Information.  But
     this requirement does not apply if neither you nor any third party
     retains the ability to install modified object code on the User
     Product (for example, the work has been installed in ROM).

     The requirement to provide Installation Information does not
     include a requirement to continue to provide support service,
     warranty, or updates for a work that has been modified or installed
     by the recipient, or for the User Product in which it has been
     modified or installed.  Access to a network may be denied when the
     modification itself materially and adversely affects the operation
     of the network or violates the rules and protocols for
     communication across the network.

     Corresponding Source conveyed, and Installation Information
     provided, in accord with this section must be in a format that is
     publicly documented (and with an implementation available to the
     public in source code form), and must require no special password
     or key for unpacking, reading or copying.

  7. Additional Terms.

     "Additional permissions" are terms that supplement the terms of
     this License by making exceptions from one or more of its
     conditions.  Additional permissions that are applicable to the
     entire Program shall be treated as though they were included in
     this License, to the extent that they are valid under applicable
     law.  If additional permissions apply only to part of the Program,
     that part may be used separately under those permissions, but the
     entire Program remains governed by this License without regard to
     the additional permissions.

     When you convey a copy of a covered work, you may at your option
     remove any additional permissions from that copy, or from any part
     of it.  (Additional permissions may be written to require their own
     removal in certain cases when you modify the work.)  You may place
     additional permissions on material, added by you to a covered work,
     for which you have or can give appropriate copyright permission.

     Notwithstanding any other provision of this License, for material
     you add to a covered work, you may (if authorized by the copyright
     holders of that material) supplement the terms of this License with
     terms:

       a. Disclaiming warranty or limiting liability differently from
          the terms of sections 15 and 16 of this License; or

       b. Requiring preservation of specified reasonable legal notices
          or author attributions in that material or in the Appropriate
          Legal Notices displayed by works containing it; or

       c. Prohibiting misrepresentation of the origin of that material,
          or requiring that modified versions of such material be marked
          in reasonable ways as different from the original version; or

       d. Limiting the use for publicity purposes of names of licensors
          or authors of the material; or

       e. Declining to grant rights under trademark law for use of some
          trade names, trademarks, or service marks; or

       f. Requiring indemnification of licensors and authors of that
          material by anyone who conveys the material (or modified
          versions of it) with contractual assumptions of liability to
          the recipient, for any liability that these contractual
          assumptions directly impose on those licensors and authors.

     All other non-permissive additional terms are considered "further
     restrictions" within the meaning of section 10.  If the Program as
     you received it, or any part of it, contains a notice stating that
     it is governed by this License along with a term that is a further
     restriction, you may remove that term.  If a license document
     contains a further restriction but permits relicensing or conveying
     under this License, you may add to a covered work material governed
     by the terms of that license document, provided that the further
     restriction does not survive such relicensing or conveying.

     If you add terms to a covered work in accord with this section, you
     must place, in the relevant source files, a statement of the
     additional terms that apply to those files, or a notice indicating
     where to find the applicable terms.

     Additional terms, permissive or non-permissive, may be stated in
     the form of a separately written license, or stated as exceptions;
     the above requirements apply either way.

  8. Termination.

     You may not propagate or modify a covered work except as expressly
     provided under this License.  Any attempt otherwise to propagate or
     modify it is void, and will automatically terminate your rights
     under this License (including any patent licenses granted under the
     third paragraph of section 11).

     However, if you cease all violation of this License, then your
     license from a particular copyright holder is reinstated (a)
     provisionally, unless and until the copyright holder explicitly and
     finally terminates your license, and (b) permanently, if the
     copyright holder fails to notify you of the violation by some
     reasonable means prior to 60 days after the cessation.

     Moreover, your license from a particular copyright holder is
     reinstated permanently if the copyright holder notifies you of the
     violation by some reasonable means, this is the first time you have
     received notice of violation of this License (for any work) from
     that copyright holder, and you cure the violation prior to 30 days
     after your receipt of the notice.

     Termination of your rights under this section does not terminate
     the licenses of parties who have received copies or rights from you
     under this License.  If your rights have been terminated and not
     permanently reinstated, you do not qualify to receive new licenses
     for the same material under section 10.

  9. Acceptance Not Required for Having Copies.

     You are not required to accept this License in order to receive or
     run a copy of the Program.  Ancillary propagation of a covered work
     occurring solely as a consequence of using peer-to-peer
     transmission to receive a copy likewise does not require
     acceptance.  However, nothing other than this License grants you
     permission to propagate or modify any covered work.  These actions
     infringe copyright if you do not accept this License.  Therefore,
     by modifying or propagating a covered work, you indicate your
     acceptance of this License to do so.

  10. Automatic Licensing of Downstream Recipients.

     Each time you convey a covered work, the recipient automatically
     receives a license from the original licensors, to run, modify and
     propagate that work, subject to this License.  You are not
     responsible for enforcing compliance by third parties with this
     License.

     An "entity transaction" is a transaction transferring control of an
     organization, or substantially all assets of one, or subdividing an
     organization, or merging organizations.  If propagation of a
     covered work results from an entity transaction, each party to that
     transaction who receives a copy of the work also receives whatever
     licenses to the work the party's predecessor in interest had or
     could give under the previous paragraph, plus a right to possession
     of the Corresponding Source of the work from the predecessor in
     interest, if the predecessor has it or can get it with reasonable
     efforts.

     You may not impose any further restrictions on the exercise of the
     rights granted or affirmed under this License.  For example, you
     may not impose a license fee, royalty, or other charge for exercise
     of rights granted under this License, and you may not initiate
     litigation (including a cross-claim or counterclaim in a lawsuit)
     alleging that any patent claim is infringed by making, using,
     selling, offering for sale, or importing the Program or any portion
     of it.

  11. Patents.

     A "contributor" is a copyright holder who authorizes use under this
     License of the Program or a work on which the Program is based.
     The work thus licensed is called the contributor's "contributor
     version".

     A contributor's "essential patent claims" are all patent claims
     owned or controlled by the contributor, whether already acquired or
     hereafter acquired, that would be infringed by some manner,
     permitted by this License, of making, using, or selling its
     contributor version, but do not include claims that would be
     infringed only as a consequence of further modification of the
     contributor version.  For purposes of this definition, "control"
     includes the right to grant patent sublicenses in a manner
     consistent with the requirements of this License.

     Each contributor grants you a non-exclusive, worldwide,
     royalty-free patent license under the contributor's essential
     patent claims, to make, use, sell, offer for sale, import and
     otherwise run, modify and propagate the contents of its contributor
     version.

     In the following three paragraphs, a "patent license" is any
     express agreement or commitment, however denominated, not to
     enforce a patent (such as an express permission to practice a
     patent or covenant not to sue for patent infringement).  To "grant"
     such a patent license to a party means to make such an agreement or
     commitment not to enforce a patent against the party.

     If you convey a covered work, knowingly relying on a patent
     license, and the Corresponding Source of the work is not available
     for anyone to copy, free of charge and under the terms of this
     License, through a publicly available network server or other
     readily accessible means, then you must either (1) cause the
     Corresponding Source to be so available, or (2) arrange to deprive
     yourself of the benefit of the patent license for this particular
     work, or (3) arrange, in a manner consistent with the requirements
     of this License, to extend the patent license to downstream
     recipients.  "Knowingly relying" means you have actual knowledge
     that, but for the patent license, your conveying the covered work
     in a country, or your recipient's use of the covered work in a
     country, would infringe one or more identifiable patents in that
     country that you have reason to believe are valid.

     If, pursuant to or in connection with a single transaction or
     arrangement, you convey, or propagate by procuring conveyance of, a
     covered work, and grant a patent license to some of the parties
     receiving the covered work authorizing them to use, propagate,
     modify or convey a specific copy of the covered work, then the
     patent license you grant is automatically extended to all
     recipients of the covered work and works based on it.

     A patent license is "discriminatory" if it does not include within
     the scope of its coverage, prohibits the exercise of, or is
     conditioned on the non-exercise of one or more of the rights that
     are specifically granted under this License.  You may not convey a
     covered work if you are a party to an arrangement with a third
     party that is in the business of distributing software, under which
     you make payment to the third party based on the extent of your
     activity of conveying the work, and under which the third party
     grants, to any of the parties who would receive the covered work
     from you, a discriminatory patent license (a) in connection with
     copies of the covered work conveyed by you (or copies made from
     those copies), or (b) primarily for and in connection with specific
     products or compilations that contain the covered work, unless you
     entered into that arrangement, or that patent license was granted,
     prior to 28 March 2007.

     Nothing in this License shall be construed as excluding or limiting
     any implied license or other defenses to infringement that may
     otherwise be available to you under applicable patent law.

  12. No Surrender of Others' Freedom.

     If conditions are imposed on you (whether by court order, agreement
     or otherwise) that contradict the conditions of this License, they
     do not excuse you from the conditions of this License.  If you
     cannot convey a covered work so as to satisfy simultaneously your
     obligations under this License and any other pertinent obligations,
     then as a consequence you may not convey it at all.  For example,
     if you agree to terms that obligate you to collect a royalty for
     further conveying from those to whom you convey the Program, the
     only way you could satisfy both those terms and this License would
     be to refrain entirely from conveying the Program.

  13. Use with the GNU Affero General Public License.

     Notwithstanding any other provision of this License, you have
     permission to link or combine any covered work with a work licensed
     under version 3 of the GNU Affero General Public License into a
     single combined work, and to convey the resulting work.  The terms
     of this License will continue to apply to the part which is the
     covered work, but the special requirements of the GNU Affero
     General Public License, section 13, concerning interaction through
     a network will apply to the combination as such.

  14. Revised Versions of this License.

     The Free Software Foundation may publish revised and/or new
     versions of the GNU General Public License from time to time.  Such
     new versions will be similar in spirit to the present version, but
     may differ in detail to address new problems or concerns.

     Each version is given a distinguishing version number.  If the
     Program specifies that a certain numbered version of the GNU
     General Public License "or any later version" applies to it, you
     have the option of following the terms and conditions either of
     that numbered version or of any later version published by the Free
     Software Foundation.  If the Program does not specify a version
     number of the GNU General Public License, you may choose any
     version ever published by the Free Software Foundation.

     If the Program specifies that a proxy can decide which future
     versions of the GNU General Public License can be used, that
     proxy's public statement of acceptance of a version permanently
     authorizes you to choose that version for the Program.

     Later license versions may give you additional or different
     permissions.  However, no additional obligations are imposed on any
     author or copyright holder as a result of your choosing to follow a
     later version.

  15. Disclaimer of Warranty.

     THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY
     APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE
     COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS"
     WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED,
     INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
     MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE
     RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.
     SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL
     NECESSARY SERVICING, REPAIR OR CORRECTION.

  16. Limitation of Liability.

     IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN
     WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES
     AND/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR
     DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR
     CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE
     THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA
     BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD
     PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER
     PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF
     THE POSSIBILITY OF SUCH DAMAGES.

  17. Interpretation of Sections 15 and 16.

     If the disclaimer of warranty and limitation of liability provided
     above cannot be given local legal effect according to their terms,
     reviewing courts shall apply local law that most closely
     approximates an absolute waiver of all civil liability in
     connection with the Program, unless a warranty or assumption of
     liability accompanies a copy of the Program in return for a fee.

END OF TERMS AND CONDITIONS
===========================

How to Apply These Terms to Your New Programs
=============================================

If you develop a new program, and you want it to be of the greatest
possible use to the public, the best way to achieve this is to make it
free software which everyone can redistribute and change under these
terms.

   To do so, attach the following notices to the program.  It is safest
to attach them to the start of each source file to most effectively
state the exclusion of warranty; and each file should have at least the
"copyright" line and a pointer to where the full notice is found.

     ONE LINE TO GIVE THE PROGRAM'S NAME AND A BRIEF IDEA 
     OF WHAT IT DOES.
     Copyright (C) YEAR NAME OF AUTHOR

     This program is free software: you can redistribute it and/or modify
     it under the terms of the GNU General Public License as published by
     the Free Software Foundation, either version 3 of the License, or (at
     your option) any later version.

     This program is distributed in the hope that it will be useful, but
     WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
     General Public License for more details.

     You should have received a copy of the GNU General Public License
     along with this program.  If not, see <http://www.gnu.org/licenses/>.

   Also add information on how to contact you by electronic and paper
mail.

   If the program does terminal interaction, make it output a short
notice like this when it starts in an interactive mode:

     PROGRAM Copyright (C) YEAR NAME OF AUTHOR
     This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'.
     This is free software, and you are welcome to redistribute it
     under certain conditions; type 'show c' for details.

   The hypothetical commands 'show w' and 'show c' should show the
appropriate parts of the General Public License.  Of course, your
program's commands might be different; for a GUI interface, you would
use an "about box".

   You should also get your employer (if you work as a programmer) or
school, if any, to sign a "copyright disclaimer" for the program, if
necessary.  For more information on this, and how to apply and follow
the GNU GPL, see <http://www.gnu.org/licenses/>.

   The GNU General Public License does not permit incorporating your
program into proprietary programs.  If your program is a subroutine
library, you may consider it more useful to permit linking proprietary
applications with the library.  If this is what you want to do, use the
GNU Lesser General Public License instead of this License.  But first,
please read <http://www.gnu.org/philosophy/why-not-lgpl.html>.


File: gsl-ref.info,  Node: GNU Free Documentation License,  Next: Function Index,  Prev: GNU General Public License,  Up: Top

GNU Free Documentation License
******************************

                     Version 1.3, 3 November 2008

     Copyright (C) 2000, 2001, 2002, 2007, 2008 Free Software Foundation, Inc.
     <http://fsf.org/>

     Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is
     not allowed.

  0. PREAMBLE

     The purpose of this License is to make a manual, textbook, or other
     functional and useful document "free" in the sense of freedom: to
     assure everyone the effective freedom to copy and redistribute it,
     with or without modifying it, either commercially or
     noncommercially.  Secondarily, this License preserves for the
     author and publisher a way to get credit for their work, while not
     being considered responsible for modifications made by others.

     This License is a kind of "copyleft", which means that derivative
     works of the document must themselves be free in the same sense.
     It complements the GNU General Public License, which is a copyleft
     license designed for free software.

     We have designed this License in order to use it for manuals for
     free software, because free software needs free documentation: a
     free program should come with manuals providing the same freedoms
     that the software does.  But this License is not limited to
     software manuals; it can be used for any textual work, regardless
     of subject matter or whether it is published as a printed book.  We
     recommend this License principally for works whose purpose is
     instruction or reference.

  1. APPLICABILITY AND DEFINITIONS

     This License applies to any manual or other work, in any medium,
     that contains a notice placed by the copyright holder saying it can
     be distributed under the terms of this License.  Such a notice
     grants a world-wide, royalty-free license, unlimited in duration,
     to use that work under the conditions stated herein.  The
     "Document", below, refers to any such manual or work.  Any member
     of the public is a licensee, and is addressed as "you".  You accept
     the license if you copy, modify or distribute the work in a way
     requiring permission under copyright law.

     A "Modified Version" of the Document means any work containing the
     Document or a portion of it, either copied verbatim, or with
     modifications and/or translated into another language.

     A "Secondary Section" is a named appendix or a front-matter section
     of the Document that deals exclusively with the relationship of the
     publishers or authors of the Document to the Document's overall
     subject (or to related matters) and contains nothing that could
     fall directly within that overall subject.  (Thus, if the Document
     is in part a textbook of mathematics, a Secondary Section may not
     explain any mathematics.)  The relationship could be a matter of
     historical connection with the subject or with related matters, or
     of legal, commercial, philosophical, ethical or political position
     regarding them.

     The "Invariant Sections" are certain Secondary Sections whose
     titles are designated, as being those of Invariant Sections, in the
     notice that says that the Document is released under this License.
     If a section does not fit the above definition of Secondary then it
     is not allowed to be designated as Invariant.  The Document may
     contain zero Invariant Sections.  If the Document does not identify
     any Invariant Sections then there are none.

     The "Cover Texts" are certain short passages of text that are
     listed, as Front-Cover Texts or Back-Cover Texts, in the notice
     that says that the Document is released under this License.  A
     Front-Cover Text may be at most 5 words, and a Back-Cover Text may
     be at most 25 words.

     A "Transparent" copy of the Document means a machine-readable copy,
     represented in a format whose specification is available to the
     general public, that is suitable for revising the document
     straightforwardly with generic text editors or (for images composed
     of pixels) generic paint programs or (for drawings) some widely
     available drawing editor, and that is suitable for input to text
     formatters or for automatic translation to a variety of formats
     suitable for input to text formatters.  A copy made in an otherwise
     Transparent file format whose markup, or absence of markup, has
     been arranged to thwart or discourage subsequent modification by
     readers is not Transparent.  An image format is not Transparent if
     used for any substantial amount of text.  A copy that is not
     "Transparent" is called "Opaque".

     Examples of suitable formats for Transparent copies include plain
     ASCII without markup, Texinfo input format, LaTeX input format,
     SGML or XML using a publicly available DTD, and standard-conforming
     simple HTML, PostScript or PDF designed for human modification.
     Examples of transparent image formats include PNG, XCF and JPG.
     Opaque formats include proprietary formats that can be read and
     edited only by proprietary word processors, SGML or XML for which
     the DTD and/or processing tools are not generally available, and
     the machine-generated HTML, PostScript or PDF produced by some word
     processors for output purposes only.

     The "Title Page" means, for a printed book, the title page itself,
     plus such following pages as are needed to hold, legibly, the
     material this License requires to appear in the title page.  For
     works in formats which do not have any title page as such, "Title
     Page" means the text near the most prominent appearance of the
     work's title, preceding the beginning of the body of the text.

     The "publisher" means any person or entity that distributes copies
     of the Document to the public.

     A section "Entitled XYZ" means a named subunit of the Document
     whose title either is precisely XYZ or contains XYZ in parentheses
     following text that translates XYZ in another language.  (Here XYZ
     stands for a specific section name mentioned below, such as
     "Acknowledgements", "Dedications", "Endorsements", or "History".)
     To "Preserve the Title" of such a section when you modify the
     Document means that it remains a section "Entitled XYZ" according
     to this definition.

     The Document may include Warranty Disclaimers next to the notice
     which states that this License applies to the Document.  These
     Warranty Disclaimers are considered to be included by reference in
     this License, but only as regards disclaiming warranties: any other
     implication that these Warranty Disclaimers may have is void and
     has no effect on the meaning of this License.

  2. VERBATIM COPYING

     You may copy and distribute the Document in any medium, either
     commercially or noncommercially, provided that this License, the
     copyright notices, and the license notice saying this License
     applies to the Document are reproduced in all copies, and that you
     add no other conditions whatsoever to those of this License.  You
     may not use technical measures to obstruct or control the reading
     or further copying of the copies you make or distribute.  However,
     you may accept compensation in exchange for copies.  If you
     distribute a large enough number of copies you must also follow the
     conditions in section 3.

     You may also lend copies, under the same conditions stated above,
     and you may publicly display copies.

  3. COPYING IN QUANTITY

     If you publish printed copies (or copies in media that commonly
     have printed covers) of the Document, numbering more than 100, and
     the Document's license notice requires Cover Texts, you must
     enclose the copies in covers that carry, clearly and legibly, all
     these Cover Texts: Front-Cover Texts on the front cover, and
     Back-Cover Texts on the back cover.  Both covers must also clearly
     and legibly identify you as the publisher of these copies.  The
     front cover must present the full title with all words of the title
     equally prominent and visible.  You may add other material on the
     covers in addition.  Copying with changes limited to the covers, as
     long as they preserve the title of the Document and satisfy these
     conditions, can be treated as verbatim copying in other respects.

     If the required texts for either cover are too voluminous to fit
     legibly, you should put the first ones listed (as many as fit
     reasonably) on the actual cover, and continue the rest onto
     adjacent pages.

     If you publish or distribute Opaque copies of the Document
     numbering more than 100, you must either include a machine-readable
     Transparent copy along with each Opaque copy, or state in or with
     each Opaque copy a computer-network location from which the general
     network-using public has access to download using public-standard
     network protocols a complete Transparent copy of the Document, free
     of added material.  If you use the latter option, you must take
     reasonably prudent steps, when you begin distribution of Opaque
     copies in quantity, to ensure that this Transparent copy will
     remain thus accessible at the stated location until at least one
     year after the last time you distribute an Opaque copy (directly or
     through your agents or retailers) of that edition to the public.

     It is requested, but not required, that you contact the authors of
     the Document well before redistributing any large number of copies,
     to give them a chance to provide you with an updated version of the
     Document.

  4. MODIFICATIONS

     You may copy and distribute a Modified Version of the Document
     under the conditions of sections 2 and 3 above, provided that you
     release the Modified Version under precisely this License, with the
     Modified Version filling the role of the Document, thus licensing
     distribution and modification of the Modified Version to whoever
     possesses a copy of it.  In addition, you must do these things in
     the Modified Version:

       A. Use in the Title Page (and on the covers, if any) a title
          distinct from that of the Document, and from those of previous
          versions (which should, if there were any, be listed in the
          History section of the Document).  You may use the same title
          as a previous version if the original publisher of that
          version gives permission.

       B. List on the Title Page, as authors, one or more persons or
          entities responsible for authorship of the modifications in
          the Modified Version, together with at least five of the
          principal authors of the Document (all of its principal
          authors, if it has fewer than five), unless they release you
          from this requirement.

       C. State on the Title page the name of the publisher of the
          Modified Version, as the publisher.

       D. Preserve all the copyright notices of the Document.

       E. Add an appropriate copyright notice for your modifications
          adjacent to the other copyright notices.

       F. Include, immediately after the copyright notices, a license
          notice giving the public permission to use the Modified
          Version under the terms of this License, in the form shown in
          the Addendum below.

       G. Preserve in that license notice the full lists of Invariant
          Sections and required Cover Texts given in the Document's
          license notice.

       H. Include an unaltered copy of this License.

       I. Preserve the section Entitled "History", Preserve its Title,
          and add to it an item stating at least the title, year, new
          authors, and publisher of the Modified Version as given on the
          Title Page.  If there is no section Entitled "History" in the
          Document, create one stating the title, year, authors, and
          publisher of the Document as given on its Title Page, then add
          an item describing the Modified Version as stated in the
          previous sentence.

       J. Preserve the network location, if any, given in the Document
          for public access to a Transparent copy of the Document, and
          likewise the network locations given in the Document for
          previous versions it was based on.  These may be placed in the
          "History" section.  You may omit a network location for a work
          that was published at least four years before the Document
          itself, or if the original publisher of the version it refers
          to gives permission.

       K. For any section Entitled "Acknowledgements" or "Dedications",
          Preserve the Title of the section, and preserve in the section
          all the substance and tone of each of the contributor
          acknowledgements and/or dedications given therein.

       L. Preserve all the Invariant Sections of the Document, unaltered
          in their text and in their titles.  Section numbers or the
          equivalent are not considered part of the section titles.

       M. Delete any section Entitled "Endorsements".  Such a section
          may not be included in the Modified Version.

       N. Do not retitle any existing section to be Entitled
          "Endorsements" or to conflict in title with any Invariant
          Section.

       O. Preserve any Warranty Disclaimers.

     If the Modified Version includes new front-matter sections or
     appendices that qualify as Secondary Sections and contain no
     material copied from the Document, you may at your option designate
     some or all of these sections as invariant.  To do this, add their
     titles to the list of Invariant Sections in the Modified Version's
     license notice.  These titles must be distinct from any other
     section titles.

     You may add a section Entitled "Endorsements", provided it contains
     nothing but endorsements of your Modified Version by various
     parties--for example, statements of peer review or that the text
     has been approved by an organization as the authoritative
     definition of a standard.

     You may add a passage of up to five words as a Front-Cover Text,
     and a passage of up to 25 words as a Back-Cover Text, to the end of
     the list of Cover Texts in the Modified Version.  Only one passage
     of Front-Cover Text and one of Back-Cover Text may be added by (or
     through arrangements made by) any one entity.  If the Document
     already includes a cover text for the same cover, previously added
     by you or by arrangement made by the same entity you are acting on
     behalf of, you may not add another; but you may replace the old
     one, on explicit permission from the previous publisher that added
     the old one.

     The author(s) and publisher(s) of the Document do not by this
     License give permission to use their names for publicity for or to
     assert or imply endorsement of any Modified Version.

  5. COMBINING DOCUMENTS

     You may combine the Document with other documents released under
     this License, under the terms defined in section 4 above for
     modified versions, provided that you include in the combination all
     of the Invariant Sections of all of the original documents,
     unmodified, and list them all as Invariant Sections of your
     combined work in its license notice, and that you preserve all
     their Warranty Disclaimers.

     The combined work need only contain one copy of this License, and
     multiple identical Invariant Sections may be replaced with a single
     copy.  If there are multiple Invariant Sections with the same name
     but different contents, make the title of each such section unique
     by adding at the end of it, in parentheses, the name of the
     original author or publisher of that section if known, or else a
     unique number.  Make the same adjustment to the section titles in
     the list of Invariant Sections in the license notice of the
     combined work.

     In the combination, you must combine any sections Entitled
     "History" in the various original documents, forming one section
     Entitled "History"; likewise combine any sections Entitled
     "Acknowledgements", and any sections Entitled "Dedications".  You
     must delete all sections Entitled "Endorsements."

  6. COLLECTIONS OF DOCUMENTS

     You may make a collection consisting of the Document and other
     documents released under this License, and replace the individual
     copies of this License in the various documents with a single copy
     that is included in the collection, provided that you follow the
     rules of this License for verbatim copying of each of the documents
     in all other respects.

     You may extract a single document from such a collection, and
     distribute it individually under this License, provided you insert
     a copy of this License into the extracted document, and follow this
     License in all other respects regarding verbatim copying of that
     document.

  7. AGGREGATION WITH INDEPENDENT WORKS

     A compilation of the Document or its derivatives with other
     separate and independent documents or works, in or on a volume of a
     storage or distribution medium, is called an "aggregate" if the
     copyright resulting from the compilation is not used to limit the
     legal rights of the compilation's users beyond what the individual
     works permit.  When the Document is included in an aggregate, this
     License does not apply to the other works in the aggregate which
     are not themselves derivative works of the Document.

     If the Cover Text requirement of section 3 is applicable to these
     copies of the Document, then if the Document is less than one half
     of the entire aggregate, the Document's Cover Texts may be placed
     on covers that bracket the Document within the aggregate, or the
     electronic equivalent of covers if the Document is in electronic
     form.  Otherwise they must appear on printed covers that bracket
     the whole aggregate.

  8. TRANSLATION

     Translation is considered a kind of modification, so you may
     distribute translations of the Document under the terms of section
     4.  Replacing Invariant Sections with translations requires special
     permission from their copyright holders, but you may include
     translations of some or all Invariant Sections in addition to the
     original versions of these Invariant Sections.  You may include a
     translation of this License, and all the license notices in the
     Document, and any Warranty Disclaimers, provided that you also
     include the original English version of this License and the
     original versions of those notices and disclaimers.  In case of a
     disagreement between the translation and the original version of
     this License or a notice or disclaimer, the original version will
     prevail.

     If a section in the Document is Entitled "Acknowledgements",
     "Dedications", or "History", the requirement (section 4) to
     Preserve its Title (section 1) will typically require changing the
     actual title.

  9. TERMINATION

     You may not copy, modify, sublicense, or distribute the Document
     except as expressly provided under this License.  Any attempt
     otherwise to copy, modify, sublicense, or distribute it is void,
     and will automatically terminate your rights under this License.

     However, if you cease all violation of this License, then your
     license from a particular copyright holder is reinstated (a)
     provisionally, unless and until the copyright holder explicitly and
     finally terminates your license, and (b) permanently, if the
     copyright holder fails to notify you of the violation by some
     reasonable means prior to 60 days after the cessation.

     Moreover, your license from a particular copyright holder is
     reinstated permanently if the copyright holder notifies you of the
     violation by some reasonable means, this is the first time you have
     received notice of violation of this License (for any work) from
     that copyright holder, and you cure the violation prior to 30 days
     after your receipt of the notice.

     Termination of your rights under this section does not terminate
     the licenses of parties who have received copies or rights from you
     under this License.  If your rights have been terminated and not
     permanently reinstated, receipt of a copy of some or all of the
     same material does not give you any rights to use it.

  10. FUTURE REVISIONS OF THIS LICENSE

     The Free Software Foundation may publish new, revised versions of
     the GNU Free Documentation License from time to time.  Such new
     versions will be similar in spirit to the present version, but may
     differ in detail to address new problems or concerns.  See
     <http://www.gnu.org/copyleft/>.

     Each version of the License is given a distinguishing version
     number.  If the Document specifies that a particular numbered
     version of this License "or any later version" applies to it, you
     have the option of following the terms and conditions either of
     that specified version or of any later version that has been
     published (not as a draft) by the Free Software Foundation.  If the
     Document does not specify a version number of this License, you may
     choose any version ever published (not as a draft) by the Free
     Software Foundation.  If the Document specifies that a proxy can
     decide which future versions of this License can be used, that
     proxy's public statement of acceptance of a version permanently
     authorizes you to choose that version for the Document.

  11. RELICENSING

     "Massive Multiauthor Collaboration Site" (or "MMC Site") means any
     World Wide Web server that publishes copyrightable works and also
     provides prominent facilities for anybody to edit those works.  A
     public wiki that anybody can edit is an example of such a server.
     A "Massive Multiauthor Collaboration" (or "MMC") contained in the
     site means any set of copyrightable works thus published on the MMC
     site.

     "CC-BY-SA" means the Creative Commons Attribution-Share Alike 3.0
     license published by Creative Commons Corporation, a not-for-profit
     corporation with a principal place of business in San Francisco,
     California, as well as future copyleft versions of that license
     published by that same organization.

     "Incorporate" means to publish or republish a Document, in whole or
     in part, as part of another Document.

     An MMC is "eligible for relicensing" if it is licensed under this
     License, and if all works that were first published under this
     License somewhere other than this MMC, and subsequently
     incorporated in whole or in part into the MMC, (1) had no cover
     texts or invariant sections, and (2) were thus incorporated prior
     to November 1, 2008.

     The operator of an MMC Site may republish an MMC contained in the
     site under CC-BY-SA on the same site at any time before August 1,
     2009, provided the MMC is eligible for relicensing.

ADDENDUM: How to use this License for your documents
====================================================

To use this License in a document you have written, include a copy of
the License in the document and put the following copyright and license
notices just after the title page:

       Copyright (C)  YEAR  YOUR NAME.
       Permission is granted to copy, distribute and/or modify
       this document under the terms of the GNU Free
       Documentation License, Version 1.3 or any later version
       published by the Free Software Foundation; with no
       Invariant Sections, no Front-Cover Texts, and no
       Back-Cover Texts.  A copy of the license is included in
       the section entitled ``GNU Free Documentation License''.

   If you have Invariant Sections, Front-Cover Texts and Back-Cover
Texts, replace the "with...Texts."  line with this:

       with the Invariant Sections being LIST THEIR
       TITLES, with the Front-Cover Texts being LIST, and
       with the Back-Cover Texts being LIST.

   If you have Invariant Sections without Cover Texts, or some other
combination of the three, merge those two alternatives to suit the
situation.

   If your document contains nontrivial examples of program code, we
recommend releasing these examples in parallel under your choice of free
software license, such as the GNU General Public License, to permit
their use in free software.


File: gsl-ref.info,  Node: Function Index,  Next: Variable Index,  Prev: GNU Free Documentation License,  Up: Top

Function Index
**************

 [index ]
* Menu:

* cblas_caxpy:                           Level 1 CBLAS Functions.
                                                              (line  90)
* cblas_ccopy:                           Level 1 CBLAS Functions.
                                                              (line  87)
* cblas_cdotc_sub:                       Level 1 CBLAS Functions.
                                                              (line  21)
* cblas_cdotu_sub:                       Level 1 CBLAS Functions.
                                                              (line  18)
* cblas_cgbmv:                           Level 2 CBLAS Functions.
                                                              (line  93)
* cblas_cgemm:                           Level 3 CBLAS Functions.
                                                              (line  76)
* cblas_cgemv:                           Level 2 CBLAS Functions.
                                                              (line  88)
* cblas_cgerc:                           Level 2 CBLAS Functions.
                                                              (line 264)
* cblas_cgeru:                           Level 2 CBLAS Functions.
                                                              (line 260)
* cblas_chbmv:                           Level 2 CBLAS Functions.
                                                              (line 250)
* cblas_chemm:                           Level 3 CBLAS Functions.
                                                              (line 146)
* cblas_chemv:                           Level 2 CBLAS Functions.
                                                              (line 245)
* cblas_cher:                            Level 2 CBLAS Functions.
                                                              (line 268)
* cblas_cher2:                           Level 2 CBLAS Functions.
                                                              (line 276)
* cblas_cher2k:                          Level 3 CBLAS Functions.
                                                              (line 157)
* cblas_cherk:                           Level 3 CBLAS Functions.
                                                              (line 152)
* cblas_chpmv:                           Level 2 CBLAS Functions.
                                                              (line 255)
* cblas_chpr:                            Level 2 CBLAS Functions.
                                                              (line 272)
* cblas_chpr2:                           Level 2 CBLAS Functions.
                                                              (line 281)
* cblas_cscal:                           Level 1 CBLAS Functions.
                                                              (line 132)
* cblas_csscal:                          Level 1 CBLAS Functions.
                                                              (line 138)
* cblas_cswap:                           Level 1 CBLAS Functions.
                                                              (line  84)
* cblas_csymm:                           Level 3 CBLAS Functions.
                                                              (line  82)
* cblas_csyr2k:                          Level 3 CBLAS Functions.
                                                              (line  93)
* cblas_csyrk:                           Level 3 CBLAS Functions.
                                                              (line  88)
* cblas_ctbmv:                           Level 2 CBLAS Functions.
                                                              (line 104)
* cblas_ctbsv:                           Level 2 CBLAS Functions.
                                                              (line 119)
* cblas_ctpmv:                           Level 2 CBLAS Functions.
                                                              (line 109)
* cblas_ctpsv:                           Level 2 CBLAS Functions.
                                                              (line 124)
* cblas_ctrmm:                           Level 3 CBLAS Functions.
                                                              (line  99)
* cblas_ctrmv:                           Level 2 CBLAS Functions.
                                                              (line  99)
* cblas_ctrsm:                           Level 3 CBLAS Functions.
                                                              (line 105)
* cblas_ctrsv:                           Level 2 CBLAS Functions.
                                                              (line 114)
* cblas_dasum:                           Level 1 CBLAS Functions.
                                                              (line  39)
* cblas_daxpy:                           Level 1 CBLAS Functions.
                                                              (line  81)
* cblas_dcopy:                           Level 1 CBLAS Functions.
                                                              (line  78)
* cblas_ddot:                            Level 1 CBLAS Functions.
                                                              (line  15)
* cblas_dgbmv:                           Level 2 CBLAS Functions.
                                                              (line  52)
* cblas_dgemm:                           Level 3 CBLAS Functions.
                                                              (line  41)
* cblas_dgemv:                           Level 2 CBLAS Functions.
                                                              (line  47)
* cblas_dger:                            Level 2 CBLAS Functions.
                                                              (line 222)
* cblas_dnrm2:                           Level 1 CBLAS Functions.
                                                              (line  36)
* cblas_drot:                            Level 1 CBLAS Functions.
                                                              (line 120)
* cblas_drotg:                           Level 1 CBLAS Functions.
                                                              (line 114)
* cblas_drotm:                           Level 1 CBLAS Functions.
                                                              (line 123)
* cblas_drotmg:                          Level 1 CBLAS Functions.
                                                              (line 117)
* cblas_dsbmv:                           Level 2 CBLAS Functions.
                                                              (line 212)
* cblas_dscal:                           Level 1 CBLAS Functions.
                                                              (line 129)
* cblas_dsdot:                           Level 1 CBLAS Functions.
                                                              (line   9)
* cblas_dspmv:                           Level 2 CBLAS Functions.
                                                              (line 217)
* cblas_dspr:                            Level 2 CBLAS Functions.
                                                              (line 231)
* cblas_dspr2:                           Level 2 CBLAS Functions.
                                                              (line 240)
* cblas_dswap:                           Level 1 CBLAS Functions.
                                                              (line  75)
* cblas_dsymm:                           Level 3 CBLAS Functions.
                                                              (line  47)
* cblas_dsymv:                           Level 2 CBLAS Functions.
                                                              (line 207)
* cblas_dsyr:                            Level 2 CBLAS Functions.
                                                              (line 227)
* cblas_dsyr2:                           Level 2 CBLAS Functions.
                                                              (line 235)
* cblas_dsyr2k:                          Level 3 CBLAS Functions.
                                                              (line  58)
* cblas_dsyrk:                           Level 3 CBLAS Functions.
                                                              (line  53)
* cblas_dtbmv:                           Level 2 CBLAS Functions.
                                                              (line  63)
* cblas_dtbsv:                           Level 2 CBLAS Functions.
                                                              (line  78)
* cblas_dtpmv:                           Level 2 CBLAS Functions.
                                                              (line  68)
* cblas_dtpsv:                           Level 2 CBLAS Functions.
                                                              (line  83)
* cblas_dtrmm:                           Level 3 CBLAS Functions.
                                                              (line  64)
* cblas_dtrmv:                           Level 2 CBLAS Functions.
                                                              (line  58)
* cblas_dtrsm:                           Level 3 CBLAS Functions.
                                                              (line  70)
* cblas_dtrsv:                           Level 2 CBLAS Functions.
                                                              (line  73)
* cblas_dzasum:                          Level 1 CBLAS Functions.
                                                              (line  51)
* cblas_dznrm2:                          Level 1 CBLAS Functions.
                                                              (line  48)
* cblas_icamax:                          Level 1 CBLAS Functions.
                                                              (line  60)
* cblas_idamax:                          Level 1 CBLAS Functions.
                                                              (line  57)
* cblas_isamax:                          Level 1 CBLAS Functions.
                                                              (line  54)
* cblas_izamax:                          Level 1 CBLAS Functions.
                                                              (line  63)
* cblas_sasum:                           Level 1 CBLAS Functions.
                                                              (line  33)
* cblas_saxpy:                           Level 1 CBLAS Functions.
                                                              (line  72)
* cblas_scasum:                          Level 1 CBLAS Functions.
                                                              (line  45)
* cblas_scnrm2:                          Level 1 CBLAS Functions.
                                                              (line  42)
* cblas_scopy:                           Level 1 CBLAS Functions.
                                                              (line  69)
* cblas_sdot:                            Level 1 CBLAS Functions.
                                                              (line  12)
* cblas_sdsdot:                          Level 1 CBLAS Functions.
                                                              (line   6)
* cblas_sgbmv:                           Level 2 CBLAS Functions.
                                                              (line  11)
* cblas_sgemm:                           Level 3 CBLAS Functions.
                                                              (line   6)
* cblas_sgemv:                           Level 2 CBLAS Functions.
                                                              (line   6)
* cblas_sger:                            Level 2 CBLAS Functions.
                                                              (line 185)
* cblas_snrm2:                           Level 1 CBLAS Functions.
                                                              (line  30)
* cblas_srot:                            Level 1 CBLAS Functions.
                                                              (line 108)
* cblas_srotg:                           Level 1 CBLAS Functions.
                                                              (line 102)
* cblas_srotm:                           Level 1 CBLAS Functions.
                                                              (line 111)
* cblas_srotmg:                          Level 1 CBLAS Functions.
                                                              (line 105)
* cblas_ssbmv:                           Level 2 CBLAS Functions.
                                                              (line 175)
* cblas_sscal:                           Level 1 CBLAS Functions.
                                                              (line 126)
* cblas_sspmv:                           Level 2 CBLAS Functions.
                                                              (line 180)
* cblas_sspr:                            Level 2 CBLAS Functions.
                                                              (line 194)
* cblas_sspr2:                           Level 2 CBLAS Functions.
                                                              (line 203)
* cblas_sswap:                           Level 1 CBLAS Functions.
                                                              (line  66)
* cblas_ssymm:                           Level 3 CBLAS Functions.
                                                              (line  12)
* cblas_ssymv:                           Level 2 CBLAS Functions.
                                                              (line 170)
* cblas_ssyr:                            Level 2 CBLAS Functions.
                                                              (line 190)
* cblas_ssyr2:                           Level 2 CBLAS Functions.
                                                              (line 198)
* cblas_ssyr2k:                          Level 3 CBLAS Functions.
                                                              (line  23)
* cblas_ssyrk:                           Level 3 CBLAS Functions.
                                                              (line  18)
* cblas_stbmv:                           Level 2 CBLAS Functions.
                                                              (line  22)
* cblas_stbsv:                           Level 2 CBLAS Functions.
                                                              (line  37)
* cblas_stpmv:                           Level 2 CBLAS Functions.
                                                              (line  27)
* cblas_stpsv:                           Level 2 CBLAS Functions.
                                                              (line  42)
* cblas_strmm:                           Level 3 CBLAS Functions.
                                                              (line  29)
* cblas_strmv:                           Level 2 CBLAS Functions.
                                                              (line  17)
* cblas_strsm:                           Level 3 CBLAS Functions.
                                                              (line  35)
* cblas_strsv:                           Level 2 CBLAS Functions.
                                                              (line  32)
* cblas_xerbla:                          Level 3 CBLAS Functions.
                                                              (line 180)
* cblas_zaxpy:                           Level 1 CBLAS Functions.
                                                              (line  99)
* cblas_zcopy:                           Level 1 CBLAS Functions.
                                                              (line  96)
* cblas_zdotc_sub:                       Level 1 CBLAS Functions.
                                                              (line  27)
* cblas_zdotu_sub:                       Level 1 CBLAS Functions.
                                                              (line  24)
* cblas_zdscal:                          Level 1 CBLAS Functions.
                                                              (line 141)
* cblas_zgbmv:                           Level 2 CBLAS Functions.
                                                              (line 134)
* cblas_zgemm:                           Level 3 CBLAS Functions.
                                                              (line 111)
* cblas_zgemv:                           Level 2 CBLAS Functions.
                                                              (line 129)
* cblas_zgerc:                           Level 2 CBLAS Functions.
                                                              (line 304)
* cblas_zgeru:                           Level 2 CBLAS Functions.
                                                              (line 300)
* cblas_zhbmv:                           Level 2 CBLAS Functions.
                                                              (line 290)
* cblas_zhemm:                           Level 3 CBLAS Functions.
                                                              (line 163)
* cblas_zhemv:                           Level 2 CBLAS Functions.
                                                              (line 285)
* cblas_zher:                            Level 2 CBLAS Functions.
                                                              (line 308)
* cblas_zher2:                           Level 2 CBLAS Functions.
                                                              (line 316)
* cblas_zher2k:                          Level 3 CBLAS Functions.
                                                              (line 174)
* cblas_zherk:                           Level 3 CBLAS Functions.
                                                              (line 169)
* cblas_zhpmv:                           Level 2 CBLAS Functions.
                                                              (line 295)
* cblas_zhpr:                            Level 2 CBLAS Functions.
                                                              (line 312)
* cblas_zhpr2:                           Level 2 CBLAS Functions.
                                                              (line 321)
* cblas_zscal:                           Level 1 CBLAS Functions.
                                                              (line 135)
* cblas_zswap:                           Level 1 CBLAS Functions.
                                                              (line  93)
* cblas_zsymm:                           Level 3 CBLAS Functions.
                                                              (line 117)
* cblas_zsyr2k:                          Level 3 CBLAS Functions.
                                                              (line 128)
* cblas_zsyrk:                           Level 3 CBLAS Functions.
                                                              (line 123)
* cblas_ztbmv:                           Level 2 CBLAS Functions.
                                                              (line 145)
* cblas_ztbsv:                           Level 2 CBLAS Functions.
                                                              (line 160)
* cblas_ztpmv:                           Level 2 CBLAS Functions.
                                                              (line 150)
* cblas_ztpsv:                           Level 2 CBLAS Functions.
                                                              (line 165)
* cblas_ztrmm:                           Level 3 CBLAS Functions.
                                                              (line 134)
* cblas_ztrmv:                           Level 2 CBLAS Functions.
                                                              (line 140)
* cblas_ztrsm:                           Level 3 CBLAS Functions.
                                                              (line 140)
* cblas_ztrsv:                           Level 2 CBLAS Functions.
                                                              (line 155)
* gsl_acosh:                             Elementary Functions.
                                                              (line  32)
* gsl_asinh:                             Elementary Functions.
                                                              (line  36)
* gsl_atanh:                             Elementary Functions.
                                                              (line  40)
* gsl_blas_caxpy:                        Level 1 GSL BLAS Interface.
                                                              (line  92)
* gsl_blas_ccopy:                        Level 1 GSL BLAS Interface.
                                                              (line  81)
* gsl_blas_cdotc:                        Level 1 GSL BLAS Interface.
                                                              (line  27)
* gsl_blas_cdotu:                        Level 1 GSL BLAS Interface.
                                                              (line  20)
* gsl_blas_cgemm:                        Level 3 GSL BLAS Interface.
                                                              (line  13)
* gsl_blas_cgemv:                        Level 2 GSL BLAS Interface.
                                                              (line  12)
* gsl_blas_cgerc:                        Level 2 GSL BLAS Interface.
                                                              (line 106)
* gsl_blas_cgeru:                        Level 2 GSL BLAS Interface.
                                                              (line  97)
* gsl_blas_chemm:                        Level 3 GSL BLAS Interface.
                                                              (line  47)
* gsl_blas_chemv:                        Level 2 GSL BLAS Interface.
                                                              (line  78)
* gsl_blas_cher:                         Level 2 GSL BLAS Interface.
                                                              (line 126)
* gsl_blas_cher2:                        Level 2 GSL BLAS Interface.
                                                              (line 150)
* gsl_blas_cher2k:                       Level 3 GSL BLAS Interface.
                                                              (line 168)
* gsl_blas_cherk:                        Level 3 GSL BLAS Interface.
                                                              (line 130)
* gsl_blas_cscal:                        Level 1 GSL BLAS Interface.
                                                              (line 101)
* gsl_blas_csscal:                       Level 1 GSL BLAS Interface.
                                                              (line 105)
* gsl_blas_cswap:                        Level 1 GSL BLAS Interface.
                                                              (line  72)
* gsl_blas_csymm:                        Level 3 GSL BLAS Interface.
                                                              (line  32)
* gsl_blas_csyr2k:                       Level 3 GSL BLAS Interface.
                                                              (line 151)
* gsl_blas_csyrk:                        Level 3 GSL BLAS Interface.
                                                              (line 115)
* gsl_blas_ctrmm:                        Level 3 GSL BLAS Interface.
                                                              (line  69)
* gsl_blas_ctrmv:                        Level 2 GSL BLAS Interface.
                                                              (line  30)
* gsl_blas_ctrsm:                        Level 3 GSL BLAS Interface.
                                                              (line  92)
* gsl_blas_ctrsv:                        Level 2 GSL BLAS Interface.
                                                              (line  51)
* gsl_blas_dasum:                        Level 1 GSL BLAS Interface.
                                                              (line  46)
* gsl_blas_daxpy:                        Level 1 GSL BLAS Interface.
                                                              (line  90)
* gsl_blas_dcopy:                        Level 1 GSL BLAS Interface.
                                                              (line  80)
* gsl_blas_ddot:                         Level 1 GSL BLAS Interface.
                                                              (line  15)
* gsl_blas_dgemm:                        Level 3 GSL BLAS Interface.
                                                              (line  10)
* gsl_blas_dgemv:                        Level 2 GSL BLAS Interface.
                                                              (line   9)
* gsl_blas_dger:                         Level 2 GSL BLAS Interface.
                                                              (line  95)
* gsl_blas_dnrm2:                        Level 1 GSL BLAS Interface.
                                                              (line  35)
* gsl_blas_drot:                         Level 1 GSL BLAS Interface.
                                                              (line 126)
* gsl_blas_drotg:                        Level 1 GSL BLAS Interface.
                                                              (line 114)
* gsl_blas_drotm:                        Level 1 GSL BLAS Interface.
                                                              (line 141)
* gsl_blas_drotmg:                       Level 1 GSL BLAS Interface.
                                                              (line 133)
* gsl_blas_dscal:                        Level 1 GSL BLAS Interface.
                                                              (line 100)
* gsl_blas_dsdot:                        Level 1 GSL BLAS Interface.
                                                              (line  13)
* gsl_blas_dswap:                        Level 1 GSL BLAS Interface.
                                                              (line  71)
* gsl_blas_dsymm:                        Level 3 GSL BLAS Interface.
                                                              (line  29)
* gsl_blas_dsymv:                        Level 2 GSL BLAS Interface.
                                                              (line  68)
* gsl_blas_dsyr:                         Level 2 GSL BLAS Interface.
                                                              (line 117)
* gsl_blas_dsyr2:                        Level 2 GSL BLAS Interface.
                                                              (line 141)
* gsl_blas_dsyr2k:                       Level 3 GSL BLAS Interface.
                                                              (line 148)
* gsl_blas_dsyrk:                        Level 3 GSL BLAS Interface.
                                                              (line 112)
* gsl_blas_dtrmm:                        Level 3 GSL BLAS Interface.
                                                              (line  66)
* gsl_blas_dtrmv:                        Level 2 GSL BLAS Interface.
                                                              (line  27)
* gsl_blas_dtrsm:                        Level 3 GSL BLAS Interface.
                                                              (line  89)
* gsl_blas_dtrsv:                        Level 2 GSL BLAS Interface.
                                                              (line  48)
* gsl_blas_dzasum:                       Level 1 GSL BLAS Interface.
                                                              (line  51)
* gsl_blas_dznrm2:                       Level 1 GSL BLAS Interface.
                                                              (line  40)
* gsl_blas_icamax:                       Level 1 GSL BLAS Interface.
                                                              (line  58)
* gsl_blas_idamax:                       Level 1 GSL BLAS Interface.
                                                              (line  57)
* gsl_blas_isamax:                       Level 1 GSL BLAS Interface.
                                                              (line  56)
* gsl_blas_izamax:                       Level 1 GSL BLAS Interface.
                                                              (line  60)
* gsl_blas_sasum:                        Level 1 GSL BLAS Interface.
                                                              (line  45)
* gsl_blas_saxpy:                        Level 1 GSL BLAS Interface.
                                                              (line  88)
* gsl_blas_scasum:                       Level 1 GSL BLAS Interface.
                                                              (line  50)
* gsl_blas_scnrm2:                       Level 1 GSL BLAS Interface.
                                                              (line  39)
* gsl_blas_scopy:                        Level 1 GSL BLAS Interface.
                                                              (line  78)
* gsl_blas_sdot:                         Level 1 GSL BLAS Interface.
                                                              (line  11)
* gsl_blas_sdsdot:                       Level 1 GSL BLAS Interface.
                                                              (line   6)
* gsl_blas_sgemm:                        Level 3 GSL BLAS Interface.
                                                              (line   6)
* gsl_blas_sgemv:                        Level 2 GSL BLAS Interface.
                                                              (line   6)
* gsl_blas_sger:                         Level 2 GSL BLAS Interface.
                                                              (line  93)
* gsl_blas_snrm2:                        Level 1 GSL BLAS Interface.
                                                              (line  34)
* gsl_blas_srot:                         Level 1 GSL BLAS Interface.
                                                              (line 124)
* gsl_blas_srotg:                        Level 1 GSL BLAS Interface.
                                                              (line 112)
* gsl_blas_srotm:                        Level 1 GSL BLAS Interface.
                                                              (line 139)
* gsl_blas_srotmg:                       Level 1 GSL BLAS Interface.
                                                              (line 131)
* gsl_blas_sscal:                        Level 1 GSL BLAS Interface.
                                                              (line  99)
* gsl_blas_sswap:                        Level 1 GSL BLAS Interface.
                                                              (line  69)
* gsl_blas_ssymm:                        Level 3 GSL BLAS Interface.
                                                              (line  26)
* gsl_blas_ssymv:                        Level 2 GSL BLAS Interface.
                                                              (line  65)
* gsl_blas_ssyr:                         Level 2 GSL BLAS Interface.
                                                              (line 115)
* gsl_blas_ssyr2:                        Level 2 GSL BLAS Interface.
                                                              (line 138)
* gsl_blas_ssyr2k:                       Level 3 GSL BLAS Interface.
                                                              (line 145)
* gsl_blas_ssyrk:                        Level 3 GSL BLAS Interface.
                                                              (line 109)
* gsl_blas_strmm:                        Level 3 GSL BLAS Interface.
                                                              (line  63)
* gsl_blas_strmv:                        Level 2 GSL BLAS Interface.
                                                              (line  24)
* gsl_blas_strsm:                        Level 3 GSL BLAS Interface.
                                                              (line  86)
* gsl_blas_strsv:                        Level 2 GSL BLAS Interface.
                                                              (line  45)
* gsl_blas_zaxpy:                        Level 1 GSL BLAS Interface.
                                                              (line  94)
* gsl_blas_zcopy:                        Level 1 GSL BLAS Interface.
                                                              (line  83)
* gsl_blas_zdotc:                        Level 1 GSL BLAS Interface.
                                                              (line  29)
* gsl_blas_zdotu:                        Level 1 GSL BLAS Interface.
                                                              (line  22)
* gsl_blas_zdscal:                       Level 1 GSL BLAS Interface.
                                                              (line 107)
* gsl_blas_zgemm:                        Level 3 GSL BLAS Interface.
                                                              (line  17)
* gsl_blas_zgemv:                        Level 2 GSL BLAS Interface.
                                                              (line  16)
* gsl_blas_zgerc:                        Level 2 GSL BLAS Interface.
                                                              (line 109)
* gsl_blas_zgeru:                        Level 2 GSL BLAS Interface.
                                                              (line 100)
* gsl_blas_zhemm:                        Level 3 GSL BLAS Interface.
                                                              (line  51)
* gsl_blas_zhemv:                        Level 2 GSL BLAS Interface.
                                                              (line  82)
* gsl_blas_zher:                         Level 2 GSL BLAS Interface.
                                                              (line 128)
* gsl_blas_zher2:                        Level 2 GSL BLAS Interface.
                                                              (line 154)
* gsl_blas_zher2k:                       Level 3 GSL BLAS Interface.
                                                              (line 172)
* gsl_blas_zherk:                        Level 3 GSL BLAS Interface.
                                                              (line 133)
* gsl_blas_zscal:                        Level 1 GSL BLAS Interface.
                                                              (line 103)
* gsl_blas_zswap:                        Level 1 GSL BLAS Interface.
                                                              (line  74)
* gsl_blas_zsymm:                        Level 3 GSL BLAS Interface.
                                                              (line  36)
* gsl_blas_zsyr2k:                       Level 3 GSL BLAS Interface.
                                                              (line 155)
* gsl_blas_zsyrk:                        Level 3 GSL BLAS Interface.
                                                              (line 119)
* gsl_blas_ztrmm:                        Level 3 GSL BLAS Interface.
                                                              (line  73)
* gsl_blas_ztrmv:                        Level 2 GSL BLAS Interface.
                                                              (line  33)
* gsl_blas_ztrsm:                        Level 3 GSL BLAS Interface.
                                                              (line  96)
* gsl_blas_ztrsv:                        Level 2 GSL BLAS Interface.
                                                              (line  54)
* gsl_block_alloc:                       Block allocation.    (line  14)
* gsl_block_calloc:                      Block allocation.    (line  24)
* gsl_block_fprintf:                     Reading and writing blocks.
                                                              (line  25)
* gsl_block_fread:                       Reading and writing blocks.
                                                              (line  16)
* gsl_block_free:                        Block allocation.    (line  28)
* gsl_block_fscanf:                      Reading and writing blocks.
                                                              (line  33)
* gsl_block_fwrite:                      Reading and writing blocks.
                                                              (line   9)
* gsl_bspline_alloc:                     Initializing the B-splines solver.
                                                              (line   9)
* gsl_bspline_deriv_eval:                Evaluation of B-spline basis function derivatives.
                                                              (line   6)
* gsl_bspline_deriv_eval_nonzero:        Evaluation of B-spline basis function derivatives.
                                                              (line  19)
* gsl_bspline_eval:                      Evaluation of B-spline basis functions.
                                                              (line   6)
* gsl_bspline_eval_nonzero:              Evaluation of B-spline basis functions.
                                                              (line  16)
* gsl_bspline_free:                      Initializing the B-splines solver.
                                                              (line  17)
* gsl_bspline_greville_abscissa:         Working with the Greville abscissae.
                                                              (line  14)
* gsl_bspline_knots:                     Constructing the knots vector.
                                                              (line   6)
* gsl_bspline_knots_uniform:             Constructing the knots vector.
                                                              (line  11)
* gsl_bspline_ncoeffs:                   Evaluation of B-spline basis functions.
                                                              (line  27)
* gsl_cdf_beta_P:                        The Beta Distribution.
                                                              (line  21)
* gsl_cdf_beta_Pinv:                     The Beta Distribution.
                                                              (line  23)
* gsl_cdf_beta_Q:                        The Beta Distribution.
                                                              (line  22)
* gsl_cdf_beta_Qinv:                     The Beta Distribution.
                                                              (line  24)
* gsl_cdf_binomial_P:                    The Binomial Distribution.
                                                              (line  24)
* gsl_cdf_binomial_Q:                    The Binomial Distribution.
                                                              (line  26)
* gsl_cdf_cauchy_P:                      The Cauchy Distribution.
                                                              (line  22)
* gsl_cdf_cauchy_Pinv:                   The Cauchy Distribution.
                                                              (line  24)
* gsl_cdf_cauchy_Q:                      The Cauchy Distribution.
                                                              (line  23)
* gsl_cdf_cauchy_Qinv:                   The Cauchy Distribution.
                                                              (line  25)
* gsl_cdf_chisq_P:                       The Chi-squared Distribution.
                                                              (line  29)
* gsl_cdf_chisq_Pinv:                    The Chi-squared Distribution.
                                                              (line  31)
* gsl_cdf_chisq_Q:                       The Chi-squared Distribution.
                                                              (line  30)
* gsl_cdf_chisq_Qinv:                    The Chi-squared Distribution.
                                                              (line  32)
* gsl_cdf_exponential_P:                 The Exponential Distribution.
                                                              (line  20)
* gsl_cdf_exponential_Pinv:              The Exponential Distribution.
                                                              (line  22)
* gsl_cdf_exponential_Q:                 The Exponential Distribution.
                                                              (line  21)
* gsl_cdf_exponential_Qinv:              The Exponential Distribution.
                                                              (line  23)
* gsl_cdf_exppow_P:                      The Exponential Power Distribution.
                                                              (line  24)
* gsl_cdf_exppow_Q:                      The Exponential Power Distribution.
                                                              (line  25)
* gsl_cdf_fdist_P:                       The F-distribution.  (line  33)
* gsl_cdf_fdist_Pinv:                    The F-distribution.  (line  35)
* gsl_cdf_fdist_Q:                       The F-distribution.  (line  34)
* gsl_cdf_fdist_Qinv:                    The F-distribution.  (line  37)
* gsl_cdf_flat_P:                        The Flat (Uniform) Distribution.
                                                              (line  20)
* gsl_cdf_flat_Pinv:                     The Flat (Uniform) Distribution.
                                                              (line  22)
* gsl_cdf_flat_Q:                        The Flat (Uniform) Distribution.
                                                              (line  21)
* gsl_cdf_flat_Qinv:                     The Flat (Uniform) Distribution.
                                                              (line  23)
* gsl_cdf_gamma_P:                       The Gamma Distribution.
                                                              (line  33)
* gsl_cdf_gamma_Pinv:                    The Gamma Distribution.
                                                              (line  35)
* gsl_cdf_gamma_Q:                       The Gamma Distribution.
                                                              (line  34)
* gsl_cdf_gamma_Qinv:                    The Gamma Distribution.
                                                              (line  36)
* gsl_cdf_gaussian_P:                    The Gaussian Distribution.
                                                              (line  41)
* gsl_cdf_gaussian_Pinv:                 The Gaussian Distribution.
                                                              (line  43)
* gsl_cdf_gaussian_Q:                    The Gaussian Distribution.
                                                              (line  42)
* gsl_cdf_gaussian_Qinv:                 The Gaussian Distribution.
                                                              (line  44)
* gsl_cdf_geometric_P:                   The Geometric Distribution.
                                                              (line  25)
* gsl_cdf_geometric_Q:                   The Geometric Distribution.
                                                              (line  26)
* gsl_cdf_gumbel1_P:                     The Type-1 Gumbel Distribution.
                                                              (line  21)
* gsl_cdf_gumbel1_Pinv:                  The Type-1 Gumbel Distribution.
                                                              (line  23)
* gsl_cdf_gumbel1_Q:                     The Type-1 Gumbel Distribution.
                                                              (line  22)
* gsl_cdf_gumbel1_Qinv:                  The Type-1 Gumbel Distribution.
                                                              (line  24)
* gsl_cdf_gumbel2_P:                     The Type-2 Gumbel Distribution.
                                                              (line  21)
* gsl_cdf_gumbel2_Pinv:                  The Type-2 Gumbel Distribution.
                                                              (line  23)
* gsl_cdf_gumbel2_Q:                     The Type-2 Gumbel Distribution.
                                                              (line  22)
* gsl_cdf_gumbel2_Qinv:                  The Type-2 Gumbel Distribution.
                                                              (line  24)
* gsl_cdf_hypergeometric_P:              The Hypergeometric Distribution.
                                                              (line  29)
* gsl_cdf_hypergeometric_Q:              The Hypergeometric Distribution.
                                                              (line  31)
* gsl_cdf_laplace_P:                     The Laplace Distribution.
                                                              (line  19)
* gsl_cdf_laplace_Pinv:                  The Laplace Distribution.
                                                              (line  21)
* gsl_cdf_laplace_Q:                     The Laplace Distribution.
                                                              (line  20)
* gsl_cdf_laplace_Qinv:                  The Laplace Distribution.
                                                              (line  22)
* gsl_cdf_logistic_P:                    The Logistic Distribution.
                                                              (line  20)
* gsl_cdf_logistic_Pinv:                 The Logistic Distribution.
                                                              (line  22)
* gsl_cdf_logistic_Q:                    The Logistic Distribution.
                                                              (line  21)
* gsl_cdf_logistic_Qinv:                 The Logistic Distribution.
                                                              (line  23)
* gsl_cdf_lognormal_P:                   The Lognormal Distribution.
                                                              (line  22)
* gsl_cdf_lognormal_Pinv:                The Lognormal Distribution.
                                                              (line  26)
* gsl_cdf_lognormal_Q:                   The Lognormal Distribution.
                                                              (line  24)
* gsl_cdf_lognormal_Qinv:                The Lognormal Distribution.
                                                              (line  28)
* gsl_cdf_negative_binomial_P:           The Negative Binomial Distribution.
                                                              (line  24)
* gsl_cdf_negative_binomial_Q:           The Negative Binomial Distribution.
                                                              (line  26)
* gsl_cdf_pareto_P:                      The Pareto Distribution.
                                                              (line  21)
* gsl_cdf_pareto_Pinv:                   The Pareto Distribution.
                                                              (line  23)
* gsl_cdf_pareto_Q:                      The Pareto Distribution.
                                                              (line  22)
* gsl_cdf_pareto_Qinv:                   The Pareto Distribution.
                                                              (line  24)
* gsl_cdf_pascal_P:                      The Pascal Distribution.
                                                              (line  23)
* gsl_cdf_pascal_Q:                      The Pascal Distribution.
                                                              (line  25)
* gsl_cdf_poisson_P:                     The Poisson Distribution.
                                                              (line  21)
* gsl_cdf_poisson_Q:                     The Poisson Distribution.
                                                              (line  22)
* gsl_cdf_rayleigh_P:                    The Rayleigh Distribution.
                                                              (line  20)
* gsl_cdf_rayleigh_Pinv:                 The Rayleigh Distribution.
                                                              (line  22)
* gsl_cdf_rayleigh_Q:                    The Rayleigh Distribution.
                                                              (line  21)
* gsl_cdf_rayleigh_Qinv:                 The Rayleigh Distribution.
                                                              (line  23)
* gsl_cdf_tdist_P:                       The t-distribution.  (line  29)
* gsl_cdf_tdist_Pinv:                    The t-distribution.  (line  31)
* gsl_cdf_tdist_Q:                       The t-distribution.  (line  30)
* gsl_cdf_tdist_Qinv:                    The t-distribution.  (line  32)
* gsl_cdf_ugaussian_P:                   The Gaussian Distribution.
                                                              (line  49)
* gsl_cdf_ugaussian_Pinv:                The Gaussian Distribution.
                                                              (line  51)
* gsl_cdf_ugaussian_Q:                   The Gaussian Distribution.
                                                              (line  50)
* gsl_cdf_ugaussian_Qinv:                The Gaussian Distribution.
                                                              (line  52)
* gsl_cdf_weibull_P:                     The Weibull Distribution.
                                                              (line  21)
* gsl_cdf_weibull_Pinv:                  The Weibull Distribution.
                                                              (line  23)
* gsl_cdf_weibull_Q:                     The Weibull Distribution.
                                                              (line  22)
* gsl_cdf_weibull_Qinv:                  The Weibull Distribution.
                                                              (line  24)
* gsl_cheb_alloc:                        Creation and Calculation of Chebyshev Series.
                                                              (line   6)
* gsl_cheb_calc_deriv:                   Derivatives and Integrals.
                                                              (line  12)
* gsl_cheb_calc_integ:                   Derivatives and Integrals.
                                                              (line  18)
* gsl_cheb_coeffs:                       Auxiliary Functions for Chebyshev Series.
                                                              (line  13)
* gsl_cheb_eval:                         Chebyshev Series Evaluation.
                                                              (line   6)
* gsl_cheb_eval_err:                     Chebyshev Series Evaluation.
                                                              (line  10)
* gsl_cheb_eval_n:                       Chebyshev Series Evaluation.
                                                              (line  17)
* gsl_cheb_eval_n_err:                   Chebyshev Series Evaluation.
                                                              (line  22)
* gsl_cheb_free:                         Creation and Calculation of Chebyshev Series.
                                                              (line  10)
* gsl_cheb_init:                         Creation and Calculation of Chebyshev Series.
                                                              (line  13)
* gsl_cheb_order:                        Auxiliary Functions for Chebyshev Series.
                                                              (line   9)
* gsl_cheb_size:                         Auxiliary Functions for Chebyshev Series.
                                                              (line  12)
* gsl_combination_alloc:                 Combination allocation.
                                                              (line   6)
* gsl_combination_calloc:                Combination allocation.
                                                              (line  15)
* gsl_combination_data:                  Combination properties.
                                                              (line  13)
* gsl_combination_fprintf:               Reading and writing combinations.
                                                              (line  27)
* gsl_combination_fread:                 Reading and writing combinations.
                                                              (line  17)
* gsl_combination_free:                  Combination allocation.
                                                              (line  30)
* gsl_combination_fscanf:                Reading and writing combinations.
                                                              (line  36)
* gsl_combination_fwrite:                Reading and writing combinations.
                                                              (line   9)
* gsl_combination_get:                   Accessing combination elements.
                                                              (line   9)
* gsl_combination_init_first:            Combination allocation.
                                                              (line  22)
* gsl_combination_init_last:             Combination allocation.
                                                              (line  26)
* gsl_combination_k:                     Combination properties.
                                                              (line   9)
* gsl_combination_memcpy:                Combination allocation.
                                                              (line  33)
* gsl_combination_n:                     Combination properties.
                                                              (line   6)
* gsl_combination_next:                  Combination functions.
                                                              (line   6)
* gsl_combination_prev:                  Combination functions.
                                                              (line  14)
* gsl_combination_valid:                 Combination properties.
                                                              (line  17)
* gsl_complex_abs:                       Properties of complex numbers.
                                                              (line  10)
* gsl_complex_abs2:                      Properties of complex numbers.
                                                              (line  13)
* gsl_complex_add:                       Complex arithmetic operators.
                                                              (line   6)
* gsl_complex_add_imag:                  Complex arithmetic operators.
                                                              (line  38)
* gsl_complex_add_real:                  Complex arithmetic operators.
                                                              (line  22)
* gsl_complex_arccos:                    Inverse Complex Trigonometric Functions.
                                                              (line  19)
* gsl_complex_arccosh:                   Inverse Complex Hyperbolic Functions.
                                                              (line  11)
* gsl_complex_arccosh_real:              Inverse Complex Hyperbolic Functions.
                                                              (line  18)
* gsl_complex_arccos_real:               Inverse Complex Trigonometric Functions.
                                                              (line  24)
* gsl_complex_arccot:                    Inverse Complex Trigonometric Functions.
                                                              (line  52)
* gsl_complex_arccoth:                   Inverse Complex Hyperbolic Functions.
                                                              (line  39)
* gsl_complex_arccsc:                    Inverse Complex Trigonometric Functions.
                                                              (line  44)
* gsl_complex_arccsch:                   Inverse Complex Hyperbolic Functions.
                                                              (line  35)
* gsl_complex_arccsc_real:               Inverse Complex Trigonometric Functions.
                                                              (line  48)
* gsl_complex_arcsec:                    Inverse Complex Trigonometric Functions.
                                                              (line  36)
* gsl_complex_arcsech:                   Inverse Complex Hyperbolic Functions.
                                                              (line  31)
* gsl_complex_arcsec_real:               Inverse Complex Trigonometric Functions.
                                                              (line  40)
* gsl_complex_arcsin:                    Inverse Complex Trigonometric Functions.
                                                              (line   6)
* gsl_complex_arcsinh:                   Inverse Complex Hyperbolic Functions.
                                                              (line   6)
* gsl_complex_arcsin_real:               Inverse Complex Trigonometric Functions.
                                                              (line  11)
* gsl_complex_arctan:                    Inverse Complex Trigonometric Functions.
                                                              (line  31)
* gsl_complex_arctanh:                   Inverse Complex Hyperbolic Functions.
                                                              (line  22)
* gsl_complex_arctanh_real:              Inverse Complex Hyperbolic Functions.
                                                              (line  27)
* gsl_complex_arg:                       Properties of complex numbers.
                                                              (line   6)
* gsl_complex_conjugate:                 Complex arithmetic operators.
                                                              (line  54)
* gsl_complex_cos:                       Complex Trigonometric Functions.
                                                              (line  10)
* gsl_complex_cosh:                      Complex Hyperbolic Functions.
                                                              (line  10)
* gsl_complex_cot:                       Complex Trigonometric Functions.
                                                              (line  26)
* gsl_complex_coth:                      Complex Hyperbolic Functions.
                                                              (line  26)
* gsl_complex_csc:                       Complex Trigonometric Functions.
                                                              (line  22)
* gsl_complex_csch:                      Complex Hyperbolic Functions.
                                                              (line  22)
* gsl_complex_div:                       Complex arithmetic operators.
                                                              (line  18)
* gsl_complex_div_imag:                  Complex arithmetic operators.
                                                              (line  50)
* gsl_complex_div_real:                  Complex arithmetic operators.
                                                              (line  34)
* gsl_complex_exp:                       Elementary Complex Functions.
                                                              (line  24)
* gsl_complex_inverse:                   Complex arithmetic operators.
                                                              (line  58)
* gsl_complex_log:                       Elementary Complex Functions.
                                                              (line  28)
* gsl_complex_log10:                     Elementary Complex Functions.
                                                              (line  33)
* gsl_complex_logabs:                    Properties of complex numbers.
                                                              (line  17)
* gsl_complex_log_b:                     Elementary Complex Functions.
                                                              (line  37)
* gsl_complex_mul:                       Complex arithmetic operators.
                                                              (line  14)
* gsl_complex_mul_imag:                  Complex arithmetic operators.
                                                              (line  46)
* gsl_complex_mul_real:                  Complex arithmetic operators.
                                                              (line  30)
* gsl_complex_negative:                  Complex arithmetic operators.
                                                              (line  62)
* gsl_complex_polar:                     Representation of complex numbers.
                                                              (line  29)
* gsl_complex_poly_complex_eval:         Polynomial Evaluation.
                                                              (line  21)
* gsl_complex_pow:                       Elementary Complex Functions.
                                                              (line  15)
* gsl_complex_pow_real:                  Elementary Complex Functions.
                                                              (line  20)
* gsl_complex_rect:                      Representation of complex numbers.
                                                              (line  24)
* gsl_complex_sec:                       Complex Trigonometric Functions.
                                                              (line  18)
* gsl_complex_sech:                      Complex Hyperbolic Functions.
                                                              (line  18)
* gsl_complex_sin:                       Complex Trigonometric Functions.
                                                              (line   6)
* gsl_complex_sinh:                      Complex Hyperbolic Functions.
                                                              (line   6)
* gsl_complex_sqrt:                      Elementary Complex Functions.
                                                              (line   6)
* gsl_complex_sqrt_real:                 Elementary Complex Functions.
                                                              (line  11)
* gsl_complex_sub:                       Complex arithmetic operators.
                                                              (line  10)
* gsl_complex_sub_imag:                  Complex arithmetic operators.
                                                              (line  42)
* gsl_complex_sub_real:                  Complex arithmetic operators.
                                                              (line  26)
* gsl_complex_tan:                       Complex Trigonometric Functions.
                                                              (line  14)
* gsl_complex_tanh:                      Complex Hyperbolic Functions.
                                                              (line  14)
* gsl_deriv_backward:                    Numerical Differentiation functions.
                                                              (line  40)
* gsl_deriv_central:                     Numerical Differentiation functions.
                                                              (line   6)
* gsl_deriv_forward:                     Numerical Differentiation functions.
                                                              (line  22)
* gsl_dht_alloc:                         Discrete Hankel Transform Functions.
                                                              (line   6)
* gsl_dht_apply:                         Discrete Hankel Transform Functions.
                                                              (line  22)
* gsl_dht_free:                          Discrete Hankel Transform Functions.
                                                              (line  19)
* gsl_dht_init:                          Discrete Hankel Transform Functions.
                                                              (line  10)
* gsl_dht_k_sample:                      Discrete Hankel Transform Functions.
                                                              (line  36)
* gsl_dht_new:                           Discrete Hankel Transform Functions.
                                                              (line  14)
* gsl_dht_x_sample:                      Discrete Hankel Transform Functions.
                                                              (line  31)
* gsl_eigen_gen:                         Real Generalized Nonsymmetric Eigensystems.
                                                              (line  72)
* gsl_eigen_genherm:                     Complex Generalized Hermitian-Definite Eigensystems.
                                                              (line  27)
* gsl_eigen_genhermv:                    Complex Generalized Hermitian-Definite Eigensystems.
                                                              (line  45)
* gsl_eigen_genhermv_alloc:              Complex Generalized Hermitian-Definite Eigensystems.
                                                              (line  35)
* gsl_eigen_genhermv_free:               Complex Generalized Hermitian-Definite Eigensystems.
                                                              (line  41)
* gsl_eigen_genhermv_sort:               Sorting Eigenvalues and Eigenvectors.
                                                              (line  45)
* gsl_eigen_genherm_alloc:               Complex Generalized Hermitian-Definite Eigensystems.
                                                              (line  17)
* gsl_eigen_genherm_free:                Complex Generalized Hermitian-Definite Eigensystems.
                                                              (line  23)
* gsl_eigen_gensymm:                     Real Generalized Symmetric-Definite Eigensystems.
                                                              (line  32)
* gsl_eigen_gensymmv:                    Real Generalized Symmetric-Definite Eigensystems.
                                                              (line  49)
* gsl_eigen_gensymmv_alloc:              Real Generalized Symmetric-Definite Eigensystems.
                                                              (line  39)
* gsl_eigen_gensymmv_free:               Real Generalized Symmetric-Definite Eigensystems.
                                                              (line  45)
* gsl_eigen_gensymmv_sort:               Sorting Eigenvalues and Eigenvectors.
                                                              (line  38)
* gsl_eigen_gensymm_alloc:               Real Generalized Symmetric-Definite Eigensystems.
                                                              (line  22)
* gsl_eigen_gensymm_free:                Real Generalized Symmetric-Definite Eigensystems.
                                                              (line  28)
* gsl_eigen_genv:                        Real Generalized Nonsymmetric Eigensystems.
                                                              (line 105)
* gsl_eigen_genv_alloc:                  Real Generalized Nonsymmetric Eigensystems.
                                                              (line  96)
* gsl_eigen_genv_free:                   Real Generalized Nonsymmetric Eigensystems.
                                                              (line 102)
* gsl_eigen_genv_QZ:                     Real Generalized Nonsymmetric Eigensystems.
                                                              (line 120)
* gsl_eigen_genv_sort:                   Sorting Eigenvalues and Eigenvectors.
                                                              (line  52)
* gsl_eigen_gen_alloc:                   Real Generalized Nonsymmetric Eigensystems.
                                                              (line  41)
* gsl_eigen_gen_free:                    Real Generalized Nonsymmetric Eigensystems.
                                                              (line  47)
* gsl_eigen_gen_params:                  Real Generalized Nonsymmetric Eigensystems.
                                                              (line  50)
* gsl_eigen_gen_QZ:                      Real Generalized Nonsymmetric Eigensystems.
                                                              (line  89)
* gsl_eigen_herm:                        Complex Hermitian Matrices.
                                                              (line  18)
* gsl_eigen_hermv:                       Complex Hermitian Matrices.
                                                              (line  37)
* gsl_eigen_hermv_alloc:                 Complex Hermitian Matrices.
                                                              (line  28)
* gsl_eigen_hermv_free:                  Complex Hermitian Matrices.
                                                              (line  34)
* gsl_eigen_hermv_sort:                  Sorting Eigenvalues and Eigenvectors.
                                                              (line  22)
* gsl_eigen_herm_alloc:                  Complex Hermitian Matrices.
                                                              (line   9)
* gsl_eigen_herm_free:                   Complex Hermitian Matrices.
                                                              (line  15)
* gsl_eigen_nonsymm:                     Real Nonsymmetric Matrices.
                                                              (line  60)
* gsl_eigen_nonsymmv:                    Real Nonsymmetric Matrices.
                                                              (line  97)
* gsl_eigen_nonsymmv_alloc:              Real Nonsymmetric Matrices.
                                                              (line  78)
* gsl_eigen_nonsymmv_free:               Real Nonsymmetric Matrices.
                                                              (line  84)
* gsl_eigen_nonsymmv_params:             Real Nonsymmetric Matrices.
                                                              (line  88)
* gsl_eigen_nonsymmv_sort:               Sorting Eigenvalues and Eigenvectors.
                                                              (line  29)
* gsl_eigen_nonsymmv_Z:                  Real Nonsymmetric Matrices.
                                                              (line 111)
* gsl_eigen_nonsymm_alloc:               Real Nonsymmetric Matrices.
                                                              (line  17)
* gsl_eigen_nonsymm_free:                Real Nonsymmetric Matrices.
                                                              (line  23)
* gsl_eigen_nonsymm_params:              Real Nonsymmetric Matrices.
                                                              (line  27)
* gsl_eigen_nonsymm_Z:                   Real Nonsymmetric Matrices.
                                                              (line  72)
* gsl_eigen_symm:                        Real Symmetric Matrices.
                                                              (line  21)
* gsl_eigen_symmv:                       Real Symmetric Matrices.
                                                              (line  39)
* gsl_eigen_symmv_alloc:                 Real Symmetric Matrices.
                                                              (line  30)
* gsl_eigen_symmv_free:                  Real Symmetric Matrices.
                                                              (line  36)
* gsl_eigen_symmv_sort:                  Sorting Eigenvalues and Eigenvectors.
                                                              (line   6)
* gsl_eigen_symm_alloc:                  Real Symmetric Matrices.
                                                              (line  12)
* gsl_eigen_symm_free:                   Real Symmetric Matrices.
                                                              (line  18)
* GSL_ERROR:                             Using GSL error reporting in your own functions.
                                                              (line  15)
* GSL_ERROR_VAL:                         Using GSL error reporting in your own functions.
                                                              (line  36)
* gsl_expm1:                             Elementary Functions.
                                                              (line  17)
* gsl_fcmp:                              Approximate Comparison of Floating Point Numbers.
                                                              (line  12)
* gsl_fft_complex_backward:              Mixed-radix FFT routines for complex data.
                                                              (line 124)
* gsl_fft_complex_forward:               Mixed-radix FFT routines for complex data.
                                                              (line 117)
* gsl_fft_complex_inverse:               Mixed-radix FFT routines for complex data.
                                                              (line 127)
* gsl_fft_complex_radix2_backward:       Radix-2 FFT routines for complex data.
                                                              (line  23)
* gsl_fft_complex_radix2_dif_backward:   Radix-2 FFT routines for complex data.
                                                              (line  47)
* gsl_fft_complex_radix2_dif_forward:    Radix-2 FFT routines for complex data.
                                                              (line  40)
* gsl_fft_complex_radix2_dif_inverse:    Radix-2 FFT routines for complex data.
                                                              (line  50)
* gsl_fft_complex_radix2_dif_transform:  Radix-2 FFT routines for complex data.
                                                              (line  43)
* gsl_fft_complex_radix2_forward:        Radix-2 FFT routines for complex data.
                                                              (line  16)
* gsl_fft_complex_radix2_inverse:        Radix-2 FFT routines for complex data.
                                                              (line  26)
* gsl_fft_complex_radix2_transform:      Radix-2 FFT routines for complex data.
                                                              (line  19)
* gsl_fft_complex_transform:             Mixed-radix FFT routines for complex data.
                                                              (line 120)
* gsl_fft_complex_wavetable_alloc:       Mixed-radix FFT routines for complex data.
                                                              (line  44)
* gsl_fft_complex_wavetable_free:        Mixed-radix FFT routines for complex data.
                                                              (line  63)
* gsl_fft_complex_workspace_alloc:       Mixed-radix FFT routines for complex data.
                                                              (line 104)
* gsl_fft_complex_workspace_free:        Mixed-radix FFT routines for complex data.
                                                              (line 109)
* gsl_fft_halfcomplex_radix2_backward:   Radix-2 FFT routines for real data.
                                                              (line  58)
* gsl_fft_halfcomplex_radix2_inverse:    Radix-2 FFT routines for real data.
                                                              (line  56)
* gsl_fft_halfcomplex_radix2_unpack:     Radix-2 FFT routines for real data.
                                                              (line  66)
* gsl_fft_halfcomplex_transform:         Mixed-radix FFT routines for real data.
                                                              (line 122)
* gsl_fft_halfcomplex_unpack:            Mixed-radix FFT routines for real data.
                                                              (line 153)
* gsl_fft_halfcomplex_wavetable_alloc:   Mixed-radix FFT routines for real data.
                                                              (line  74)
* gsl_fft_halfcomplex_wavetable_free:    Mixed-radix FFT routines for real data.
                                                              (line  95)
* gsl_fft_real_radix2_transform:         Radix-2 FFT routines for real data.
                                                              (line  13)
* gsl_fft_real_transform:                Mixed-radix FFT routines for real data.
                                                              (line 119)
* gsl_fft_real_unpack:                   Mixed-radix FFT routines for real data.
                                                              (line 136)
* gsl_fft_real_wavetable_alloc:          Mixed-radix FFT routines for real data.
                                                              (line  72)
* gsl_fft_real_wavetable_free:           Mixed-radix FFT routines for real data.
                                                              (line  93)
* gsl_fft_real_workspace_alloc:          Mixed-radix FFT routines for real data.
                                                              (line 104)
* gsl_fft_real_workspace_free:           Mixed-radix FFT routines for real data.
                                                              (line 110)
* gsl_finite:                            Infinities and Not-a-number.
                                                              (line  25)
* gsl_fit_linear:                        Linear regression with a constant term.
                                                              (line   9)
* gsl_fit_linear_est:                    Linear regression with a constant term.
                                                              (line  42)
* gsl_fit_mul:                           Linear regression without a constant term.
                                                              (line  10)
* gsl_fit_mul_est:                       Linear regression without a constant term.
                                                              (line  36)
* gsl_fit_wlinear:                       Linear regression with a constant term.
                                                              (line  25)
* gsl_fit_wmul:                          Linear regression without a constant term.
                                                              (line  21)
* gsl_frexp:                             Elementary Functions.
                                                              (line  48)
* gsl_heapsort:                          Sorting objects.     (line  16)
* gsl_heapsort_index:                    Sorting objects.     (line  58)
* gsl_histogram2d_accumulate:            Updating and accessing 2D histogram elements.
                                                              (line  25)
* gsl_histogram2d_add:                   2D Histogram Operations.
                                                              (line  11)
* gsl_histogram2d_alloc:                 2D Histogram allocation.
                                                              (line  14)
* gsl_histogram2d_clone:                 Copying 2D Histograms.
                                                              (line  12)
* gsl_histogram2d_cov:                   2D Histogram Statistics.
                                                              (line  52)
* gsl_histogram2d_div:                   2D Histogram Operations.
                                                              (line  31)
* gsl_histogram2d_equal_bins_p:          2D Histogram Operations.
                                                              (line   6)
* gsl_histogram2d_find:                  Searching 2D histogram ranges.
                                                              (line   9)
* gsl_histogram2d_fprintf:               Reading and writing 2D histograms.
                                                              (line  27)
* gsl_histogram2d_fread:                 Reading and writing 2D histograms.
                                                              (line  17)
* gsl_histogram2d_free:                  2D Histogram allocation.
                                                              (line  37)
* gsl_histogram2d_fscanf:                Reading and writing 2D histograms.
                                                              (line  64)
* gsl_histogram2d_fwrite:                Reading and writing 2D histograms.
                                                              (line   9)
* gsl_histogram2d_get:                   Updating and accessing 2D histogram elements.
                                                              (line  31)
* gsl_histogram2d_get_xrange:            Updating and accessing 2D histogram elements.
                                                              (line  38)
* gsl_histogram2d_get_yrange:            Updating and accessing 2D histogram elements.
                                                              (line  40)
* gsl_histogram2d_increment:             Updating and accessing 2D histogram elements.
                                                              (line  12)
* gsl_histogram2d_max_bin:               2D Histogram Statistics.
                                                              (line  10)
* gsl_histogram2d_max_val:               2D Histogram Statistics.
                                                              (line   6)
* gsl_histogram2d_memcpy:                Copying 2D Histograms.
                                                              (line   6)
* gsl_histogram2d_min_bin:               2D Histogram Statistics.
                                                              (line  21)
* gsl_histogram2d_min_val:               2D Histogram Statistics.
                                                              (line  17)
* gsl_histogram2d_mul:                   2D Histogram Operations.
                                                              (line  24)
* gsl_histogram2d_nx:                    Updating and accessing 2D histogram elements.
                                                              (line  55)
* gsl_histogram2d_ny:                    Updating and accessing 2D histogram elements.
                                                              (line  58)
* gsl_histogram2d_pdf_alloc:             Resampling from 2D histograms.
                                                              (line  38)
* gsl_histogram2d_pdf_free:              Resampling from 2D histograms.
                                                              (line  54)
* gsl_histogram2d_pdf_init:              Resampling from 2D histograms.
                                                              (line  46)
* gsl_histogram2d_pdf_sample:            Resampling from 2D histograms.
                                                              (line  58)
* gsl_histogram2d_reset:                 Updating and accessing 2D histogram elements.
                                                              (line  64)
* gsl_histogram2d_scale:                 2D Histogram Operations.
                                                              (line  38)
* gsl_histogram2d_set_ranges:            2D Histogram allocation.
                                                              (line  24)
* gsl_histogram2d_set_ranges_uniform:    2D Histogram allocation.
                                                              (line  31)
* gsl_histogram2d_shift:                 2D Histogram Operations.
                                                              (line  43)
* gsl_histogram2d_sub:                   2D Histogram Operations.
                                                              (line  17)
* gsl_histogram2d_sum:                   2D Histogram Statistics.
                                                              (line  58)
* gsl_histogram2d_xmax:                  Updating and accessing 2D histogram elements.
                                                              (line  53)
* gsl_histogram2d_xmean:                 2D Histogram Statistics.
                                                              (line  28)
* gsl_histogram2d_xmin:                  Updating and accessing 2D histogram elements.
                                                              (line  54)
* gsl_histogram2d_xsigma:                2D Histogram Statistics.
                                                              (line  40)
* gsl_histogram2d_ymax:                  Updating and accessing 2D histogram elements.
                                                              (line  56)
* gsl_histogram2d_ymean:                 2D Histogram Statistics.
                                                              (line  34)
* gsl_histogram2d_ymin:                  Updating and accessing 2D histogram elements.
                                                              (line  57)
* gsl_histogram2d_ysigma:                2D Histogram Statistics.
                                                              (line  46)
* gsl_histogram_accumulate:              Updating and accessing histogram elements.
                                                              (line  25)
* gsl_histogram_add:                     Histogram Operations.
                                                              (line  11)
* gsl_histogram_alloc:                   Histogram allocation.
                                                              (line  14)
* gsl_histogram_bins:                    Updating and accessing histogram elements.
                                                              (line  53)
* gsl_histogram_clone:                   Copying Histograms.  (line  12)
* gsl_histogram_div:                     Histogram Operations.
                                                              (line  30)
* gsl_histogram_equal_bins_p:            Histogram Operations.
                                                              (line   6)
* gsl_histogram_find:                    Searching histogram ranges.
                                                              (line   9)
* gsl_histogram_fprintf:                 Reading and writing histograms.
                                                              (line  26)
* gsl_histogram_fread:                   Reading and writing histograms.
                                                              (line  17)
* gsl_histogram_free:                    Histogram allocation.
                                                              (line  60)
* gsl_histogram_fscanf:                  Reading and writing histograms.
                                                              (line  51)
* gsl_histogram_fwrite:                  Reading and writing histograms.
                                                              (line   9)
* gsl_histogram_get:                     Updating and accessing histogram elements.
                                                              (line  31)
* gsl_histogram_get_range:               Updating and accessing histogram elements.
                                                              (line  38)
* gsl_histogram_increment:               Updating and accessing histogram elements.
                                                              (line  11)
* gsl_histogram_max:                     Updating and accessing histogram elements.
                                                              (line  51)
* gsl_histogram_max_bin:                 Histogram Statistics.
                                                              (line  10)
* gsl_histogram_max_val:                 Histogram Statistics.
                                                              (line   6)
* gsl_histogram_mean:                    Histogram Statistics.
                                                              (line  24)
* gsl_histogram_memcpy:                  Copying Histograms.  (line   6)
* gsl_histogram_min:                     Updating and accessing histogram elements.
                                                              (line  52)
* gsl_histogram_min_bin:                 Histogram Statistics.
                                                              (line  19)
* gsl_histogram_min_val:                 Histogram Statistics.
                                                              (line  15)
* gsl_histogram_mul:                     Histogram Operations.
                                                              (line  23)
* gsl_histogram_pdf_alloc:               The histogram probability distribution struct.
                                                              (line  33)
* gsl_histogram_pdf_free:                The histogram probability distribution struct.
                                                              (line  47)
* gsl_histogram_pdf_init:                The histogram probability distribution struct.
                                                              (line  40)
* gsl_histogram_pdf_sample:              The histogram probability distribution struct.
                                                              (line  51)
* gsl_histogram_reset:                   Updating and accessing histogram elements.
                                                              (line  59)
* gsl_histogram_scale:                   Histogram Operations.
                                                              (line  37)
* gsl_histogram_set_ranges:              Histogram allocation.
                                                              (line  23)
* gsl_histogram_set_ranges_uniform:      Histogram allocation.
                                                              (line  48)
* gsl_histogram_shift:                   Histogram Operations.
                                                              (line  41)
* gsl_histogram_sigma:                   Histogram Statistics.
                                                              (line  30)
* gsl_histogram_sub:                     Histogram Operations.
                                                              (line  17)
* gsl_histogram_sum:                     Histogram Statistics.
                                                              (line  37)
* gsl_hypot:                             Elementary Functions.
                                                              (line  22)
* gsl_hypot3:                            Elementary Functions.
                                                              (line  27)
* gsl_ieee_env_setup:                    Setting up your IEEE environment.
                                                              (line  23)
* gsl_ieee_fprintf_double:               Representation of floating point numbers.
                                                              (line  55)
* gsl_ieee_fprintf_float:                Representation of floating point numbers.
                                                              (line  53)
* gsl_ieee_printf_double:                Representation of floating point numbers.
                                                              (line  82)
* gsl_ieee_printf_float:                 Representation of floating point numbers.
                                                              (line  81)
* GSL_IMAG:                              Representation of complex numbers.
                                                              (line  35)
* gsl_integration_cquad:                 CQUAD doubly-adaptive integration.
                                                              (line  33)
* gsl_integration_cquad_workspace_alloc: CQUAD doubly-adaptive integration.
                                                              (line  20)
* gsl_integration_cquad_workspace_free:  CQUAD doubly-adaptive integration.
                                                              (line  29)
* gsl_integration_glfixed:               Fixed order Gauss-Legendre integration.
                                                              (line  22)
* gsl_integration_glfixed_point:         Fixed order Gauss-Legendre integration.
                                                              (line  27)
* gsl_integration_glfixed_table_alloc:   Fixed order Gauss-Legendre integration.
                                                              (line  14)
* gsl_integration_glfixed_table_free:    Fixed order Gauss-Legendre integration.
                                                              (line  35)
* gsl_integration_qag:                   QAG adaptive integration.
                                                              (line  27)
* gsl_integration_qagi:                  QAGI adaptive integration on infinite intervals.
                                                              (line   6)
* gsl_integration_qagil:                 QAGI adaptive integration on infinite intervals.
                                                              (line  37)
* gsl_integration_qagiu:                 QAGI adaptive integration on infinite intervals.
                                                              (line  22)
* gsl_integration_qagp:                  QAGP adaptive integration with known singular points.
                                                              (line   6)
* gsl_integration_qags:                  QAGS adaptive integration with singularities.
                                                              (line  15)
* gsl_integration_qawc:                  QAWC adaptive integration for Cauchy principal values.
                                                              (line   6)
* gsl_integration_qawf:                  QAWF adaptive integration for Fourier integrals.
                                                              (line   6)
* gsl_integration_qawo:                  QAWO adaptive integration for oscillatory functions.
                                                              (line  53)
* gsl_integration_qawo_table_alloc:      QAWO adaptive integration for oscillatory functions.
                                                              (line  11)
* gsl_integration_qawo_table_free:       QAWO adaptive integration for oscillatory functions.
                                                              (line  49)
* gsl_integration_qawo_table_set:        QAWO adaptive integration for oscillatory functions.
                                                              (line  38)
* gsl_integration_qawo_table_set_length: QAWO adaptive integration for oscillatory functions.
                                                              (line  44)
* gsl_integration_qaws:                  QAWS adaptive integration for singular functions.
                                                              (line  48)
* gsl_integration_qaws_table_alloc:      QAWS adaptive integration for singular functions.
                                                              (line  11)
* gsl_integration_qaws_table_free:       QAWS adaptive integration for singular functions.
                                                              (line  43)
* gsl_integration_qaws_table_set:        QAWS adaptive integration for singular functions.
                                                              (line  37)
* gsl_integration_qng:                   QNG non-adaptive Gauss-Kronrod integration.
                                                              (line  10)
* gsl_integration_workspace_alloc:       QAG adaptive integration.
                                                              (line  15)
* gsl_integration_workspace_free:        QAG adaptive integration.
                                                              (line  23)
* gsl_interp2d_alloc:                    2D Interpolation Functions.
                                                              (line   9)
* gsl_interp2d_bicubic:                  2D Interpolation Types.
                                                              (line  12)
* gsl_interp2d_bilinear:                 2D Interpolation Types.
                                                              (line   8)
* gsl_interp2d_eval:                     2D Evaluation of Interpolating Functions.
                                                              (line   6)
* gsl_interp2d_eval_deriv_x:             2D Evaluation of Interpolating Functions.
                                                              (line  34)
* gsl_interp2d_eval_deriv_xx:            2D Evaluation of Interpolating Functions.
                                                              (line  62)
* gsl_interp2d_eval_deriv_xx_e:          2D Evaluation of Interpolating Functions.
                                                              (line  66)
* gsl_interp2d_eval_deriv_xy:            2D Evaluation of Interpolating Functions.
                                                              (line  90)
* gsl_interp2d_eval_deriv_xy_e:          2D Evaluation of Interpolating Functions.
                                                              (line  94)
* gsl_interp2d_eval_deriv_x_e:           2D Evaluation of Interpolating Functions.
                                                              (line  38)
* gsl_interp2d_eval_deriv_y:             2D Evaluation of Interpolating Functions.
                                                              (line  48)
* gsl_interp2d_eval_deriv_yy:            2D Evaluation of Interpolating Functions.
                                                              (line  76)
* gsl_interp2d_eval_deriv_yy_e:          2D Evaluation of Interpolating Functions.
                                                              (line  80)
* gsl_interp2d_eval_deriv_y_e:           2D Evaluation of Interpolating Functions.
                                                              (line  52)
* gsl_interp2d_eval_e:                   2D Evaluation of Interpolating Functions.
                                                              (line  10)
* gsl_interp2d_eval_extrap:              2D Evaluation of Interpolating Functions.
                                                              (line  20)
* gsl_interp2d_eval_extrap_e:            2D Evaluation of Interpolating Functions.
                                                              (line  24)
* gsl_interp2d_free:                     2D Interpolation Functions.
                                                              (line  28)
* gsl_interp2d_get:                      2D Interpolation Grids.
                                                              (line  21)
* gsl_interp2d_idx:                      2D Interpolation Grids.
                                                              (line  26)
* gsl_interp2d_init:                     2D Interpolation Functions.
                                                              (line  15)
* gsl_interp2d_min_size:                 2D Interpolation Types.
                                                              (line  27)
* gsl_interp2d_name:                     2D Interpolation Types.
                                                              (line  15)
* gsl_interp2d_set:                      2D Interpolation Grids.
                                                              (line  16)
* gsl_interp2d_type_min_size:            2D Interpolation Types.
                                                              (line  29)
* gsl_interp_accel_alloc:                1D Index Look-up and Acceleration.
                                                              (line  19)
* gsl_interp_accel_find:                 1D Index Look-up and Acceleration.
                                                              (line  25)
* gsl_interp_accel_free:                 1D Index Look-up and Acceleration.
                                                              (line  39)
* gsl_interp_accel_reset:                1D Index Look-up and Acceleration.
                                                              (line  34)
* gsl_interp_akima:                      1D Interpolation Types.
                                                              (line  34)
* gsl_interp_akima_periodic:             1D Interpolation Types.
                                                              (line  38)
* gsl_interp_alloc:                      1D Interpolation Functions.
                                                              (line   9)
* gsl_interp_bsearch:                    1D Index Look-up and Acceleration.
                                                              (line  12)
* gsl_interp_cspline:                    1D Interpolation Types.
                                                              (line  19)
* gsl_interp_cspline_periodic:           1D Interpolation Types.
                                                              (line  25)
* gsl_interp_eval:                       1D Evaluation of Interpolating Functions.
                                                              (line   6)
* gsl_interp_eval_deriv:                 1D Evaluation of Interpolating Functions.
                                                              (line  17)
* gsl_interp_eval_deriv2:                1D Evaluation of Interpolating Functions.
                                                              (line  27)
* gsl_interp_eval_deriv2_e:              1D Evaluation of Interpolating Functions.
                                                              (line  30)
* gsl_interp_eval_deriv_e:               1D Evaluation of Interpolating Functions.
                                                              (line  20)
* gsl_interp_eval_e:                     1D Evaluation of Interpolating Functions.
                                                              (line   9)
* gsl_interp_eval_integ:                 1D Evaluation of Interpolating Functions.
                                                              (line  37)
* gsl_interp_eval_integ_e:               1D Evaluation of Interpolating Functions.
                                                              (line  40)
* gsl_interp_free:                       1D Interpolation Functions.
                                                              (line  24)
* gsl_interp_init:                       1D Interpolation Functions.
                                                              (line  14)
* gsl_interp_linear:                     1D Interpolation Types.
                                                              (line   8)
* gsl_interp_min_size:                   1D Interpolation Types.
                                                              (line  64)
* gsl_interp_name:                       1D Interpolation Types.
                                                              (line  53)
* gsl_interp_polynomial:                 1D Interpolation Types.
                                                              (line  12)
* gsl_interp_steffen:                    1D Interpolation Types.
                                                              (line  42)
* gsl_interp_type_min_size:              1D Interpolation Types.
                                                              (line  66)
* gsl_isinf:                             Infinities and Not-a-number.
                                                              (line  21)
* gsl_isnan:                             Infinities and Not-a-number.
                                                              (line  18)
* GSL_IS_EVEN:                           Testing for Odd and Even Numbers.
                                                              (line  10)
* GSL_IS_ODD:                            Testing for Odd and Even Numbers.
                                                              (line   6)
* gsl_ldexp:                             Elementary Functions.
                                                              (line  44)
* gsl_linalg_balance_matrix:             Balancing.           (line  17)
* gsl_linalg_bidiag_decomp:              Bidiagonalization.   (line  15)
* gsl_linalg_bidiag_unpack:              Bidiagonalization.   (line  26)
* gsl_linalg_bidiag_unpack2:             Bidiagonalization.   (line  35)
* gsl_linalg_bidiag_unpack_B:            Bidiagonalization.   (line  42)
* gsl_linalg_cholesky_decomp:            Cholesky Decomposition.
                                                              (line  45)
* gsl_linalg_cholesky_decomp1:           Cholesky Decomposition.
                                                              (line  29)
* gsl_linalg_cholesky_decomp2:           Cholesky Decomposition.
                                                              (line  78)
* gsl_linalg_cholesky_invert:            Cholesky Decomposition.
                                                              (line  69)
* gsl_linalg_cholesky_rcond:             Cholesky Decomposition.
                                                              (line 126)
* gsl_linalg_cholesky_scale:             Cholesky Decomposition.
                                                              (line 111)
* gsl_linalg_cholesky_scale_apply:       Cholesky Decomposition.
                                                              (line 121)
* gsl_linalg_cholesky_solve:             Cholesky Decomposition.
                                                              (line  49)
* gsl_linalg_cholesky_solve2:            Cholesky Decomposition.
                                                              (line  95)
* gsl_linalg_cholesky_svx:               Cholesky Decomposition.
                                                              (line  59)
* gsl_linalg_cholesky_svx2:              Cholesky Decomposition.
                                                              (line 103)
* gsl_linalg_COD_decomp:                 Complete Orthogonal Decomposition.
                                                              (line  25)
* gsl_linalg_COD_decomp_e:               Complete Orthogonal Decomposition.
                                                              (line  28)
* gsl_linalg_COD_lssolve:                Complete Orthogonal Decomposition.
                                                              (line  43)
* gsl_linalg_COD_matZ:                   Complete Orthogonal Decomposition.
                                                              (line  62)
* gsl_linalg_COD_unpack:                 Complete Orthogonal Decomposition.
                                                              (line  55)
* gsl_linalg_complex_cholesky_decomp:    Cholesky Decomposition.
                                                              (line  30)
* gsl_linalg_complex_cholesky_invert:    Cholesky Decomposition.
                                                              (line  70)
* gsl_linalg_complex_cholesky_solve:     Cholesky Decomposition.
                                                              (line  51)
* gsl_linalg_complex_cholesky_svx:       Cholesky Decomposition.
                                                              (line  61)
* gsl_linalg_complex_householder_hm:     Householder Transformations.
                                                              (line  31)
* gsl_linalg_complex_householder_hv:     Householder Transformations.
                                                              (line  47)
* gsl_linalg_complex_householder_mh:     Householder Transformations.
                                                              (line  39)
* gsl_linalg_complex_householder_transform: Householder Transformations.
                                                              (line  18)
* gsl_linalg_complex_LU_decomp:          LU Decomposition.    (line  20)
* gsl_linalg_complex_LU_det:             LU Decomposition.    (line  83)
* gsl_linalg_complex_LU_invert:          LU Decomposition.    (line  71)
* gsl_linalg_complex_LU_lndet:           LU Decomposition.    (line  91)
* gsl_linalg_complex_LU_refine:          LU Decomposition.    (line  61)
* gsl_linalg_complex_LU_sgndet:          LU Decomposition.    (line  99)
* gsl_linalg_complex_LU_solve:           LU Decomposition.    (line  42)
* gsl_linalg_complex_LU_svx:             LU Decomposition.    (line  51)
* gsl_linalg_givens:                     Givens Rotations.    (line  16)
* gsl_linalg_givens_gv:                  Givens Rotations.    (line  22)
* gsl_linalg_hermtd_decomp:              Tridiagonal Decomposition of Hermitian Matrices.
                                                              (line  14)
* gsl_linalg_hermtd_unpack:              Tridiagonal Decomposition of Hermitian Matrices.
                                                              (line  26)
* gsl_linalg_hermtd_unpack_T:            Tridiagonal Decomposition of Hermitian Matrices.
                                                              (line  34)
* gsl_linalg_hessenberg_decomp:          Hessenberg Decomposition of Real Matrices.
                                                              (line  16)
* gsl_linalg_hessenberg_set_zero:        Hessenberg Decomposition of Real Matrices.
                                                              (line  42)
* gsl_linalg_hessenberg_unpack:          Hessenberg Decomposition of Real Matrices.
                                                              (line  27)
* gsl_linalg_hessenberg_unpack_accum:    Hessenberg Decomposition of Real Matrices.
                                                              (line  33)
* gsl_linalg_hesstri_decomp:             Hessenberg-Triangular Decomposition of Real Matrices.
                                                              (line  17)
* gsl_linalg_HH_solve:                   Householder solver for linear systems.
                                                              (line   6)
* gsl_linalg_HH_svx:                     Householder solver for linear systems.
                                                              (line  13)
* gsl_linalg_householder_hm:             Householder Transformations.
                                                              (line  29)
* gsl_linalg_householder_hv:             Householder Transformations.
                                                              (line  45)
* gsl_linalg_householder_mh:             Householder Transformations.
                                                              (line  37)
* gsl_linalg_householder_transform:      Householder Transformations.
                                                              (line  17)
* gsl_linalg_LU_decomp:                  LU Decomposition.    (line  18)
* gsl_linalg_LU_det:                     LU Decomposition.    (line  82)
* gsl_linalg_LU_invert:                  LU Decomposition.    (line  69)
* gsl_linalg_LU_lndet:                   LU Decomposition.    (line  90)
* gsl_linalg_LU_refine:                  LU Decomposition.    (line  58)
* gsl_linalg_LU_sgndet:                  LU Decomposition.    (line  98)
* gsl_linalg_LU_solve:                   LU Decomposition.    (line  40)
* gsl_linalg_LU_svx:                     LU Decomposition.    (line  49)
* gsl_linalg_mcholesky_decomp:           Modified Cholesky Decomposition.
                                                              (line  25)
* gsl_linalg_mcholesky_rcond:            Modified Cholesky Decomposition.
                                                              (line  55)
* gsl_linalg_mcholesky_solve:            Modified Cholesky Decomposition.
                                                              (line  39)
* gsl_linalg_mcholesky_svx:              Modified Cholesky Decomposition.
                                                              (line  47)
* gsl_linalg_pcholesky_decomp:           Pivoted Cholesky Decomposition.
                                                              (line  20)
* gsl_linalg_pcholesky_decomp2:          Pivoted Cholesky Decomposition.
                                                              (line  48)
* gsl_linalg_pcholesky_invert:           Pivoted Cholesky Decomposition.
                                                              (line  83)
* gsl_linalg_pcholesky_rcond:            Pivoted Cholesky Decomposition.
                                                              (line  89)
* gsl_linalg_pcholesky_solve:            Pivoted Cholesky Decomposition.
                                                              (line  32)
* gsl_linalg_pcholesky_solve2:           Pivoted Cholesky Decomposition.
                                                              (line  65)
* gsl_linalg_pcholesky_svx:              Pivoted Cholesky Decomposition.
                                                              (line  40)
* gsl_linalg_pcholesky_svx2:             Pivoted Cholesky Decomposition.
                                                              (line  73)
* gsl_linalg_QRPT_decomp:                QR Decomposition with Column Pivoting.
                                                              (line  31)
* gsl_linalg_QRPT_decomp2:               QR Decomposition with Column Pivoting.
                                                              (line  52)
* gsl_linalg_QRPT_lssolve:               QR Decomposition with Column Pivoting.
                                                              (line  73)
* gsl_linalg_QRPT_lssolve2:              QR Decomposition with Column Pivoting.
                                                              (line  86)
* gsl_linalg_QRPT_QRsolve:               QR Decomposition with Column Pivoting.
                                                              (line 100)
* gsl_linalg_QRPT_rank:                  QR Decomposition with Column Pivoting.
                                                              (line 127)
* gsl_linalg_QRPT_rcond:                 QR Decomposition with Column Pivoting.
                                                              (line 135)
* gsl_linalg_QRPT_Rsolve:                QR Decomposition with Column Pivoting.
                                                              (line 116)
* gsl_linalg_QRPT_Rsvx:                  QR Decomposition with Column Pivoting.
                                                              (line 121)
* gsl_linalg_QRPT_solve:                 QR Decomposition with Column Pivoting.
                                                              (line  59)
* gsl_linalg_QRPT_svx:                   QR Decomposition with Column Pivoting.
                                                              (line  66)
* gsl_linalg_QRPT_update:                QR Decomposition with Column Pivoting.
                                                              (line 107)
* gsl_linalg_QR_decomp:                  QR Decomposition.    (line  19)
* gsl_linalg_QR_lssolve:                 QR Decomposition.    (line  50)
* gsl_linalg_QR_QRsolve:                 QR Decomposition.    (line 102)
* gsl_linalg_QR_QTmat:                   QR Decomposition.    (line  76)
* gsl_linalg_QR_QTvec:                   QR Decomposition.    (line  61)
* gsl_linalg_QR_Qvec:                    QR Decomposition.    (line  69)
* gsl_linalg_QR_Rsolve:                  QR Decomposition.    (line  84)
* gsl_linalg_QR_Rsvx:                    QR Decomposition.    (line  90)
* gsl_linalg_QR_solve:                   QR Decomposition.    (line  35)
* gsl_linalg_QR_svx:                     QR Decomposition.    (line  42)
* gsl_linalg_QR_unpack:                  QR Decomposition.    (line  97)
* gsl_linalg_QR_update:                  QR Decomposition.    (line 108)
* gsl_linalg_R_solve:                    QR Decomposition.    (line 115)
* gsl_linalg_R_svx:                      QR Decomposition.    (line 120)
* gsl_linalg_solve_cyc_tridiag:          Tridiagonal Systems. (line  39)
* gsl_linalg_solve_symm_cyc_tridiag:     Tridiagonal Systems. (line  53)
* gsl_linalg_solve_symm_tridiag:         Tridiagonal Systems. (line  26)
* gsl_linalg_solve_tridiag:              Tridiagonal Systems. (line  13)
* gsl_linalg_SV_decomp:                  Singular Value Decomposition.
                                                              (line  37)
* gsl_linalg_SV_decomp_jacobi:           Singular Value Decomposition.
                                                              (line  56)
* gsl_linalg_SV_decomp_mod:              Singular Value Decomposition.
                                                              (line  50)
* gsl_linalg_SV_leverage:                Singular Value Decomposition.
                                                              (line  79)
* gsl_linalg_SV_solve:                   Singular Value Decomposition.
                                                              (line  63)
* gsl_linalg_symmtd_decomp:              Tridiagonal Decomposition of Real Symmetric Matrices.
                                                              (line  13)
* gsl_linalg_symmtd_unpack:              Tridiagonal Decomposition of Real Symmetric Matrices.
                                                              (line  24)
* gsl_linalg_symmtd_unpack_T:            Tridiagonal Decomposition of Real Symmetric Matrices.
                                                              (line  32)
* gsl_linalg_tri_lower_invert:           Triangular Systems.  (line   7)
* gsl_linalg_tri_lower_rcond:            Triangular Systems.  (line  20)
* gsl_linalg_tri_lower_unit_invert:      Triangular Systems.  (line   9)
* gsl_linalg_tri_upper_invert:           Triangular Systems.  (line   6)
* gsl_linalg_tri_upper_rcond:            Triangular Systems.  (line  18)
* gsl_linalg_tri_upper_unit_invert:      Triangular Systems.  (line   8)
* gsl_log1p:                             Elementary Functions.
                                                              (line  12)
* gsl_matrix_add:                        Matrix operations.   (line   8)
* gsl_matrix_add_constant:               Matrix operations.   (line  38)
* gsl_matrix_alloc:                      Matrix allocation.   (line  14)
* gsl_matrix_calloc:                     Matrix allocation.   (line  21)
* gsl_matrix_column:                     Creating row and column views.
                                                              (line  24)
* gsl_matrix_const_column:               Creating row and column views.
                                                              (line  26)
* gsl_matrix_const_diagonal:             Creating row and column views.
                                                              (line  63)
* gsl_matrix_const_ptr:                  Accessing matrix elements.
                                                              (line  36)
* gsl_matrix_const_row:                  Creating row and column views.
                                                              (line  14)
* gsl_matrix_const_subcolumn:            Creating row and column views.
                                                              (line  51)
* gsl_matrix_const_subdiagonal:          Creating row and column views.
                                                              (line  76)
* gsl_matrix_const_submatrix:            Matrix views.        (line  20)
* gsl_matrix_const_subrow:               Creating row and column views.
                                                              (line  38)
* gsl_matrix_const_superdiagonal:        Creating row and column views.
                                                              (line  88)
* gsl_matrix_const_view_array:           Matrix views.        (line  51)
* gsl_matrix_const_view_array_with_tda:  Matrix views.        (line  75)
* gsl_matrix_const_view_vector:          Matrix views.        (line 101)
* gsl_matrix_const_view_vector_with_tda: Matrix views.        (line 125)
* gsl_matrix_diagonal:                   Creating row and column views.
                                                              (line  62)
* gsl_matrix_div_elements:               Matrix operations.   (line  27)
* gsl_matrix_equal:                      Matrix properties.   (line  20)
* gsl_matrix_fprintf:                    Reading and writing matrices.
                                                              (line  26)
* gsl_matrix_fread:                      Reading and writing matrices.
                                                              (line  17)
* gsl_matrix_free:                       Matrix allocation.   (line  25)
* gsl_matrix_fscanf:                     Reading and writing matrices.
                                                              (line  34)
* gsl_matrix_fwrite:                     Reading and writing matrices.
                                                              (line   9)
* gsl_matrix_get:                        Accessing matrix elements.
                                                              (line  20)
* gsl_matrix_get_col:                    Copying rows and columns.
                                                              (line  19)
* gsl_matrix_get_row:                    Copying rows and columns.
                                                              (line  13)
* gsl_matrix_isneg:                      Matrix properties.   (line  12)
* gsl_matrix_isnonneg:                   Matrix properties.   (line  13)
* gsl_matrix_isnull:                     Matrix properties.   (line  10)
* gsl_matrix_ispos:                      Matrix properties.   (line  11)
* gsl_matrix_max:                        Finding maximum and minimum elements of matrices.
                                                              (line   8)
* gsl_matrix_max_index:                  Finding maximum and minimum elements of matrices.
                                                              (line  19)
* gsl_matrix_memcpy:                     Copying matrices.    (line   6)
* gsl_matrix_min:                        Finding maximum and minimum elements of matrices.
                                                              (line  11)
* gsl_matrix_minmax:                     Finding maximum and minimum elements of matrices.
                                                              (line  14)
* gsl_matrix_minmax_index:               Finding maximum and minimum elements of matrices.
                                                              (line  33)
* gsl_matrix_min_index:                  Finding maximum and minimum elements of matrices.
                                                              (line  26)
* gsl_matrix_mul_elements:               Matrix operations.   (line  20)
* gsl_matrix_ptr:                        Accessing matrix elements.
                                                              (line  34)
* gsl_matrix_row:                        Creating row and column views.
                                                              (line  13)
* gsl_matrix_scale:                      Matrix operations.   (line  34)
* gsl_matrix_set:                        Accessing matrix elements.
                                                              (line  27)
* gsl_matrix_set_all:                    Initializing matrix elements.
                                                              (line   6)
* gsl_matrix_set_col:                    Copying rows and columns.
                                                              (line  31)
* gsl_matrix_set_identity:               Initializing matrix elements.
                                                              (line  12)
* gsl_matrix_set_row:                    Copying rows and columns.
                                                              (line  25)
* gsl_matrix_set_zero:                   Initializing matrix elements.
                                                              (line   9)
* gsl_matrix_sub:                        Matrix operations.   (line  14)
* gsl_matrix_subcolumn:                  Creating row and column views.
                                                              (line  49)
* gsl_matrix_subdiagonal:                Creating row and column views.
                                                              (line  74)
* gsl_matrix_submatrix:                  Matrix views.        (line  18)
* gsl_matrix_subrow:                     Creating row and column views.
                                                              (line  36)
* gsl_matrix_superdiagonal:              Creating row and column views.
                                                              (line  86)
* gsl_matrix_swap:                       Copying matrices.    (line  11)
* gsl_matrix_swap_columns:               Exchanging rows and columns.
                                                              (line  14)
* gsl_matrix_swap_rowcol:                Exchanging rows and columns.
                                                              (line  19)
* gsl_matrix_swap_rows:                  Exchanging rows and columns.
                                                              (line   9)
* gsl_matrix_transpose:                  Exchanging rows and columns.
                                                              (line  32)
* gsl_matrix_transpose_memcpy:           Exchanging rows and columns.
                                                              (line  25)
* gsl_matrix_view_array:                 Matrix views.        (line  49)
* gsl_matrix_view_array_with_tda:        Matrix views.        (line  73)
* gsl_matrix_view_vector:                Matrix views.        (line  99)
* gsl_matrix_view_vector_with_tda:       Matrix views.        (line 123)
* GSL_MAX:                               Maximum and Minimum functions.
                                                              (line  10)
* GSL_MAX_DBL:                           Maximum and Minimum functions.
                                                              (line  18)
* GSL_MAX_INT:                           Maximum and Minimum functions.
                                                              (line  32)
* GSL_MAX_LDBL:                          Maximum and Minimum functions.
                                                              (line  39)
* GSL_MIN:                               Maximum and Minimum functions.
                                                              (line  14)
* GSL_MIN_DBL:                           Maximum and Minimum functions.
                                                              (line  25)
* gsl_min_fminimizer_alloc:              Initializing the Minimizer.
                                                              (line   6)
* gsl_min_fminimizer_brent:              Minimization Algorithms.
                                                              (line  30)
* gsl_min_fminimizer_free:               Initializing the Minimizer.
                                                              (line  39)
* gsl_min_fminimizer_f_lower:            Minimization Iteration.
                                                              (line  45)
* gsl_min_fminimizer_f_minimum:          Minimization Iteration.
                                                              (line  41)
* gsl_min_fminimizer_f_upper:            Minimization Iteration.
                                                              (line  43)
* gsl_min_fminimizer_goldensection:      Minimization Algorithms.
                                                              (line  13)
* gsl_min_fminimizer_iterate:            Minimization Iteration.
                                                              (line  12)
* gsl_min_fminimizer_name:               Initializing the Minimizer.
                                                              (line  42)
* gsl_min_fminimizer_quad_golden:        Minimization Algorithms.
                                                              (line  46)
* gsl_min_fminimizer_set:                Initializing the Minimizer.
                                                              (line  21)
* gsl_min_fminimizer_set_with_values:    Initializing the Minimizer.
                                                              (line  31)
* gsl_min_fminimizer_x_lower:            Minimization Iteration.
                                                              (line  36)
* gsl_min_fminimizer_x_minimum:          Minimization Iteration.
                                                              (line  29)
* gsl_min_fminimizer_x_upper:            Minimization Iteration.
                                                              (line  34)
* GSL_MIN_INT:                           Maximum and Minimum functions.
                                                              (line  33)
* GSL_MIN_LDBL:                          Maximum and Minimum functions.
                                                              (line  41)
* gsl_min_test_interval:                 Minimization Stopping Parameters.
                                                              (line  18)
* gsl_monte_miser_alloc:                 MISER.               (line  45)
* gsl_monte_miser_free:                  MISER.               (line  68)
* gsl_monte_miser_init:                  MISER.               (line  50)
* gsl_monte_miser_integrate:             MISER.               (line  55)
* gsl_monte_miser_params_get:            MISER.               (line  75)
* gsl_monte_miser_params_set:            MISER.               (line  80)
* gsl_monte_plain_alloc:                 PLAIN Monte Carlo.   (line  29)
* gsl_monte_plain_free:                  PLAIN Monte Carlo.   (line  51)
* gsl_monte_plain_init:                  PLAIN Monte Carlo.   (line  33)
* gsl_monte_plain_integrate:             PLAIN Monte Carlo.   (line  38)
* gsl_monte_vegas_alloc:                 VEGAS.               (line  50)
* gsl_monte_vegas_chisq:                 VEGAS.               (line 113)
* gsl_monte_vegas_free:                  VEGAS.               (line  77)
* gsl_monte_vegas_init:                  VEGAS.               (line  55)
* gsl_monte_vegas_integrate:             VEGAS.               (line  60)
* gsl_monte_vegas_params_get:            VEGAS.               (line 131)
* gsl_monte_vegas_params_set:            VEGAS.               (line 136)
* gsl_monte_vegas_runval:                VEGAS.               (line 122)
* gsl_multifit_linear:                   Multi-parameter regression.
                                                              (line  65)
* gsl_multifit_linear_alloc:             Multi-parameter regression.
                                                              (line  42)
* gsl_multifit_linear_applyW:            Regularized regression.
                                                              (line 205)
* gsl_multifit_linear_bsvd:              Multi-parameter regression.
                                                              (line  58)
* gsl_multifit_linear_est:               Multi-parameter regression.
                                                              (line 136)
* gsl_multifit_linear_free:              Multi-parameter regression.
                                                              (line  49)
* gsl_multifit_linear_gcv(const:         Regularized regression.
                                                              (line 301)
* gsl_multifit_linear_gcv_calc(const:    Regularized regression.
                                                              (line 295)
* gsl_multifit_linear_gcv_curve(const:   Regularized regression.
                                                              (line 277)
* gsl_multifit_linear_gcv_init(const:    Regularized regression.
                                                              (line 267)
* gsl_multifit_linear_gcv_min(const:     Regularized regression.
                                                              (line 285)
* gsl_multifit_linear_genform1:          Regularized regression.
                                                              (line 177)
* gsl_multifit_linear_genform2:          Regularized regression.
                                                              (line 187)
* gsl_multifit_linear_lcorner:           Regularized regression.
                                                              (line 232)
* gsl_multifit_linear_lcorner2:          Regularized regression.
                                                              (line 247)
* gsl_multifit_linear_lcurve:            Regularized regression.
                                                              (line 215)
* gsl_multifit_linear_Lk:                Regularized regression.
                                                              (line 312)
* gsl_multifit_linear_Lsobolev:          Regularized regression.
                                                              (line 318)
* gsl_multifit_linear_L_decomp:          Regularized regression.
                                                              (line 126)
* gsl_multifit_linear_rank:              Multi-parameter regression.
                                                              (line 149)
* gsl_multifit_linear_rcond:             Regularized regression.
                                                              (line 332)
* gsl_multifit_linear_residuals:         Multi-parameter regression.
                                                              (line 144)
* gsl_multifit_linear_solve:             Regularized regression.
                                                              (line 159)
* gsl_multifit_linear_stdform1:          Regularized regression.
                                                              (line 103)
* gsl_multifit_linear_stdform2:          Regularized regression.
                                                              (line 137)
* gsl_multifit_linear_svd:               Multi-parameter regression.
                                                              (line  53)
* gsl_multifit_linear_tsvd:              Multi-parameter regression.
                                                              (line  85)
* gsl_multifit_linear_wgenform2:         Regularized regression.
                                                              (line 191)
* gsl_multifit_linear_wstdform1:         Regularized regression.
                                                              (line 106)
* gsl_multifit_linear_wstdform2:         Regularized regression.
                                                              (line 141)
* gsl_multifit_nlinear_alloc:            Nonlinear Least-Squares Initialization.
                                                              (line   6)
* gsl_multifit_nlinear_covar:            Nonlinear Least-Squares Covariance Matrix.
                                                              (line   6)
* gsl_multifit_nlinear_default_parameters: Nonlinear Least-Squares Initialization.
                                                              (line  43)
* gsl_multifit_nlinear_driver:           Nonlinear Least-Squares High Level Driver.
                                                              (line   9)
* gsl_multifit_nlinear_free:             Nonlinear Least-Squares Initialization.
                                                              (line  73)
* gsl_multifit_nlinear_init:             Nonlinear Least-Squares Initialization.
                                                              (line  52)
* gsl_multifit_nlinear_iterate:          Nonlinear Least-Squares Iteration.
                                                              (line  10)
* gsl_multifit_nlinear_jac:              Nonlinear Least-Squares Iteration.
                                                              (line  54)
* gsl_multifit_nlinear_name:             Nonlinear Least-Squares Initialization.
                                                              (line  80)
* gsl_multifit_nlinear_niter:            Nonlinear Least-Squares Iteration.
                                                              (line  60)
* gsl_multifit_nlinear_position:         Nonlinear Least-Squares Iteration.
                                                              (line  39)
* gsl_multifit_nlinear_rcond:            Nonlinear Least-Squares Iteration.
                                                              (line  68)
* gsl_multifit_nlinear_residual:         Nonlinear Least-Squares Iteration.
                                                              (line  46)
* gsl_multifit_nlinear_test:             Nonlinear Least-Squares Testing for Convergence.
                                                              (line  19)
* gsl_multifit_nlinear_trs_name:         Nonlinear Least-Squares Initialization.
                                                              (line  92)
* gsl_multifit_nlinear_winit:            Nonlinear Least-Squares Initialization.
                                                              (line  55)
* gsl_multifit_robust:                   Robust linear regression.
                                                              (line 178)
* gsl_multifit_robust_alloc:             Robust linear regression.
                                                              (line  70)
* gsl_multifit_robust_bisquare:          Robust linear regression.
                                                              (line  82)
* gsl_multifit_robust_cauchy:            Robust linear regression.
                                                              (line  91)
* gsl_multifit_robust_default:           Robust linear regression.
                                                              (line  77)
* gsl_multifit_robust_est:               Robust linear regression.
                                                              (line 198)
* gsl_multifit_robust_fair:              Robust linear regression.
                                                              (line 102)
* gsl_multifit_robust_free:              Robust linear regression.
                                                              (line 143)
* gsl_multifit_robust_huber:             Robust linear regression.
                                                              (line 111)
* gsl_multifit_robust_maxiter:           Robust linear regression.
                                                              (line 160)
* gsl_multifit_robust_name:              Robust linear regression.
                                                              (line 147)
* gsl_multifit_robust_ols:               Robust linear regression.
                                                              (line 124)
* gsl_multifit_robust_residuals:         Robust linear regression.
                                                              (line 206)
* gsl_multifit_robust_statistics:        Robust linear regression.
                                                              (line 216)
* gsl_multifit_robust_tune:              Robust linear regression.
                                                              (line 152)
* gsl_multifit_robust_weights:           Robust linear regression.
                                                              (line 166)
* gsl_multifit_robust_welsch:            Robust linear regression.
                                                              (line 134)
* gsl_multifit_wlinear:                  Multi-parameter regression.
                                                              (line 103)
* gsl_multifit_wlinear_tsvd:             Multi-parameter regression.
                                                              (line 118)
* gsl_multilarge_linear_accumulate:      Large Dense Linear Systems Routines.
                                                              (line  89)
* gsl_multilarge_linear_alloc:           Large Dense Linear Systems Routines.
                                                              (line   6)
* gsl_multilarge_linear_free:            Large Dense Linear Systems Routines.
                                                              (line  29)
* gsl_multilarge_linear_genform1:        Large Dense Linear Systems Routines.
                                                              (line 107)
* gsl_multilarge_linear_genform2:        Large Dense Linear Systems Routines.
                                                              (line 117)
* gsl_multilarge_linear_lcurve:          Large Dense Linear Systems Routines.
                                                              (line 125)
* gsl_multilarge_linear_L_decomp:        Large Dense Linear Systems Routines.
                                                              (line  63)
* gsl_multilarge_linear_name:            Large Dense Linear Systems Routines.
                                                              (line  33)
* gsl_multilarge_linear_normal:          Large Dense Linear Systems Routines.
                                                              (line  15)
* gsl_multilarge_linear_rcond:           Large Dense Linear Systems Routines.
                                                              (line 141)
* gsl_multilarge_linear_reset:           Large Dense Linear Systems Routines.
                                                              (line  38)
* gsl_multilarge_linear_solve:           Large Dense Linear Systems Routines.
                                                              (line  97)
* gsl_multilarge_linear_stdform1:        Large Dense Linear Systems Routines.
                                                              (line  43)
* gsl_multilarge_linear_stdform2:        Large Dense Linear Systems Routines.
                                                              (line  71)
* gsl_multilarge_linear_tsqr:            Large Dense Linear Systems Routines.
                                                              (line  22)
* gsl_multilarge_linear_wstdform1:       Large Dense Linear Systems Routines.
                                                              (line  46)
* gsl_multilarge_linear_wstdform2:       Large Dense Linear Systems Routines.
                                                              (line  75)
* gsl_multilarge_nlinear_alloc:          Nonlinear Least-Squares Initialization.
                                                              (line  10)
* gsl_multilarge_nlinear_covar:          Nonlinear Least-Squares Covariance Matrix.
                                                              (line   8)
* gsl_multilarge_nlinear_default_parameters: Nonlinear Least-Squares Initialization.
                                                              (line  45)
* gsl_multilarge_nlinear_driver:         Nonlinear Least-Squares High Level Driver.
                                                              (line  14)
* gsl_multilarge_nlinear_free:           Nonlinear Least-Squares Initialization.
                                                              (line  75)
* gsl_multilarge_nlinear_init:           Nonlinear Least-Squares Initialization.
                                                              (line  58)
* gsl_multilarge_nlinear_iterate:        Nonlinear Least-Squares Iteration.
                                                              (line  12)
* gsl_multilarge_nlinear_name:           Nonlinear Least-Squares Initialization.
                                                              (line  82)
* gsl_multilarge_nlinear_niter:          Nonlinear Least-Squares Iteration.
                                                              (line  62)
* gsl_multilarge_nlinear_position:       Nonlinear Least-Squares Iteration.
                                                              (line  41)
* gsl_multilarge_nlinear_rcond:          Nonlinear Least-Squares Iteration.
                                                              (line  70)
* gsl_multilarge_nlinear_residual:       Nonlinear Least-Squares Iteration.
                                                              (line  48)
* gsl_multilarge_nlinear_test:           Nonlinear Least-Squares Testing for Convergence.
                                                              (line  22)
* gsl_multilarge_nlinear_trs_name:       Nonlinear Least-Squares Initialization.
                                                              (line  94)
* gsl_multilarge_nlinear_winit:          Nonlinear Least-Squares Initialization.
                                                              (line  61)
* gsl_multimin_fdfminimizer_alloc:       Initializing the Multidimensional Minimizer.
                                                              (line  10)
* gsl_multimin_fdfminimizer_conjugate_fr: Multimin Algorithms with Derivatives.
                                                              (line  11)
* gsl_multimin_fdfminimizer_conjugate_pr: Multimin Algorithms with Derivatives.
                                                              (line  28)
* gsl_multimin_fdfminimizer_dx:          Multimin Iteration.  (line  36)
* gsl_multimin_fdfminimizer_free:        Initializing the Multidimensional Minimizer.
                                                              (line  46)
* gsl_multimin_fdfminimizer_gradient:    Multimin Iteration.  (line  34)
* gsl_multimin_fdfminimizer_iterate:     Multimin Iteration.  (line  11)
* gsl_multimin_fdfminimizer_minimum:     Multimin Iteration.  (line  30)
* gsl_multimin_fdfminimizer_name:        Initializing the Multidimensional Minimizer.
                                                              (line  52)
* gsl_multimin_fdfminimizer_restart:     Multimin Iteration.  (line  45)
* gsl_multimin_fdfminimizer_set:         Initializing the Multidimensional Minimizer.
                                                              (line  21)
* gsl_multimin_fdfminimizer_steepest_descent: Multimin Algorithms with Derivatives.
                                                              (line  55)
* gsl_multimin_fdfminimizer_vector_bfgs: Multimin Algorithms with Derivatives.
                                                              (line  36)
* gsl_multimin_fdfminimizer_vector_bfgs2: Multimin Algorithms with Derivatives.
                                                              (line  35)
* gsl_multimin_fdfminimizer_x:           Multimin Iteration.  (line  26)
* gsl_multimin_fminimizer_alloc:         Initializing the Multidimensional Minimizer.
                                                              (line  13)
* gsl_multimin_fminimizer_free:          Initializing the Multidimensional Minimizer.
                                                              (line  48)
* gsl_multimin_fminimizer_iterate:       Multimin Iteration.  (line  13)
* gsl_multimin_fminimizer_minimum:       Multimin Iteration.  (line  32)
* gsl_multimin_fminimizer_name:          Initializing the Multidimensional Minimizer.
                                                              (line  54)
* gsl_multimin_fminimizer_nmsimplex:     Multimin Algorithms without Derivatives.
                                                              (line  10)
* gsl_multimin_fminimizer_nmsimplex2:    Multimin Algorithms without Derivatives.
                                                              (line   9)
* gsl_multimin_fminimizer_nmsimplex2rand: Multimin Algorithms without Derivatives.
                                                              (line  49)
* gsl_multimin_fminimizer_set:           Initializing the Multidimensional Minimizer.
                                                              (line  24)
* gsl_multimin_fminimizer_size:          Multimin Iteration.  (line  38)
* gsl_multimin_fminimizer_x:             Multimin Iteration.  (line  28)
* gsl_multimin_test_gradient:            Multimin Stopping Criteria.
                                                              (line  18)
* gsl_multimin_test_size:                Multimin Stopping Criteria.
                                                              (line  32)
* gsl_multiroot_fdfsolver_alloc:         Initializing the Multidimensional Solver.
                                                              (line  27)
* gsl_multiroot_fdfsolver_dx:            Iteration of the multidimensional solver.
                                                              (line  48)
* gsl_multiroot_fdfsolver_f:             Iteration of the multidimensional solver.
                                                              (line  41)
* gsl_multiroot_fdfsolver_free:          Initializing the Multidimensional Solver.
                                                              (line  54)
* gsl_multiroot_fdfsolver_gnewton:       Algorithms using Derivatives.
                                                              (line  90)
* gsl_multiroot_fdfsolver_hybridj:       Algorithms using Derivatives.
                                                              (line  64)
* gsl_multiroot_fdfsolver_hybridsj:      Algorithms using Derivatives.
                                                              (line  13)
* gsl_multiroot_fdfsolver_iterate:       Iteration of the multidimensional solver.
                                                              (line  14)
* gsl_multiroot_fdfsolver_name:          Initializing the Multidimensional Solver.
                                                              (line  60)
* gsl_multiroot_fdfsolver_newton:        Algorithms using Derivatives.
                                                              (line  70)
* gsl_multiroot_fdfsolver_root:          Iteration of the multidimensional solver.
                                                              (line  34)
* gsl_multiroot_fdfsolver_set:           Initializing the Multidimensional Solver.
                                                              (line  45)
* gsl_multiroot_fsolver_alloc:           Initializing the Multidimensional Solver.
                                                              (line  11)
* gsl_multiroot_fsolver_broyden:         Algorithms without Derivatives.
                                                              (line  45)
* gsl_multiroot_fsolver_dnewton:         Algorithms without Derivatives.
                                                              (line  25)
* gsl_multiroot_fsolver_dx:              Iteration of the multidimensional solver.
                                                              (line  46)
* gsl_multiroot_fsolver_f:               Iteration of the multidimensional solver.
                                                              (line  39)
* gsl_multiroot_fsolver_free:            Initializing the Multidimensional Solver.
                                                              (line  52)
* gsl_multiroot_fsolver_hybrid:          Algorithms without Derivatives.
                                                              (line  21)
* gsl_multiroot_fsolver_hybrids:         Algorithms without Derivatives.
                                                              (line  13)
* gsl_multiroot_fsolver_iterate:         Iteration of the multidimensional solver.
                                                              (line  12)
* gsl_multiroot_fsolver_name:            Initializing the Multidimensional Solver.
                                                              (line  58)
* gsl_multiroot_fsolver_root:            Iteration of the multidimensional solver.
                                                              (line  32)
* gsl_multiroot_fsolver_set:             Initializing the Multidimensional Solver.
                                                              (line  43)
* gsl_multiroot_test_delta:              Search Stopping Parameters for the multidimensional solver.
                                                              (line  20)
* gsl_multiroot_test_residual:           Search Stopping Parameters for the multidimensional solver.
                                                              (line  32)
* gsl_multiset_alloc:                    Multiset allocation. (line   6)
* gsl_multiset_calloc:                   Multiset allocation. (line  14)
* gsl_multiset_data:                     Multiset properties. (line  12)
* gsl_multiset_fprintf:                  Reading and writing multisets.
                                                              (line  26)
* gsl_multiset_fread:                    Reading and writing multisets.
                                                              (line  17)
* gsl_multiset_free:                     Multiset allocation. (line  28)
* gsl_multiset_fscanf:                   Reading and writing multisets.
                                                              (line  35)
* gsl_multiset_fwrite:                   Reading and writing multisets.
                                                              (line   9)
* gsl_multiset_get:                      Accessing multiset elements.
                                                              (line   8)
* gsl_multiset_init_first:               Multiset allocation. (line  20)
* gsl_multiset_init_last:                Multiset allocation. (line  24)
* gsl_multiset_k:                        Multiset properties. (line   9)
* gsl_multiset_memcpy:                   Multiset allocation. (line  31)
* gsl_multiset_n:                        Multiset properties. (line   6)
* gsl_multiset_next:                     Multiset functions.  (line   6)
* gsl_multiset_prev:                     Multiset functions.  (line  14)
* gsl_multiset_valid:                    Multiset properties. (line  16)
* gsl_ntuple_bookdata:                   Writing ntuples.     (line  10)
* gsl_ntuple_close:                      Closing an ntuple file.
                                                              (line   6)
* gsl_ntuple_create:                     Creating ntuples.    (line   6)
* gsl_ntuple_open:                       Opening an existing ntuple file.
                                                              (line   6)
* gsl_ntuple_project:                    Histogramming ntuple values.
                                                              (line  35)
* gsl_ntuple_read:                       Reading ntuples.     (line   6)
* gsl_ntuple_write:                      Writing ntuples.     (line   6)
* gsl_odeiv2_control_alloc:              Adaptive Step-size Control.
                                                              (line  73)
* gsl_odeiv2_control_errlevel:           Adaptive Step-size Control.
                                                              (line 115)
* gsl_odeiv2_control_free:               Adaptive Step-size Control.
                                                              (line  86)
* gsl_odeiv2_control_hadjust:            Adaptive Step-size Control.
                                                              (line  90)
* gsl_odeiv2_control_init:               Adaptive Step-size Control.
                                                              (line  80)
* gsl_odeiv2_control_name:               Adaptive Step-size Control.
                                                              (line 105)
* gsl_odeiv2_control_scaled_new:         Adaptive Step-size Control.
                                                              (line  60)
* gsl_odeiv2_control_set_driver:         Adaptive Step-size Control.
                                                              (line 122)
* gsl_odeiv2_control_standard_new:       Adaptive Step-size Control.
                                                              (line  10)
* gsl_odeiv2_control_yp_new:             Adaptive Step-size Control.
                                                              (line  52)
* gsl_odeiv2_control_y_new:              Adaptive Step-size Control.
                                                              (line  44)
* gsl_odeiv2_driver_alloc_scaled_new:    Driver.              (line  19)
* gsl_odeiv2_driver_alloc_standard_new:  Driver.              (line  15)
* gsl_odeiv2_driver_alloc_yp_new:        Driver.              (line  12)
* gsl_odeiv2_driver_alloc_y_new:         Driver.              (line   9)
* gsl_odeiv2_driver_apply:               Driver.              (line  46)
* gsl_odeiv2_driver_apply_fixed_step:    Driver.              (line  61)
* gsl_odeiv2_driver_free:                Driver.              (line  78)
* gsl_odeiv2_driver_reset:               Driver.              (line  69)
* gsl_odeiv2_driver_reset_hstart:        Driver.              (line  72)
* gsl_odeiv2_driver_set_hmax:            Driver.              (line  36)
* gsl_odeiv2_driver_set_hmin:            Driver.              (line  31)
* gsl_odeiv2_driver_set_nmax:            Driver.              (line  41)
* gsl_odeiv2_evolve_alloc:               Evolution.           (line  10)
* gsl_odeiv2_evolve_apply:               Evolution.           (line  14)
* gsl_odeiv2_evolve_apply_fixed_step:    Evolution.           (line  52)
* gsl_odeiv2_evolve_free:                Evolution.           (line  68)
* gsl_odeiv2_evolve_reset:               Evolution.           (line  63)
* gsl_odeiv2_evolve_set_driver:          Evolution.           (line  72)
* gsl_odeiv2_step_alloc:                 Stepping Functions.  (line  10)
* gsl_odeiv2_step_apply:                 Stepping Functions.  (line  51)
* gsl_odeiv2_step_bsimp:                 Stepping Functions.  (line 122)
* gsl_odeiv2_step_free:                  Stepping Functions.  (line  23)
* gsl_odeiv2_step_msadams:               Stepping Functions.  (line 127)
* gsl_odeiv2_step_msbdf:                 Stepping Functions.  (line 135)
* gsl_odeiv2_step_name:                  Stepping Functions.  (line  27)
* gsl_odeiv2_step_order:                 Stepping Functions.  (line  37)
* gsl_odeiv2_step_reset:                 Stepping Functions.  (line  18)
* gsl_odeiv2_step_rk1imp:                Stepping Functions.  (line 104)
* gsl_odeiv2_step_rk2:                   Stepping Functions.  (line  86)
* gsl_odeiv2_step_rk2imp:                Stepping Functions.  (line 110)
* gsl_odeiv2_step_rk4:                   Stepping Functions.  (line  89)
* gsl_odeiv2_step_rk4imp:                Stepping Functions.  (line 116)
* gsl_odeiv2_step_rk8pd:                 Stepping Functions.  (line 101)
* gsl_odeiv2_step_rkck:                  Stepping Functions.  (line  98)
* gsl_odeiv2_step_rkf45:                 Stepping Functions.  (line  94)
* gsl_odeiv2_step_set_driver:            Stepping Functions.  (line  43)
* gsl_permutation_alloc:                 Permutation allocation.
                                                              (line   6)
* gsl_permutation_calloc:                Permutation allocation.
                                                              (line  14)
* gsl_permutation_canonical_cycles:      Permutations in cyclic form.
                                                              (line  67)
* gsl_permutation_canonical_to_linear:   Permutations in cyclic form.
                                                              (line  49)
* gsl_permutation_data:                  Permutation properties.
                                                              (line   9)
* gsl_permutation_fprintf:               Reading and writing permutations.
                                                              (line  27)
* gsl_permutation_fread:                 Reading and writing permutations.
                                                              (line  17)
* gsl_permutation_free:                  Permutation allocation.
                                                              (line  23)
* gsl_permutation_fscanf:                Reading and writing permutations.
                                                              (line  36)
* gsl_permutation_fwrite:                Reading and writing permutations.
                                                              (line   9)
* gsl_permutation_get:                   Accessing permutation elements.
                                                              (line   9)
* gsl_permutation_init:                  Permutation allocation.
                                                              (line  19)
* gsl_permutation_inverse:               Permutation functions.
                                                              (line   9)
* gsl_permutation_inversions:            Permutations in cyclic form.
                                                              (line  54)
* gsl_permutation_linear_cycles:         Permutations in cyclic form.
                                                              (line  62)
* gsl_permutation_linear_to_canonical:   Permutations in cyclic form.
                                                              (line  44)
* gsl_permutation_memcpy:                Permutation allocation.
                                                              (line  26)
* gsl_permutation_mul:                   Applying Permutations.
                                                              (line  44)
* gsl_permutation_next:                  Permutation functions.
                                                              (line  14)
* gsl_permutation_prev:                  Permutation functions.
                                                              (line  22)
* gsl_permutation_reverse:               Permutation functions.
                                                              (line   6)
* gsl_permutation_size:                  Permutation properties.
                                                              (line   6)
* gsl_permutation_swap:                  Accessing permutation elements.
                                                              (line  16)
* gsl_permutation_valid:                 Permutation properties.
                                                              (line  13)
* gsl_permute:                           Applying Permutations.
                                                              (line   6)
* gsl_permute_inverse:                   Applying Permutations.
                                                              (line  11)
* gsl_permute_matrix:                    Applying Permutations.
                                                              (line  35)
* gsl_permute_vector:                    Applying Permutations.
                                                              (line  16)
* gsl_permute_vector_inverse:            Applying Permutations.
                                                              (line  25)
* gsl_poly_complex_eval:                 Polynomial Evaluation.
                                                              (line  16)
* gsl_poly_complex_solve:                General Polynomial Equations.
                                                              (line  25)
* gsl_poly_complex_solve_cubic:          Cubic Equations.     (line  24)
* gsl_poly_complex_solve_quadratic:      Quadratic Equations. (line  28)
* gsl_poly_complex_workspace_alloc:      General Polynomial Equations.
                                                              (line  11)
* gsl_poly_complex_workspace_free:       General Polynomial Equations.
                                                              (line  21)
* gsl_poly_dd_eval:                      Divided Difference Representation of Polynomials.
                                                              (line  38)
* gsl_poly_dd_hermite_init:              Divided Difference Representation of Polynomials.
                                                              (line  54)
* gsl_poly_dd_init:                      Divided Difference Representation of Polynomials.
                                                              (line  30)
* gsl_poly_dd_taylor:                    Divided Difference Representation of Polynomials.
                                                              (line  45)
* gsl_poly_eval:                         Polynomial Evaluation.
                                                              (line  11)
* gsl_poly_eval_derivs:                  Polynomial Evaluation.
                                                              (line  26)
* gsl_poly_solve_cubic:                  Cubic Equations.     (line   6)
* gsl_poly_solve_quadratic:              Quadratic Equations. (line   6)
* gsl_pow_2:                             Small integer powers.
                                                              (line  19)
* gsl_pow_3:                             Small integer powers.
                                                              (line  20)
* gsl_pow_4:                             Small integer powers.
                                                              (line  21)
* gsl_pow_5:                             Small integer powers.
                                                              (line  22)
* gsl_pow_6:                             Small integer powers.
                                                              (line  23)
* gsl_pow_7:                             Small integer powers.
                                                              (line  24)
* gsl_pow_8:                             Small integer powers.
                                                              (line  25)
* gsl_pow_9:                             Small integer powers.
                                                              (line  26)
* gsl_pow_int:                           Small integer powers.
                                                              (line  11)
* gsl_pow_uint:                          Small integer powers.
                                                              (line  12)
* gsl_qrng_alloc:                        Quasi-random number generator initialization.
                                                              (line   6)
* gsl_qrng_clone:                        Saving and restoring quasi-random number generator state.
                                                              (line  12)
* gsl_qrng_free:                         Quasi-random number generator initialization.
                                                              (line  14)
* gsl_qrng_get:                          Sampling from a quasi-random number generator.
                                                              (line   6)
* gsl_qrng_halton:                       Quasi-random number generator algorithms.
                                                              (line  18)
* gsl_qrng_init:                         Quasi-random number generator initialization.
                                                              (line  17)
* gsl_qrng_memcpy:                       Saving and restoring quasi-random number generator state.
                                                              (line   6)
* gsl_qrng_name:                         Auxiliary quasi-random number generator functions.
                                                              (line   6)
* gsl_qrng_niederreiter_2:               Quasi-random number generator algorithms.
                                                              (line   8)
* gsl_qrng_reversehalton:                Quasi-random number generator algorithms.
                                                              (line  19)
* gsl_qrng_size:                         Auxiliary quasi-random number generator functions.
                                                              (line   9)
* gsl_qrng_sobol:                        Quasi-random number generator algorithms.
                                                              (line  13)
* gsl_qrng_state:                        Auxiliary quasi-random number generator functions.
                                                              (line  10)
* gsl_ran_bernoulli:                     The Bernoulli Distribution.
                                                              (line   6)
* gsl_ran_bernoulli_pdf:                 The Bernoulli Distribution.
                                                              (line  15)
* gsl_ran_beta:                          The Beta Distribution.
                                                              (line   6)
* gsl_ran_beta_pdf:                      The Beta Distribution.
                                                              (line  15)
* gsl_ran_binomial:                      The Binomial Distribution.
                                                              (line   6)
* gsl_ran_binomial_pdf:                  The Binomial Distribution.
                                                              (line  17)
* gsl_ran_bivariate_gaussian:            The Bivariate Gaussian Distribution.
                                                              (line   6)
* gsl_ran_bivariate_gaussian_pdf:        The Bivariate Gaussian Distribution.
                                                              (line  18)
* gsl_ran_cauchy:                        The Cauchy Distribution.
                                                              (line   6)
* gsl_ran_cauchy_pdf:                    The Cauchy Distribution.
                                                              (line  16)
* gsl_ran_chisq:                         The Chi-squared Distribution.
                                                              (line  14)
* gsl_ran_chisq_pdf:                     The Chi-squared Distribution.
                                                              (line  23)
* gsl_ran_choose:                        Shuffling and Sampling.
                                                              (line  33)
* gsl_ran_dirichlet:                     The Dirichlet Distribution.
                                                              (line   6)
* gsl_ran_dirichlet_lnpdf:               The Dirichlet Distribution.
                                                              (line  30)
* gsl_ran_dirichlet_pdf:                 The Dirichlet Distribution.
                                                              (line  24)
* gsl_ran_dir_2d:                        Spherical Vector Distributions.
                                                              (line  10)
* gsl_ran_dir_2d_trig_method:            Spherical Vector Distributions.
                                                              (line  12)
* gsl_ran_dir_3d:                        Spherical Vector Distributions.
                                                              (line  31)
* gsl_ran_dir_nd:                        Spherical Vector Distributions.
                                                              (line  40)
* gsl_ran_discrete:                      General Discrete Distributions.
                                                              (line  59)
* gsl_ran_discrete_free:                 General Discrete Distributions.
                                                              (line  72)
* gsl_ran_discrete_pdf:                  General Discrete Distributions.
                                                              (line  64)
* gsl_ran_discrete_preproc:              General Discrete Distributions.
                                                              (line  49)
* gsl_ran_exponential:                   The Exponential Distribution.
                                                              (line   6)
* gsl_ran_exponential_pdf:               The Exponential Distribution.
                                                              (line  14)
* gsl_ran_exppow:                        The Exponential Power Distribution.
                                                              (line   6)
* gsl_ran_exppow_pdf:                    The Exponential Power Distribution.
                                                              (line  18)
* gsl_ran_fdist:                         The F-distribution.  (line  13)
* gsl_ran_fdist_pdf:                     The F-distribution.  (line  26)
* gsl_ran_flat:                          The Flat (Uniform) Distribution.
                                                              (line   6)
* gsl_ran_flat_pdf:                      The Flat (Uniform) Distribution.
                                                              (line  15)
* gsl_ran_gamma:                         The Gamma Distribution.
                                                              (line   6)
* gsl_ran_gamma_knuth:                   The Gamma Distribution.
                                                              (line  22)
* gsl_ran_gamma_pdf:                     The Gamma Distribution.
                                                              (line  27)
* gsl_ran_gaussian:                      The Gaussian Distribution.
                                                              (line   6)
* gsl_ran_gaussian_pdf:                  The Gaussian Distribution.
                                                              (line  19)
* gsl_ran_gaussian_ratio_method:         The Gaussian Distribution.
                                                              (line  27)
* gsl_ran_gaussian_tail:                 The Gaussian Tail Distribution.
                                                              (line   6)
* gsl_ran_gaussian_tail_pdf:             The Gaussian Tail Distribution.
                                                              (line  23)
* gsl_ran_gaussian_ziggurat:             The Gaussian Distribution.
                                                              (line  25)
* gsl_ran_geometric:                     The Geometric Distribution.
                                                              (line   6)
* gsl_ran_geometric_pdf:                 The Geometric Distribution.
                                                              (line  19)
* gsl_ran_gumbel1:                       The Type-1 Gumbel Distribution.
                                                              (line   6)
* gsl_ran_gumbel1_pdf:                   The Type-1 Gumbel Distribution.
                                                              (line  15)
* gsl_ran_gumbel2:                       The Type-2 Gumbel Distribution.
                                                              (line   6)
* gsl_ran_gumbel2_pdf:                   The Type-2 Gumbel Distribution.
                                                              (line  15)
* gsl_ran_hypergeometric:                The Hypergeometric Distribution.
                                                              (line   6)
* gsl_ran_hypergeometric_pdf:            The Hypergeometric Distribution.
                                                              (line  22)
* gsl_ran_landau:                        The Landau Distribution.
                                                              (line   6)
* gsl_ran_landau_pdf:                    The Landau Distribution.
                                                              (line  17)
* gsl_ran_laplace:                       The Laplace Distribution.
                                                              (line   6)
* gsl_ran_laplace_pdf:                   The Laplace Distribution.
                                                              (line  14)
* gsl_ran_levy:                          The Levy alpha-Stable Distributions.
                                                              (line   6)
* gsl_ran_levy_skew:                     The Levy skew alpha-Stable Distribution.
                                                              (line   6)
* gsl_ran_logarithmic:                   The Logarithmic Distribution.
                                                              (line   6)
* gsl_ran_logarithmic_pdf:               The Logarithmic Distribution.
                                                              (line  16)
* gsl_ran_logistic:                      The Logistic Distribution.
                                                              (line   6)
* gsl_ran_logistic_pdf:                  The Logistic Distribution.
                                                              (line  14)
* gsl_ran_lognormal:                     The Lognormal Distribution.
                                                              (line   6)
* gsl_ran_lognormal_pdf:                 The Lognormal Distribution.
                                                              (line  15)
* gsl_ran_multinomial:                   The Multinomial Distribution.
                                                              (line   6)
* gsl_ran_multinomial_lnpdf:             The Multinomial Distribution.
                                                              (line  34)
* gsl_ran_multinomial_pdf:               The Multinomial Distribution.
                                                              (line  28)
* gsl_ran_multivariate_gaussian:         The Multivariate Gaussian Distribution.
                                                              (line   6)
* gsl_ran_multivariate_gaussian_log_pdf: The Multivariate Gaussian Distribution.
                                                              (line  23)
* gsl_ran_multivariate_gaussian_mean:    The Multivariate Gaussian Distribution.
                                                              (line  31)
* gsl_ran_multivariate_gaussian_pdf:     The Multivariate Gaussian Distribution.
                                                              (line  20)
* gsl_ran_multivariate_gaussian_vcov:    The Multivariate Gaussian Distribution.
                                                              (line  43)
* gsl_ran_negative_binomial:             The Negative Binomial Distribution.
                                                              (line   6)
* gsl_ran_negative_binomial_pdf:         The Negative Binomial Distribution.
                                                              (line  17)
* gsl_ran_pareto:                        The Pareto Distribution.
                                                              (line   6)
* gsl_ran_pareto_pdf:                    The Pareto Distribution.
                                                              (line  15)
* gsl_ran_pascal:                        The Pascal Distribution.
                                                              (line   6)
* gsl_ran_pascal_pdf:                    The Pascal Distribution.
                                                              (line  16)
* gsl_ran_poisson:                       The Poisson Distribution.
                                                              (line   6)
* gsl_ran_poisson_pdf:                   The Poisson Distribution.
                                                              (line  16)
* gsl_ran_rayleigh:                      The Rayleigh Distribution.
                                                              (line   6)
* gsl_ran_rayleigh_pdf:                  The Rayleigh Distribution.
                                                              (line  14)
* gsl_ran_rayleigh_tail:                 The Rayleigh Tail Distribution.
                                                              (line   6)
* gsl_ran_rayleigh_tail_pdf:             The Rayleigh Tail Distribution.
                                                              (line  16)
* gsl_ran_sample:                        Shuffling and Sampling.
                                                              (line  59)
* gsl_ran_shuffle:                       Shuffling and Sampling.
                                                              (line  13)
* gsl_ran_tdist:                         The t-distribution.  (line  14)
* gsl_ran_tdist_pdf:                     The t-distribution.  (line  23)
* gsl_ran_ugaussian:                     The Gaussian Distribution.
                                                              (line  34)
* gsl_ran_ugaussian_pdf:                 The Gaussian Distribution.
                                                              (line  35)
* gsl_ran_ugaussian_ratio_method:        The Gaussian Distribution.
                                                              (line  36)
* gsl_ran_ugaussian_tail:                The Gaussian Tail Distribution.
                                                              (line  30)
* gsl_ran_ugaussian_tail_pdf:            The Gaussian Tail Distribution.
                                                              (line  32)
* gsl_ran_weibull:                       The Weibull Distribution.
                                                              (line   6)
* gsl_ran_weibull_pdf:                   The Weibull Distribution.
                                                              (line  15)
* GSL_REAL:                              Representation of complex numbers.
                                                              (line  34)
* gsl_rng_alloc:                         Random number generator initialization.
                                                              (line   6)
* gsl_rng_borosh13:                      Other random number generators.
                                                              (line 174)
* gsl_rng_clone:                         Copying random number generator state.
                                                              (line  16)
* gsl_rng_cmrg:                          Random number generator algorithms.
                                                              (line  98)
* gsl_rng_coveyou:                       Other random number generators.
                                                              (line 201)
* gsl_rng_env_setup:                     Random number environment variables.
                                                              (line  11)
* gsl_rng_fishman18:                     Other random number generators.
                                                              (line 175)
* gsl_rng_fishman20:                     Other random number generators.
                                                              (line 176)
* gsl_rng_fishman2x:                     Other random number generators.
                                                              (line 191)
* gsl_rng_fread:                         Reading and writing random number generator state.
                                                              (line  17)
* gsl_rng_free:                          Random number generator initialization.
                                                              (line  45)
* gsl_rng_fwrite:                        Reading and writing random number generator state.
                                                              (line   9)
* gsl_rng_get:                           Sampling from a random number generator.
                                                              (line  11)
* gsl_rng_gfsr4:                         Random number generator algorithms.
                                                              (line 173)
* gsl_rng_knuthran:                      Other random number generators.
                                                              (line 167)
* gsl_rng_knuthran2:                     Other random number generators.
                                                              (line 157)
* gsl_rng_knuthran2002:                  Other random number generators.
                                                              (line 166)
* gsl_rng_lecuyer21:                     Other random number generators.
                                                              (line 177)
* gsl_rng_max:                           Auxiliary random number generator functions.
                                                              (line  19)
* gsl_rng_memcpy:                        Copying random number generator state.
                                                              (line  11)
* gsl_rng_min:                           Auxiliary random number generator functions.
                                                              (line  23)
* gsl_rng_minstd:                        Other random number generators.
                                                              (line 113)
* gsl_rng_mrg:                           Random number generator algorithms.
                                                              (line 120)
* gsl_rng_mt19937:                       Random number generator algorithms.
                                                              (line  19)
* gsl_rng_name:                          Auxiliary random number generator functions.
                                                              (line  10)
* gsl_rng_r250:                          Other random number generators.
                                                              (line  59)
* gsl_rng_rand:                          Unix random number generators.
                                                              (line  17)
* gsl_rng_rand48:                        Unix random number generators.
                                                              (line  57)
* gsl_rng_random_bsd:                    Unix random number generators.
                                                              (line  26)
* gsl_rng_random_glibc2:                 Unix random number generators.
                                                              (line  28)
* gsl_rng_random_libc5:                  Unix random number generators.
                                                              (line  27)
* gsl_rng_randu:                         Other random number generators.
                                                              (line 104)
* gsl_rng_ranf:                          Other random number generators.
                                                              (line  22)
* gsl_rng_ranlux:                        Random number generator algorithms.
                                                              (line  71)
* gsl_rng_ranlux389:                     Random number generator algorithms.
                                                              (line  72)
* gsl_rng_ranlxd1:                       Random number generator algorithms.
                                                              (line  64)
* gsl_rng_ranlxd2:                       Random number generator algorithms.
                                                              (line  65)
* gsl_rng_ranlxs0:                       Random number generator algorithms.
                                                              (line  44)
* gsl_rng_ranlxs1:                       Random number generator algorithms.
                                                              (line  45)
* gsl_rng_ranlxs2:                       Random number generator algorithms.
                                                              (line  46)
* gsl_rng_ranmar:                        Other random number generators.
                                                              (line  53)
* gsl_rng_set:                           Random number generator initialization.
                                                              (line  25)
* gsl_rng_size:                          Auxiliary random number generator functions.
                                                              (line  30)
* gsl_rng_slatec:                        Other random number generators.
                                                              (line 140)
* gsl_rng_state:                         Auxiliary random number generator functions.
                                                              (line  29)
* gsl_rng_taus:                          Random number generator algorithms.
                                                              (line 137)
* gsl_rng_taus2:                         Random number generator algorithms.
                                                              (line 138)
* gsl_rng_transputer:                    Other random number generators.
                                                              (line  95)
* gsl_rng_tt800:                         Other random number generators.
                                                              (line  74)
* gsl_rng_types_setup:                   Auxiliary random number generator functions.
                                                              (line  40)
* gsl_rng_uni:                           Other random number generators.
                                                              (line 133)
* gsl_rng_uni32:                         Other random number generators.
                                                              (line 134)
* gsl_rng_uniform:                       Sampling from a random number generator.
                                                              (line  18)
* gsl_rng_uniform_int:                   Sampling from a random number generator.
                                                              (line  36)
* gsl_rng_uniform_pos:                   Sampling from a random number generator.
                                                              (line  28)
* gsl_rng_vax:                           Other random number generators.
                                                              (line  86)
* gsl_rng_waterman14:                    Other random number generators.
                                                              (line 178)
* gsl_rng_zuf:                           Other random number generators.
                                                              (line 144)
* gsl_root_fdfsolver_alloc:              Initializing the Solver.
                                                              (line  21)
* gsl_root_fdfsolver_free:               Initializing the Solver.
                                                              (line  48)
* gsl_root_fdfsolver_iterate:            Root Finding Iteration.
                                                              (line  13)
* gsl_root_fdfsolver_name:               Initializing the Solver.
                                                              (line  53)
* gsl_root_fdfsolver_newton:             Root Finding Algorithms using Derivatives.
                                                              (line  15)
* gsl_root_fdfsolver_root:               Root Finding Iteration.
                                                              (line  33)
* gsl_root_fdfsolver_secant:             Root Finding Algorithms using Derivatives.
                                                              (line  29)
* gsl_root_fdfsolver_set:                Initializing the Solver.
                                                              (line  42)
* gsl_root_fdfsolver_steffenson:         Root Finding Algorithms using Derivatives.
                                                              (line  60)
* gsl_root_fsolver_alloc:                Initializing the Solver.
                                                              (line   6)
* gsl_root_fsolver_bisection:            Root Bracketing Algorithms.
                                                              (line  16)
* gsl_root_fsolver_brent:                Root Bracketing Algorithms.
                                                              (line  49)
* gsl_root_fsolver_falsepos:             Root Bracketing Algorithms.
                                                              (line  32)
* gsl_root_fsolver_free:                 Initializing the Solver.
                                                              (line  47)
* gsl_root_fsolver_iterate:              Root Finding Iteration.
                                                              (line  12)
* gsl_root_fsolver_name:                 Initializing the Solver.
                                                              (line  51)
* gsl_root_fsolver_root:                 Root Finding Iteration.
                                                              (line  32)
* gsl_root_fsolver_set:                  Initializing the Solver.
                                                              (line  36)
* gsl_root_fsolver_x_lower:              Root Finding Iteration.
                                                              (line  38)
* gsl_root_fsolver_x_upper:              Root Finding Iteration.
                                                              (line  40)
* gsl_root_test_delta:                   Search Stopping Parameters.
                                                              (line  41)
* gsl_root_test_interval:                Search Stopping Parameters.
                                                              (line  19)
* gsl_root_test_residual:                Search Stopping Parameters.
                                                              (line  52)
* gsl_rstat_add:                         Running Statistics Adding Data to the Accumulator.
                                                              (line   6)
* gsl_rstat_alloc:                       Running Statistics Initializing the Accumulator.
                                                              (line   6)
* gsl_rstat_free:                        Running Statistics Initializing the Accumulator.
                                                              (line  10)
* gsl_rstat_kurtosis:                    Running Statistics Current Statistics.
                                                              (line  47)
* gsl_rstat_max:                         Running Statistics Current Statistics.
                                                              (line   9)
* gsl_rstat_mean:                        Running Statistics Current Statistics.
                                                              (line  12)
* gsl_rstat_median:                      Running Statistics Current Statistics.
                                                              (line  53)
* gsl_rstat_min:                         Running Statistics Current Statistics.
                                                              (line   6)
* gsl_rstat_n:                           Running Statistics Adding Data to the Accumulator.
                                                              (line  12)
* gsl_rstat_quantile_add:                Running Statistics Quantiles.
                                                              (line  28)
* gsl_rstat_quantile_alloc:              Running Statistics Quantiles.
                                                              (line  13)
* gsl_rstat_quantile_free:               Running Statistics Quantiles.
                                                              (line  19)
* gsl_rstat_quantile_get:                Running Statistics Quantiles.
                                                              (line  33)
* gsl_rstat_quantile_reset:              Running Statistics Quantiles.
                                                              (line  23)
* gsl_rstat_reset:                       Running Statistics Initializing the Accumulator.
                                                              (line  13)
* gsl_rstat_rms:                         Running Statistics Current Statistics.
                                                              (line  35)
* gsl_rstat_sd:                          Running Statistics Current Statistics.
                                                              (line  24)
* gsl_rstat_sd_mean:                     Running Statistics Current Statistics.
                                                              (line  29)
* gsl_rstat_skew:                        Running Statistics Current Statistics.
                                                              (line  41)
* gsl_rstat_variance:                    Running Statistics Current Statistics.
                                                              (line  18)
* GSL_SET_COMPLEX:                       Representation of complex numbers.
                                                              (line  39)
* gsl_set_error_handler:                 Error Handlers.      (line  43)
* gsl_set_error_handler_off:             Error Handlers.      (line  69)
* GSL_SET_IMAG:                          Representation of complex numbers.
                                                              (line  49)
* GSL_SET_REAL:                          Representation of complex numbers.
                                                              (line  48)
* gsl_sf_airy_Ai:                        Airy Functions.      (line   6)
* gsl_sf_airy_Ai_deriv:                  Derivatives of Airy Functions.
                                                              (line   6)
* gsl_sf_airy_Ai_deriv_e:                Derivatives of Airy Functions.
                                                              (line   7)
* gsl_sf_airy_Ai_deriv_scaled:           Derivatives of Airy Functions.
                                                              (line  18)
* gsl_sf_airy_Ai_deriv_scaled_e:         Derivatives of Airy Functions.
                                                              (line  20)
* gsl_sf_airy_Ai_e:                      Airy Functions.      (line   7)
* gsl_sf_airy_Ai_scaled:                 Airy Functions.      (line  18)
* gsl_sf_airy_Ai_scaled_e:               Airy Functions.      (line  19)
* gsl_sf_airy_Bi:                        Airy Functions.      (line  12)
* gsl_sf_airy_Bi_deriv:                  Derivatives of Airy Functions.
                                                              (line  12)
* gsl_sf_airy_Bi_deriv_e:                Derivatives of Airy Functions.
                                                              (line  13)
* gsl_sf_airy_Bi_deriv_scaled:           Derivatives of Airy Functions.
                                                              (line  26)
* gsl_sf_airy_Bi_deriv_scaled_e:         Derivatives of Airy Functions.
                                                              (line  28)
* gsl_sf_airy_Bi_e:                      Airy Functions.      (line  13)
* gsl_sf_airy_Bi_scaled:                 Airy Functions.      (line  25)
* gsl_sf_airy_Bi_scaled_e:               Airy Functions.      (line  26)
* gsl_sf_airy_zero_Ai:                   Zeros of Airy Functions.
                                                              (line   6)
* gsl_sf_airy_zero_Ai_deriv:             Zeros of Derivatives of Airy Functions.
                                                              (line   6)
* gsl_sf_airy_zero_Ai_deriv_e:           Zeros of Derivatives of Airy Functions.
                                                              (line   7)
* gsl_sf_airy_zero_Ai_e:                 Zeros of Airy Functions.
                                                              (line   7)
* gsl_sf_airy_zero_Bi:                   Zeros of Airy Functions.
                                                              (line  12)
* gsl_sf_airy_zero_Bi_deriv:             Zeros of Derivatives of Airy Functions.
                                                              (line  12)
* gsl_sf_airy_zero_Bi_deriv_e:           Zeros of Derivatives of Airy Functions.
                                                              (line  13)
* gsl_sf_airy_zero_Bi_e:                 Zeros of Airy Functions.
                                                              (line  13)
* gsl_sf_angle_restrict_pos:             Restriction Functions.
                                                              (line  15)
* gsl_sf_angle_restrict_pos_e:           Restriction Functions.
                                                              (line  16)
* gsl_sf_angle_restrict_symm:            Restriction Functions.
                                                              (line   6)
* gsl_sf_angle_restrict_symm_e:          Restriction Functions.
                                                              (line   7)
* gsl_sf_atanint:                        Arctangent Integral. (line   6)
* gsl_sf_atanint_e:                      Arctangent Integral. (line   7)
* gsl_sf_bessel_I0:                      Regular Modified Cylindrical Bessel Functions.
                                                              (line   6)
* gsl_sf_bessel_I0_e:                    Regular Modified Cylindrical Bessel Functions.
                                                              (line   7)
* gsl_sf_bessel_I0_scaled:               Regular Modified Cylindrical Bessel Functions.
                                                              (line  31)
* gsl_sf_bessel_i0_scaled:               Regular Modified Spherical Bessel Functions.
                                                              (line  10)
* gsl_sf_bessel_I0_scaled_e:             Regular Modified Cylindrical Bessel Functions.
                                                              (line  32)
* gsl_sf_bessel_i0_scaled_e:             Regular Modified Spherical Bessel Functions.
                                                              (line  11)
* gsl_sf_bessel_I1:                      Regular Modified Cylindrical Bessel Functions.
                                                              (line  11)
* gsl_sf_bessel_I1_e:                    Regular Modified Cylindrical Bessel Functions.
                                                              (line  12)
* gsl_sf_bessel_I1_scaled:               Regular Modified Cylindrical Bessel Functions.
                                                              (line  37)
* gsl_sf_bessel_i1_scaled:               Regular Modified Spherical Bessel Functions.
                                                              (line  16)
* gsl_sf_bessel_I1_scaled_e:             Regular Modified Cylindrical Bessel Functions.
                                                              (line  38)
* gsl_sf_bessel_i1_scaled_e:             Regular Modified Spherical Bessel Functions.
                                                              (line  17)
* gsl_sf_bessel_i2_scaled:               Regular Modified Spherical Bessel Functions.
                                                              (line  22)
* gsl_sf_bessel_i2_scaled_e:             Regular Modified Spherical Bessel Functions.
                                                              (line  23)
* gsl_sf_bessel_il_scaled:               Regular Modified Spherical Bessel Functions.
                                                              (line  28)
* gsl_sf_bessel_il_scaled_array:         Regular Modified Spherical Bessel Functions.
                                                              (line  34)
* gsl_sf_bessel_il_scaled_e:             Regular Modified Spherical Bessel Functions.
                                                              (line  29)
* gsl_sf_bessel_In:                      Regular Modified Cylindrical Bessel Functions.
                                                              (line  16)
* gsl_sf_bessel_Inu:                     Regular Modified Bessel Functions - Fractional Order.
                                                              (line   6)
* gsl_sf_bessel_Inu_e:                   Regular Modified Bessel Functions - Fractional Order.
                                                              (line   7)
* gsl_sf_bessel_Inu_scaled:              Regular Modified Bessel Functions - Fractional Order.
                                                              (line  12)
* gsl_sf_bessel_Inu_scaled_e:            Regular Modified Bessel Functions - Fractional Order.
                                                              (line  13)
* gsl_sf_bessel_In_array:                Regular Modified Cylindrical Bessel Functions.
                                                              (line  22)
* gsl_sf_bessel_In_e:                    Regular Modified Cylindrical Bessel Functions.
                                                              (line  17)
* gsl_sf_bessel_In_scaled:               Regular Modified Cylindrical Bessel Functions.
                                                              (line  43)
* gsl_sf_bessel_In_scaled_array:         Regular Modified Cylindrical Bessel Functions.
                                                              (line  49)
* gsl_sf_bessel_In_scaled_e:             Regular Modified Cylindrical Bessel Functions.
                                                              (line  44)
* gsl_sf_bessel_J0:                      Regular Cylindrical Bessel Functions.
                                                              (line   6)
* gsl_sf_bessel_j0:                      Regular Spherical Bessel Functions.
                                                              (line   6)
* gsl_sf_bessel_J0_e:                    Regular Cylindrical Bessel Functions.
                                                              (line   7)
* gsl_sf_bessel_j0_e:                    Regular Spherical Bessel Functions.
                                                              (line   7)
* gsl_sf_bessel_J1:                      Regular Cylindrical Bessel Functions.
                                                              (line  11)
* gsl_sf_bessel_j1:                      Regular Spherical Bessel Functions.
                                                              (line  11)
* gsl_sf_bessel_J1_e:                    Regular Cylindrical Bessel Functions.
                                                              (line  12)
* gsl_sf_bessel_j1_e:                    Regular Spherical Bessel Functions.
                                                              (line  12)
* gsl_sf_bessel_j2:                      Regular Spherical Bessel Functions.
                                                              (line  16)
* gsl_sf_bessel_j2_e:                    Regular Spherical Bessel Functions.
                                                              (line  17)
* gsl_sf_bessel_jl:                      Regular Spherical Bessel Functions.
                                                              (line  21)
* gsl_sf_bessel_jl_array:                Regular Spherical Bessel Functions.
                                                              (line  27)
* gsl_sf_bessel_jl_e:                    Regular Spherical Bessel Functions.
                                                              (line  22)
* gsl_sf_bessel_jl_steed_array:          Regular Spherical Bessel Functions.
                                                              (line  35)
* gsl_sf_bessel_Jn:                      Regular Cylindrical Bessel Functions.
                                                              (line  16)
* gsl_sf_bessel_Jnu:                     Regular Bessel Function - Fractional Order.
                                                              (line   6)
* gsl_sf_bessel_Jnu_e:                   Regular Bessel Function - Fractional Order.
                                                              (line   7)
* gsl_sf_bessel_Jn_array:                Regular Cylindrical Bessel Functions.
                                                              (line  22)
* gsl_sf_bessel_Jn_e:                    Regular Cylindrical Bessel Functions.
                                                              (line  17)
* gsl_sf_bessel_K0:                      Irregular Modified Cylindrical Bessel Functions.
                                                              (line   6)
* gsl_sf_bessel_K0_e:                    Irregular Modified Cylindrical Bessel Functions.
                                                              (line   7)
* gsl_sf_bessel_K0_scaled:               Irregular Modified Cylindrical Bessel Functions.
                                                              (line  32)
* gsl_sf_bessel_k0_scaled:               Irregular Modified Spherical Bessel Functions.
                                                              (line  10)
* gsl_sf_bessel_K0_scaled_e:             Irregular Modified Cylindrical Bessel Functions.
                                                              (line  33)
* gsl_sf_bessel_k0_scaled_e:             Irregular Modified Spherical Bessel Functions.
                                                              (line  11)
* gsl_sf_bessel_K1:                      Irregular Modified Cylindrical Bessel Functions.
                                                              (line  11)
* gsl_sf_bessel_K1_e:                    Irregular Modified Cylindrical Bessel Functions.
                                                              (line  12)
* gsl_sf_bessel_K1_scaled:               Irregular Modified Cylindrical Bessel Functions.
                                                              (line  38)
* gsl_sf_bessel_k1_scaled:               Irregular Modified Spherical Bessel Functions.
                                                              (line  16)
* gsl_sf_bessel_K1_scaled_e:             Irregular Modified Cylindrical Bessel Functions.
                                                              (line  39)
* gsl_sf_bessel_k1_scaled_e:             Irregular Modified Spherical Bessel Functions.
                                                              (line  17)
* gsl_sf_bessel_k2_scaled:               Irregular Modified Spherical Bessel Functions.
                                                              (line  22)
* gsl_sf_bessel_k2_scaled_e:             Irregular Modified Spherical Bessel Functions.
                                                              (line  23)
* gsl_sf_bessel_kl_scaled:               Irregular Modified Spherical Bessel Functions.
                                                              (line  28)
* gsl_sf_bessel_kl_scaled_array:         Irregular Modified Spherical Bessel Functions.
                                                              (line  34)
* gsl_sf_bessel_kl_scaled_e:             Irregular Modified Spherical Bessel Functions.
                                                              (line  29)
* gsl_sf_bessel_Kn:                      Irregular Modified Cylindrical Bessel Functions.
                                                              (line  16)
* gsl_sf_bessel_Knu:                     Irregular Modified Bessel Functions - Fractional Order.
                                                              (line   6)
* gsl_sf_bessel_Knu_e:                   Irregular Modified Bessel Functions - Fractional Order.
                                                              (line   7)
* gsl_sf_bessel_Knu_scaled:              Irregular Modified Bessel Functions - Fractional Order.
                                                              (line  19)
* gsl_sf_bessel_Knu_scaled_e:            Irregular Modified Bessel Functions - Fractional Order.
                                                              (line  20)
* gsl_sf_bessel_Kn_array:                Irregular Modified Cylindrical Bessel Functions.
                                                              (line  22)
* gsl_sf_bessel_Kn_e:                    Irregular Modified Cylindrical Bessel Functions.
                                                              (line  17)
* gsl_sf_bessel_Kn_scaled:               Irregular Modified Cylindrical Bessel Functions.
                                                              (line  44)
* gsl_sf_bessel_Kn_scaled_array:         Irregular Modified Cylindrical Bessel Functions.
                                                              (line  50)
* gsl_sf_bessel_Kn_scaled_e:             Irregular Modified Cylindrical Bessel Functions.
                                                              (line  45)
* gsl_sf_bessel_lnKnu:                   Irregular Modified Bessel Functions - Fractional Order.
                                                              (line  12)
* gsl_sf_bessel_lnKnu_e:                 Irregular Modified Bessel Functions - Fractional Order.
                                                              (line  13)
* gsl_sf_bessel_sequence_Jnu_e:          Regular Bessel Function - Fractional Order.
                                                              (line  12)
* gsl_sf_bessel_Y0:                      Irregular Cylindrical Bessel Functions.
                                                              (line   6)
* gsl_sf_bessel_y0:                      Irregular Spherical Bessel Functions.
                                                              (line   6)
* gsl_sf_bessel_Y0_e:                    Irregular Cylindrical Bessel Functions.
                                                              (line   7)
* gsl_sf_bessel_y0_e:                    Irregular Spherical Bessel Functions.
                                                              (line   7)
* gsl_sf_bessel_Y1:                      Irregular Cylindrical Bessel Functions.
                                                              (line  11)
* gsl_sf_bessel_y1:                      Irregular Spherical Bessel Functions.
                                                              (line  11)
* gsl_sf_bessel_Y1_e:                    Irregular Cylindrical Bessel Functions.
                                                              (line  12)
* gsl_sf_bessel_y1_e:                    Irregular Spherical Bessel Functions.
                                                              (line  12)
* gsl_sf_bessel_y2:                      Irregular Spherical Bessel Functions.
                                                              (line  16)
* gsl_sf_bessel_y2_e:                    Irregular Spherical Bessel Functions.
                                                              (line  17)
* gsl_sf_bessel_yl:                      Irregular Spherical Bessel Functions.
                                                              (line  21)
* gsl_sf_bessel_yl_array:                Irregular Spherical Bessel Functions.
                                                              (line  27)
* gsl_sf_bessel_yl_e:                    Irregular Spherical Bessel Functions.
                                                              (line  22)
* gsl_sf_bessel_Yn:                      Irregular Cylindrical Bessel Functions.
                                                              (line  16)
* gsl_sf_bessel_Ynu:                     Irregular Bessel Functions - Fractional Order.
                                                              (line   6)
* gsl_sf_bessel_Ynu_e:                   Irregular Bessel Functions - Fractional Order.
                                                              (line   7)
* gsl_sf_bessel_Yn_array:                Irregular Cylindrical Bessel Functions.
                                                              (line  22)
* gsl_sf_bessel_Yn_e:                    Irregular Cylindrical Bessel Functions.
                                                              (line  17)
* gsl_sf_bessel_zero_J0:                 Zeros of Regular Bessel Functions.
                                                              (line   6)
* gsl_sf_bessel_zero_J0_e:               Zeros of Regular Bessel Functions.
                                                              (line   7)
* gsl_sf_bessel_zero_J1:                 Zeros of Regular Bessel Functions.
                                                              (line  12)
* gsl_sf_bessel_zero_J1_e:               Zeros of Regular Bessel Functions.
                                                              (line  13)
* gsl_sf_bessel_zero_Jnu:                Zeros of Regular Bessel Functions.
                                                              (line  18)
* gsl_sf_bessel_zero_Jnu_e:              Zeros of Regular Bessel Functions.
                                                              (line  19)
* gsl_sf_beta:                           Beta Functions.      (line   6)
* gsl_sf_beta_e:                         Beta Functions.      (line   7)
* gsl_sf_beta_inc:                       Incomplete Beta Function.
                                                              (line   6)
* gsl_sf_beta_inc_e:                     Incomplete Beta Function.
                                                              (line   7)
* gsl_sf_Chi:                            Hyperbolic Integrals.
                                                              (line  11)
* gsl_sf_Chi_e:                          Hyperbolic Integrals.
                                                              (line  12)
* gsl_sf_choose:                         Factorials.          (line  38)
* gsl_sf_choose_e:                       Factorials.          (line  39)
* gsl_sf_Ci:                             Trigonometric Integrals.
                                                              (line  11)
* gsl_sf_Ci_e:                           Trigonometric Integrals.
                                                              (line  12)
* gsl_sf_clausen:                        Clausen Functions.   (line  14)
* gsl_sf_clausen_e:                      Clausen Functions.   (line  15)
* gsl_sf_complex_cos_e:                  Trigonometric Functions for Complex Arguments.
                                                              (line  11)
* gsl_sf_complex_dilog_e:                Complex Argument.    (line   6)
* gsl_sf_complex_logsin_e:               Trigonometric Functions for Complex Arguments.
                                                              (line  16)
* gsl_sf_complex_log_e:                  Logarithm and Related Functions.
                                                              (line  19)
* gsl_sf_complex_sin_e:                  Trigonometric Functions for Complex Arguments.
                                                              (line   6)
* gsl_sf_conicalP_0:                     Conical Functions.   (line  22)
* gsl_sf_conicalP_0_e:                   Conical Functions.   (line  23)
* gsl_sf_conicalP_1:                     Conical Functions.   (line  28)
* gsl_sf_conicalP_1_e:                   Conical Functions.   (line  29)
* gsl_sf_conicalP_cyl_reg:               Conical Functions.   (line  41)
* gsl_sf_conicalP_cyl_reg_e:             Conical Functions.   (line  43)
* gsl_sf_conicalP_half:                  Conical Functions.   (line  10)
* gsl_sf_conicalP_half_e:                Conical Functions.   (line  11)
* gsl_sf_conicalP_mhalf:                 Conical Functions.   (line  16)
* gsl_sf_conicalP_mhalf_e:               Conical Functions.   (line  17)
* gsl_sf_conicalP_sph_reg:               Conical Functions.   (line  34)
* gsl_sf_conicalP_sph_reg_e:             Conical Functions.   (line  36)
* gsl_sf_cos:                            Circular Trigonometric Functions.
                                                              (line  10)
* gsl_sf_cos_e:                          Circular Trigonometric Functions.
                                                              (line  11)
* gsl_sf_cos_err_e:                      Trigonometric Functions With Error Estimates.
                                                              (line  13)
* gsl_sf_coulomb_CL_array:               Coulomb Wave Function Normalization Constant.
                                                              (line  14)
* gsl_sf_coulomb_CL_e:                   Coulomb Wave Function Normalization Constant.
                                                              (line   9)
* gsl_sf_coulomb_wave_FGp_array:         Coulomb Wave Functions.
                                                              (line  47)
* gsl_sf_coulomb_wave_FG_array:          Coulomb Wave Functions.
                                                              (line  39)
* gsl_sf_coulomb_wave_FG_e:              Coulomb Wave Functions.
                                                              (line  19)
* gsl_sf_coulomb_wave_F_array:           Coulomb Wave Functions.
                                                              (line  33)
* gsl_sf_coulomb_wave_sphF_array:        Coulomb Wave Functions.
                                                              (line  57)
* gsl_sf_coupling_3j:                    3-j Symbols.         (line   6)
* gsl_sf_coupling_3j_e:                  3-j Symbols.         (line   8)
* gsl_sf_coupling_6j:                    6-j Symbols.         (line   6)
* gsl_sf_coupling_6j_e:                  6-j Symbols.         (line   8)
* gsl_sf_coupling_9j:                    9-j Symbols.         (line   6)
* gsl_sf_coupling_9j_e:                  9-j Symbols.         (line   9)
* gsl_sf_dawson:                         Dawson Function.     (line  11)
* gsl_sf_dawson_e:                       Dawson Function.     (line  12)
* gsl_sf_debye_1:                        Debye Functions.     (line  13)
* gsl_sf_debye_1_e:                      Debye Functions.     (line  14)
* gsl_sf_debye_2:                        Debye Functions.     (line  18)
* gsl_sf_debye_2_e:                      Debye Functions.     (line  19)
* gsl_sf_debye_3:                        Debye Functions.     (line  23)
* gsl_sf_debye_3_e:                      Debye Functions.     (line  24)
* gsl_sf_debye_4:                        Debye Functions.     (line  28)
* gsl_sf_debye_4_e:                      Debye Functions.     (line  29)
* gsl_sf_debye_5:                        Debye Functions.     (line  33)
* gsl_sf_debye_5_e:                      Debye Functions.     (line  34)
* gsl_sf_debye_6:                        Debye Functions.     (line  38)
* gsl_sf_debye_6_e:                      Debye Functions.     (line  39)
* gsl_sf_dilog:                          Real Argument.       (line   6)
* gsl_sf_dilog_e:                        Real Argument.       (line   7)
* gsl_sf_doublefact:                     Factorials.          (line  18)
* gsl_sf_doublefact_e:                   Factorials.          (line  19)
* gsl_sf_ellint_D:                       Legendre Form of Incomplete Elliptic Integrals.
                                                              (line  34)
* gsl_sf_ellint_D_e:                     Legendre Form of Incomplete Elliptic Integrals.
                                                              (line  36)
* gsl_sf_ellint_E:                       Legendre Form of Incomplete Elliptic Integrals.
                                                              (line  15)
* gsl_sf_ellint_Ecomp:                   Legendre Form of Complete Elliptic Integrals.
                                                              (line  13)
* gsl_sf_ellint_Ecomp_e:                 Legendre Form of Complete Elliptic Integrals.
                                                              (line  14)
* gsl_sf_ellint_E_e:                     Legendre Form of Incomplete Elliptic Integrals.
                                                              (line  17)
* gsl_sf_ellint_F:                       Legendre Form of Incomplete Elliptic Integrals.
                                                              (line   6)
* gsl_sf_ellint_F_e:                     Legendre Form of Incomplete Elliptic Integrals.
                                                              (line   8)
* gsl_sf_ellint_Kcomp:                   Legendre Form of Complete Elliptic Integrals.
                                                              (line   6)
* gsl_sf_ellint_Kcomp_e:                 Legendre Form of Complete Elliptic Integrals.
                                                              (line   7)
* gsl_sf_ellint_P:                       Legendre Form of Incomplete Elliptic Integrals.
                                                              (line  24)
* gsl_sf_ellint_Pcomp:                   Legendre Form of Complete Elliptic Integrals.
                                                              (line  20)
* gsl_sf_ellint_Pcomp_e:                 Legendre Form of Complete Elliptic Integrals.
                                                              (line  22)
* gsl_sf_ellint_P_e:                     Legendre Form of Incomplete Elliptic Integrals.
                                                              (line  26)
* gsl_sf_ellint_RC:                      Carlson Forms.       (line   6)
* gsl_sf_ellint_RC_e:                    Carlson Forms.       (line   8)
* gsl_sf_ellint_RD:                      Carlson Forms.       (line  13)
* gsl_sf_ellint_RD_e:                    Carlson Forms.       (line  15)
* gsl_sf_ellint_RF:                      Carlson Forms.       (line  20)
* gsl_sf_ellint_RF_e:                    Carlson Forms.       (line  22)
* gsl_sf_ellint_RJ:                      Carlson Forms.       (line  27)
* gsl_sf_ellint_RJ_e:                    Carlson Forms.       (line  29)
* gsl_sf_elljac_e:                       Elliptic Functions (Jacobi).
                                                              (line  10)
* gsl_sf_erf:                            Error Function.      (line   6)
* gsl_sf_erfc:                           Complementary Error Function.
                                                              (line   6)
* gsl_sf_erfc_e:                         Complementary Error Function.
                                                              (line   7)
* gsl_sf_erf_e:                          Error Function.      (line   7)
* gsl_sf_erf_Q:                          Probability functions.
                                                              (line  14)
* gsl_sf_erf_Q_e:                        Probability functions.
                                                              (line  15)
* gsl_sf_erf_Z:                          Probability functions.
                                                              (line   9)
* gsl_sf_erf_Z_e:                        Probability functions.
                                                              (line  10)
* gsl_sf_eta:                            Eta Function.        (line  12)
* gsl_sf_eta_e:                          Eta Function.        (line  13)
* gsl_sf_eta_int:                        Eta Function.        (line   8)
* gsl_sf_eta_int_e:                      Eta Function.        (line   9)
* gsl_sf_exp:                            Exponential Function.
                                                              (line   6)
* gsl_sf_expint_3:                       Ei_3(x).             (line   6)
* gsl_sf_expint_3_e:                     Ei_3(x).             (line   7)
* gsl_sf_expint_E1:                      Exponential Integral.
                                                              (line   6)
* gsl_sf_expint_E1_e:                    Exponential Integral.
                                                              (line   7)
* gsl_sf_expint_E2:                      Exponential Integral.
                                                              (line  12)
* gsl_sf_expint_E2_e:                    Exponential Integral.
                                                              (line  13)
* gsl_sf_expint_Ei:                      Ei(x).               (line   6)
* gsl_sf_expint_Ei_e:                    Ei(x).               (line   7)
* gsl_sf_expint_En:                      Exponential Integral.
                                                              (line  19)
* gsl_sf_expint_En_e:                    Exponential Integral.
                                                              (line  20)
* gsl_sf_expm1:                          Relative Exponential Functions.
                                                              (line   6)
* gsl_sf_expm1_e:                        Relative Exponential Functions.
                                                              (line   7)
* gsl_sf_exprel:                         Relative Exponential Functions.
                                                              (line  11)
* gsl_sf_exprel_2:                       Relative Exponential Functions.
                                                              (line  18)
* gsl_sf_exprel_2_e:                     Relative Exponential Functions.
                                                              (line  19)
* gsl_sf_exprel_e:                       Relative Exponential Functions.
                                                              (line  12)
* gsl_sf_exprel_n:                       Relative Exponential Functions.
                                                              (line  25)
* gsl_sf_exprel_n_e:                     Relative Exponential Functions.
                                                              (line  26)
* gsl_sf_exp_e:                          Exponential Function.
                                                              (line   7)
* gsl_sf_exp_e10_e:                      Exponential Function.
                                                              (line  11)
* gsl_sf_exp_err_e:                      Exponentiation With Error Estimate.
                                                              (line   6)
* gsl_sf_exp_err_e10_e:                  Exponentiation With Error Estimate.
                                                              (line  10)
* gsl_sf_exp_mult:                       Exponential Function.
                                                              (line  18)
* gsl_sf_exp_mult_e:                     Exponential Function.
                                                              (line  19)
* gsl_sf_exp_mult_e10_e:                 Exponential Function.
                                                              (line  24)
* gsl_sf_exp_mult_err_e:                 Exponentiation With Error Estimate.
                                                              (line  16)
* gsl_sf_exp_mult_err_e10_e:             Exponentiation With Error Estimate.
                                                              (line  21)
* gsl_sf_fact:                           Factorials.          (line  11)
* gsl_sf_fact_e:                         Factorials.          (line  12)
* gsl_sf_fermi_dirac_0:                  Complete Fermi-Dirac Integrals.
                                                              (line  19)
* gsl_sf_fermi_dirac_0_e:                Complete Fermi-Dirac Integrals.
                                                              (line  20)
* gsl_sf_fermi_dirac_1:                  Complete Fermi-Dirac Integrals.
                                                              (line  25)
* gsl_sf_fermi_dirac_1_e:                Complete Fermi-Dirac Integrals.
                                                              (line  26)
* gsl_sf_fermi_dirac_2:                  Complete Fermi-Dirac Integrals.
                                                              (line  31)
* gsl_sf_fermi_dirac_2_e:                Complete Fermi-Dirac Integrals.
                                                              (line  32)
* gsl_sf_fermi_dirac_3half:              Complete Fermi-Dirac Integrals.
                                                              (line  56)
* gsl_sf_fermi_dirac_3half_e:            Complete Fermi-Dirac Integrals.
                                                              (line  57)
* gsl_sf_fermi_dirac_half:               Complete Fermi-Dirac Integrals.
                                                              (line  50)
* gsl_sf_fermi_dirac_half_e:             Complete Fermi-Dirac Integrals.
                                                              (line  51)
* gsl_sf_fermi_dirac_inc_0:              Incomplete Fermi-Dirac Integrals.
                                                              (line  10)
* gsl_sf_fermi_dirac_inc_0_e:            Incomplete Fermi-Dirac Integrals.
                                                              (line  11)
* gsl_sf_fermi_dirac_int:                Complete Fermi-Dirac Integrals.
                                                              (line  37)
* gsl_sf_fermi_dirac_int_e:              Complete Fermi-Dirac Integrals.
                                                              (line  38)
* gsl_sf_fermi_dirac_m1:                 Complete Fermi-Dirac Integrals.
                                                              (line  12)
* gsl_sf_fermi_dirac_m1_e:               Complete Fermi-Dirac Integrals.
                                                              (line  13)
* gsl_sf_fermi_dirac_mhalf:              Complete Fermi-Dirac Integrals.
                                                              (line  44)
* gsl_sf_fermi_dirac_mhalf_e:            Complete Fermi-Dirac Integrals.
                                                              (line  45)
* gsl_sf_gamma:                          Gamma Functions.     (line  14)
* gsl_sf_gammainv:                       Gamma Functions.     (line  49)
* gsl_sf_gammainv_e:                     Gamma Functions.     (line  50)
* gsl_sf_gammastar:                      Gamma Functions.     (line  40)
* gsl_sf_gammastar_e:                    Gamma Functions.     (line  41)
* gsl_sf_gamma_e:                        Gamma Functions.     (line  15)
* gsl_sf_gamma_inc:                      Incomplete Gamma Functions.
                                                              (line   6)
* gsl_sf_gamma_inc_e:                    Incomplete Gamma Functions.
                                                              (line   7)
* gsl_sf_gamma_inc_P:                    Incomplete Gamma Functions.
                                                              (line  20)
* gsl_sf_gamma_inc_P_e:                  Incomplete Gamma Functions.
                                                              (line  21)
* gsl_sf_gamma_inc_Q:                    Incomplete Gamma Functions.
                                                              (line  13)
* gsl_sf_gamma_inc_Q_e:                  Incomplete Gamma Functions.
                                                              (line  14)
* gsl_sf_gegenpoly_1:                    Gegenbauer Functions.
                                                              (line  11)
* gsl_sf_gegenpoly_1_e:                  Gegenbauer Functions.
                                                              (line  14)
* gsl_sf_gegenpoly_2:                    Gegenbauer Functions.
                                                              (line  12)
* gsl_sf_gegenpoly_2_e:                  Gegenbauer Functions.
                                                              (line  16)
* gsl_sf_gegenpoly_3:                    Gegenbauer Functions.
                                                              (line  13)
* gsl_sf_gegenpoly_3_e:                  Gegenbauer Functions.
                                                              (line  18)
* gsl_sf_gegenpoly_array:                Gegenbauer Functions.
                                                              (line  30)
* gsl_sf_gegenpoly_n:                    Gegenbauer Functions.
                                                              (line  23)
* gsl_sf_gegenpoly_n_e:                  Gegenbauer Functions.
                                                              (line  24)
* gsl_sf_hazard:                         Probability functions.
                                                              (line  27)
* gsl_sf_hazard_e:                       Probability functions.
                                                              (line  28)
* gsl_sf_hydrogenicR:                    Normalized Hydrogenic Bound States.
                                                              (line  12)
* gsl_sf_hydrogenicR_1:                  Normalized Hydrogenic Bound States.
                                                              (line   6)
* gsl_sf_hydrogenicR_1_e:                Normalized Hydrogenic Bound States.
                                                              (line   7)
* gsl_sf_hydrogenicR_e:                  Normalized Hydrogenic Bound States.
                                                              (line  14)
* gsl_sf_hyperg_0F1:                     Hypergeometric Functions.
                                                              (line  10)
* gsl_sf_hyperg_0F1_e:                   Hypergeometric Functions.
                                                              (line  11)
* gsl_sf_hyperg_1F1:                     Hypergeometric Functions.
                                                              (line  21)
* gsl_sf_hyperg_1F1_e:                   Hypergeometric Functions.
                                                              (line  22)
* gsl_sf_hyperg_1F1_int:                 Hypergeometric Functions.
                                                              (line  15)
* gsl_sf_hyperg_1F1_int_e:               Hypergeometric Functions.
                                                              (line  16)
* gsl_sf_hyperg_2F0:                     Hypergeometric Functions.
                                                              (line  85)
* gsl_sf_hyperg_2F0_e:                   Hypergeometric Functions.
                                                              (line  86)
* gsl_sf_hyperg_2F1:                     Hypergeometric Functions.
                                                              (line  51)
* gsl_sf_hyperg_2F1_conj:                Hypergeometric Functions.
                                                              (line  63)
* gsl_sf_hyperg_2F1_conj_e:              Hypergeometric Functions.
                                                              (line  65)
* gsl_sf_hyperg_2F1_conj_renorm:         Hypergeometric Functions.
                                                              (line  77)
* gsl_sf_hyperg_2F1_conj_renorm_e:       Hypergeometric Functions.
                                                              (line  79)
* gsl_sf_hyperg_2F1_e:                   Hypergeometric Functions.
                                                              (line  53)
* gsl_sf_hyperg_2F1_renorm:              Hypergeometric Functions.
                                                              (line  70)
* gsl_sf_hyperg_2F1_renorm_e:            Hypergeometric Functions.
                                                              (line  72)
* gsl_sf_hyperg_U:                       Hypergeometric Functions.
                                                              (line  39)
* gsl_sf_hyperg_U_e:                     Hypergeometric Functions.
                                                              (line  40)
* gsl_sf_hyperg_U_e10_e:                 Hypergeometric Functions.
                                                              (line  45)
* gsl_sf_hyperg_U_int:                   Hypergeometric Functions.
                                                              (line  27)
* gsl_sf_hyperg_U_int_e:                 Hypergeometric Functions.
                                                              (line  28)
* gsl_sf_hyperg_U_int_e10_e:             Hypergeometric Functions.
                                                              (line  33)
* gsl_sf_hypot:                          Circular Trigonometric Functions.
                                                              (line  14)
* gsl_sf_hypot_e:                        Circular Trigonometric Functions.
                                                              (line  15)
* gsl_sf_hzeta:                          Hurwitz Zeta Function.
                                                              (line   9)
* gsl_sf_hzeta_e:                        Hurwitz Zeta Function.
                                                              (line  10)
* gsl_sf_laguerre_1:                     Laguerre Functions.  (line  16)
* gsl_sf_laguerre_1_e:                   Laguerre Functions.  (line  19)
* gsl_sf_laguerre_2:                     Laguerre Functions.  (line  17)
* gsl_sf_laguerre_2_e:                   Laguerre Functions.  (line  21)
* gsl_sf_laguerre_3:                     Laguerre Functions.  (line  18)
* gsl_sf_laguerre_3_e:                   Laguerre Functions.  (line  23)
* gsl_sf_laguerre_n:                     Laguerre Functions.  (line  28)
* gsl_sf_laguerre_n_e:                   Laguerre Functions.  (line  30)
* gsl_sf_lambert_W0:                     Lambert W Functions. (line  13)
* gsl_sf_lambert_W0_e:                   Lambert W Functions. (line  14)
* gsl_sf_lambert_Wm1:                    Lambert W Functions. (line  18)
* gsl_sf_lambert_Wm1_e:                  Lambert W Functions. (line  19)
* gsl_sf_legendre_array:                 Associated Legendre Polynomials and Spherical Harmonics.
                                                              (line  69)
* gsl_sf_legendre_array_e:               Associated Legendre Polynomials and Spherical Harmonics.
                                                              (line  71)
* gsl_sf_legendre_array_index:           Associated Legendre Polynomials and Spherical Harmonics.
                                                              (line 162)
* gsl_sf_legendre_array_n:               Associated Legendre Polynomials and Spherical Harmonics.
                                                              (line 155)
* gsl_sf_legendre_array_size:            Associated Legendre Polynomials and Spherical Harmonics.
                                                              (line 200)
* gsl_sf_legendre_deriv2_alt_array:      Associated Legendre Polynomials and Spherical Harmonics.
                                                              (line 135)
* gsl_sf_legendre_deriv2_alt_array_e:    Associated Legendre Polynomials and Spherical Harmonics.
                                                              (line 139)
* gsl_sf_legendre_deriv2_array:          Associated Legendre Polynomials and Spherical Harmonics.
                                                              (line 116)
* gsl_sf_legendre_deriv2_array_e:        Associated Legendre Polynomials and Spherical Harmonics.
                                                              (line 120)
* gsl_sf_legendre_deriv_alt_array:       Associated Legendre Polynomials and Spherical Harmonics.
                                                              (line 100)
* gsl_sf_legendre_deriv_alt_array_e:     Associated Legendre Polynomials and Spherical Harmonics.
                                                              (line 103)
* gsl_sf_legendre_deriv_array:           Associated Legendre Polynomials and Spherical Harmonics.
                                                              (line  85)
* gsl_sf_legendre_deriv_array_e:         Associated Legendre Polynomials and Spherical Harmonics.
                                                              (line  88)
* gsl_sf_legendre_H3d:                   Radial Functions for Hyperbolic Space.
                                                              (line  30)
* gsl_sf_legendre_H3d_0:                 Radial Functions for Hyperbolic Space.
                                                              (line  11)
* gsl_sf_legendre_H3d_0_e:               Radial Functions for Hyperbolic Space.
                                                              (line  12)
* gsl_sf_legendre_H3d_1:                 Radial Functions for Hyperbolic Space.
                                                              (line  20)
* gsl_sf_legendre_H3d_1_e:               Radial Functions for Hyperbolic Space.
                                                              (line  21)
* gsl_sf_legendre_H3d_array:             Radial Functions for Hyperbolic Space.
                                                              (line  39)
* gsl_sf_legendre_H3d_e:                 Radial Functions for Hyperbolic Space.
                                                              (line  32)
* gsl_sf_legendre_P1:                    Legendre Polynomials.
                                                              (line   6)
* gsl_sf_legendre_P1_e:                  Legendre Polynomials.
                                                              (line   9)
* gsl_sf_legendre_P2:                    Legendre Polynomials.
                                                              (line   7)
* gsl_sf_legendre_P2_e:                  Legendre Polynomials.
                                                              (line  11)
* gsl_sf_legendre_P3:                    Legendre Polynomials.
                                                              (line   8)
* gsl_sf_legendre_P3_e:                  Legendre Polynomials.
                                                              (line  13)
* gsl_sf_legendre_Pl:                    Legendre Polynomials.
                                                              (line  18)
* gsl_sf_legendre_Plm:                   Associated Legendre Polynomials and Spherical Harmonics.
                                                              (line 169)
* gsl_sf_legendre_Plm_array:             Associated Legendre Polynomials and Spherical Harmonics.
                                                              (line 184)
* gsl_sf_legendre_Plm_deriv_array:       Associated Legendre Polynomials and Spherical Harmonics.
                                                              (line 186)
* gsl_sf_legendre_Plm_e:                 Associated Legendre Polynomials and Spherical Harmonics.
                                                              (line 170)
* gsl_sf_legendre_Pl_array:              Legendre Polynomials.
                                                              (line  24)
* gsl_sf_legendre_Pl_deriv_array:        Legendre Polynomials.
                                                              (line  26)
* gsl_sf_legendre_Pl_e:                  Legendre Polynomials.
                                                              (line  19)
* gsl_sf_legendre_Q0:                    Legendre Polynomials.
                                                              (line  32)
* gsl_sf_legendre_Q0_e:                  Legendre Polynomials.
                                                              (line  33)
* gsl_sf_legendre_Q1:                    Legendre Polynomials.
                                                              (line  38)
* gsl_sf_legendre_Q1_e:                  Legendre Polynomials.
                                                              (line  39)
* gsl_sf_legendre_Ql:                    Legendre Polynomials.
                                                              (line  44)
* gsl_sf_legendre_Ql_e:                  Legendre Polynomials.
                                                              (line  45)
* gsl_sf_legendre_sphPlm:                Associated Legendre Polynomials and Spherical Harmonics.
                                                              (line 175)
* gsl_sf_legendre_sphPlm_array:          Associated Legendre Polynomials and Spherical Harmonics.
                                                              (line 192)
* gsl_sf_legendre_sphPlm_deriv_array:    Associated Legendre Polynomials and Spherical Harmonics.
                                                              (line 194)
* gsl_sf_legendre_sphPlm_e:              Associated Legendre Polynomials and Spherical Harmonics.
                                                              (line 176)
* gsl_sf_lnbeta:                         Beta Functions.      (line  13)
* gsl_sf_lnbeta_e:                       Beta Functions.      (line  14)
* gsl_sf_lnchoose:                       Factorials.          (line  44)
* gsl_sf_lnchoose_e:                     Factorials.          (line  45)
* gsl_sf_lncosh:                         Hyperbolic Trigonometric Functions.
                                                              (line  10)
* gsl_sf_lncosh_e:                       Hyperbolic Trigonometric Functions.
                                                              (line  11)
* gsl_sf_lndoublefact:                   Factorials.          (line  32)
* gsl_sf_lndoublefact_e:                 Factorials.          (line  33)
* gsl_sf_lnfact:                         Factorials.          (line  25)
* gsl_sf_lnfact_e:                       Factorials.          (line  26)
* gsl_sf_lngamma:                        Gamma Functions.     (line  22)
* gsl_sf_lngamma_complex_e:              Gamma Functions.     (line  54)
* gsl_sf_lngamma_e:                      Gamma Functions.     (line  23)
* gsl_sf_lngamma_sgn_e:                  Gamma Functions.     (line  30)
* gsl_sf_lnpoch:                         Pochhammer Symbol.   (line  14)
* gsl_sf_lnpoch_e:                       Pochhammer Symbol.   (line  15)
* gsl_sf_lnpoch_sgn_e:                   Pochhammer Symbol.   (line  20)
* gsl_sf_lnsinh:                         Hyperbolic Trigonometric Functions.
                                                              (line   6)
* gsl_sf_lnsinh_e:                       Hyperbolic Trigonometric Functions.
                                                              (line   7)
* gsl_sf_log:                            Logarithm and Related Functions.
                                                              (line  10)
* gsl_sf_log_1plusx:                     Logarithm and Related Functions.
                                                              (line  25)
* gsl_sf_log_1plusx_e:                   Logarithm and Related Functions.
                                                              (line  26)
* gsl_sf_log_1plusx_mx:                  Logarithm and Related Functions.
                                                              (line  30)
* gsl_sf_log_1plusx_mx_e:                Logarithm and Related Functions.
                                                              (line  31)
* gsl_sf_log_abs:                        Logarithm and Related Functions.
                                                              (line  14)
* gsl_sf_log_abs_e:                      Logarithm and Related Functions.
                                                              (line  15)
* gsl_sf_log_e:                          Logarithm and Related Functions.
                                                              (line  11)
* gsl_sf_log_erfc:                       Log Complementary Error Function.
                                                              (line   6)
* gsl_sf_log_erfc_e:                     Log Complementary Error Function.
                                                              (line   7)
* gsl_sf_mathieu_a:                      Mathieu Function Characteristic Values.
                                                              (line   6)
* gsl_sf_mathieu_alloc:                  Mathieu Function Workspace.
                                                              (line  10)
* gsl_sf_mathieu_a_array:                Mathieu Function Characteristic Values.
                                                              (line  15)
* gsl_sf_mathieu_a_e:                    Mathieu Function Characteristic Values.
                                                              (line   7)
* gsl_sf_mathieu_b:                      Mathieu Function Characteristic Values.
                                                              (line   9)
* gsl_sf_mathieu_b_array:                Mathieu Function Characteristic Values.
                                                              (line  18)
* gsl_sf_mathieu_b_e:                    Mathieu Function Characteristic Values.
                                                              (line  10)
* gsl_sf_mathieu_ce:                     Angular Mathieu Functions.
                                                              (line   6)
* gsl_sf_mathieu_ce_array:               Angular Mathieu Functions.
                                                              (line  15)
* gsl_sf_mathieu_ce_e:                   Angular Mathieu Functions.
                                                              (line   7)
* gsl_sf_mathieu_free:                   Mathieu Function Workspace.
                                                              (line  17)
* gsl_sf_mathieu_Mc:                     Radial Mathieu Functions.
                                                              (line   6)
* gsl_sf_mathieu_Mc_array:               Radial Mathieu Functions.
                                                              (line  19)
* gsl_sf_mathieu_Mc_e:                   Radial Mathieu Functions.
                                                              (line   7)
* gsl_sf_mathieu_Ms:                     Radial Mathieu Functions.
                                                              (line   9)
* gsl_sf_mathieu_Ms_array:               Radial Mathieu Functions.
                                                              (line  22)
* gsl_sf_mathieu_Ms_e:                   Radial Mathieu Functions.
                                                              (line  10)
* gsl_sf_mathieu_se:                     Angular Mathieu Functions.
                                                              (line   9)
* gsl_sf_mathieu_se_array:               Angular Mathieu Functions.
                                                              (line  18)
* gsl_sf_mathieu_se_e:                   Angular Mathieu Functions.
                                                              (line  10)
* gsl_sf_multiply_e:                     Elementary Operations.
                                                              (line  10)
* gsl_sf_multiply_err_e:                 Elementary Operations.
                                                              (line  15)
* gsl_sf_poch:                           Pochhammer Symbol.   (line   6)
* gsl_sf_pochrel:                        Pochhammer Symbol.   (line  27)
* gsl_sf_pochrel_e:                      Pochhammer Symbol.   (line  28)
* gsl_sf_poch_e:                         Pochhammer Symbol.   (line   7)
* gsl_sf_polar_to_rect:                  Conversion Functions.
                                                              (line   6)
* gsl_sf_pow_int:                        Power Function.      (line  10)
* gsl_sf_pow_int_e:                      Power Function.      (line  11)
* gsl_sf_psi:                            Digamma Function.    (line  11)
* gsl_sf_psi_1:                          Trigamma Function.   (line  11)
* gsl_sf_psi_1piy:                       Digamma Function.    (line  16)
* gsl_sf_psi_1piy_e:                     Digamma Function.    (line  17)
* gsl_sf_psi_1_e:                        Trigamma Function.   (line  12)
* gsl_sf_psi_1_int:                      Trigamma Function.   (line   6)
* gsl_sf_psi_1_int_e:                    Trigamma Function.   (line   7)
* gsl_sf_psi_e:                          Digamma Function.    (line  12)
* gsl_sf_psi_int:                        Digamma Function.    (line   6)
* gsl_sf_psi_int_e:                      Digamma Function.    (line   7)
* gsl_sf_psi_n:                          Polygamma Function.  (line   6)
* gsl_sf_psi_n_e:                        Polygamma Function.  (line   7)
* gsl_sf_rect_to_polar:                  Conversion Functions.
                                                              (line  12)
* gsl_sf_Shi:                            Hyperbolic Integrals.
                                                              (line   6)
* gsl_sf_Shi_e:                          Hyperbolic Integrals.
                                                              (line   7)
* gsl_sf_Si:                             Trigonometric Integrals.
                                                              (line   6)
* gsl_sf_sin:                            Circular Trigonometric Functions.
                                                              (line   6)
* gsl_sf_sinc:                           Circular Trigonometric Functions.
                                                              (line  20)
* gsl_sf_sinc_e:                         Circular Trigonometric Functions.
                                                              (line  21)
* gsl_sf_sin_e:                          Circular Trigonometric Functions.
                                                              (line   7)
* gsl_sf_sin_err_e:                      Trigonometric Functions With Error Estimates.
                                                              (line   6)
* gsl_sf_Si_e:                           Trigonometric Integrals.
                                                              (line   7)
* gsl_sf_synchrotron_1:                  Synchrotron Functions.
                                                              (line   9)
* gsl_sf_synchrotron_1_e:                Synchrotron Functions.
                                                              (line  10)
* gsl_sf_synchrotron_2:                  Synchrotron Functions.
                                                              (line  15)
* gsl_sf_synchrotron_2_e:                Synchrotron Functions.
                                                              (line  16)
* gsl_sf_taylorcoeff:                    Factorials.          (line  50)
* gsl_sf_taylorcoeff_e:                  Factorials.          (line  51)
* gsl_sf_transport_2:                    Transport Functions. (line  10)
* gsl_sf_transport_2_e:                  Transport Functions. (line  11)
* gsl_sf_transport_3:                    Transport Functions. (line  15)
* gsl_sf_transport_3_e:                  Transport Functions. (line  16)
* gsl_sf_transport_4:                    Transport Functions. (line  20)
* gsl_sf_transport_4_e:                  Transport Functions. (line  21)
* gsl_sf_transport_5:                    Transport Functions. (line  25)
* gsl_sf_transport_5_e:                  Transport Functions. (line  26)
* gsl_sf_zeta:                           Riemann Zeta Function.
                                                              (line  14)
* gsl_sf_zetam1:                         Riemann Zeta Function Minus One.
                                                              (line  14)
* gsl_sf_zetam1_e:                       Riemann Zeta Function Minus One.
                                                              (line  15)
* gsl_sf_zetam1_int:                     Riemann Zeta Function Minus One.
                                                              (line  10)
* gsl_sf_zetam1_int_e:                   Riemann Zeta Function Minus One.
                                                              (line  11)
* gsl_sf_zeta_e:                         Riemann Zeta Function.
                                                              (line  15)
* gsl_sf_zeta_int:                       Riemann Zeta Function.
                                                              (line   9)
* gsl_sf_zeta_int_e:                     Riemann Zeta Function.
                                                              (line  10)
* GSL_SIGN:                              Testing the Sign of Numbers.
                                                              (line   6)
* gsl_siman_solve:                       Simulated Annealing functions.
                                                              (line   6)
* gsl_sort:                              Sorting vectors.     (line  23)
* gsl_sort2:                             Sorting vectors.     (line  28)
* gsl_sort_index:                        Sorting vectors.     (line  44)
* gsl_sort_largest:                      Selecting the k smallest or largest elements.
                                                              (line  23)
* gsl_sort_largest_index:                Selecting the k smallest or largest elements.
                                                              (line  49)
* gsl_sort_smallest:                     Selecting the k smallest or largest elements.
                                                              (line  16)
* gsl_sort_smallest_index:               Selecting the k smallest or largest elements.
                                                              (line  41)
* gsl_sort_vector:                       Sorting vectors.     (line  35)
* gsl_sort_vector2:                      Sorting vectors.     (line  39)
* gsl_sort_vector_index:                 Sorting vectors.     (line  54)
* gsl_sort_vector_largest:               Selecting the k smallest or largest elements.
                                                              (line  32)
* gsl_sort_vector_largest_index:         Selecting the k smallest or largest elements.
                                                              (line  59)
* gsl_sort_vector_smallest:              Selecting the k smallest or largest elements.
                                                              (line  30)
* gsl_sort_vector_smallest_index:        Selecting the k smallest or largest elements.
                                                              (line  57)
* gsl_spblas_dgemm:                      Sparse BLAS operations.
                                                              (line  15)
* gsl_spblas_dgemv:                      Sparse BLAS operations.
                                                              (line   6)
* gsl_splinalg_itersolve_alloc:          Iterating the Sparse Linear System.
                                                              (line   9)
* gsl_splinalg_itersolve_free:           Iterating the Sparse Linear System.
                                                              (line  18)
* gsl_splinalg_itersolve_gmres:          Sparse Iterative Solvers Types.
                                                              (line   9)
* gsl_splinalg_itersolve_iterate:        Iterating the Sparse Linear System.
                                                              (line  26)
* gsl_splinalg_itersolve_name:           Iterating the Sparse Linear System.
                                                              (line  22)
* gsl_splinalg_itersolve_normr:          Iterating the Sparse Linear System.
                                                              (line  44)
* gsl_spline2d_alloc:                    2D Higher-level Interface.
                                                              (line  13)
* gsl_spline2d_eval:                     2D Higher-level Interface.
                                                              (line  28)
* gsl_spline2d_eval_deriv_x:             2D Higher-level Interface.
                                                              (line  35)
* gsl_spline2d_eval_deriv_xx:            2D Higher-level Interface.
                                                              (line  49)
* gsl_spline2d_eval_deriv_xx_e:          2D Higher-level Interface.
                                                              (line  52)
* gsl_spline2d_eval_deriv_xy:            2D Higher-level Interface.
                                                              (line  63)
* gsl_spline2d_eval_deriv_xy_e:          2D Higher-level Interface.
                                                              (line  66)
* gsl_spline2d_eval_deriv_x_e:           2D Higher-level Interface.
                                                              (line  38)
* gsl_spline2d_eval_deriv_y:             2D Higher-level Interface.
                                                              (line  42)
* gsl_spline2d_eval_deriv_yy:            2D Higher-level Interface.
                                                              (line  56)
* gsl_spline2d_eval_deriv_yy_e:          2D Higher-level Interface.
                                                              (line  59)
* gsl_spline2d_eval_deriv_y_e:           2D Higher-level Interface.
                                                              (line  45)
* gsl_spline2d_eval_e:                   2D Higher-level Interface.
                                                              (line  31)
* gsl_spline2d_free:                     2D Higher-level Interface.
                                                              (line  20)
* gsl_spline2d_get:                      2D Higher-level Interface.
                                                              (line  73)
* gsl_spline2d_init:                     2D Higher-level Interface.
                                                              (line  16)
* gsl_spline2d_min_size:                 2D Higher-level Interface.
                                                              (line  25)
* gsl_spline2d_name:                     2D Higher-level Interface.
                                                              (line  22)
* gsl_spline2d_set:                      2D Higher-level Interface.
                                                              (line  70)
* gsl_spline_alloc:                      1D Higher-level Interface.
                                                              (line  13)
* gsl_spline_eval:                       1D Higher-level Interface.
                                                              (line  26)
* gsl_spline_eval_deriv:                 1D Higher-level Interface.
                                                              (line  31)
* gsl_spline_eval_deriv2:                1D Higher-level Interface.
                                                              (line  36)
* gsl_spline_eval_deriv2_e:              1D Higher-level Interface.
                                                              (line  38)
* gsl_spline_eval_deriv_e:               1D Higher-level Interface.
                                                              (line  33)
* gsl_spline_eval_e:                     1D Higher-level Interface.
                                                              (line  28)
* gsl_spline_eval_integ:                 1D Higher-level Interface.
                                                              (line  41)
* gsl_spline_eval_integ_e:               1D Higher-level Interface.
                                                              (line  43)
* gsl_spline_free:                       1D Higher-level Interface.
                                                              (line  19)
* gsl_spline_init:                       1D Higher-level Interface.
                                                              (line  16)
* gsl_spline_min_size:                   1D Higher-level Interface.
                                                              (line  23)
* gsl_spline_name:                       1D Higher-level Interface.
                                                              (line  21)
* gsl_spmatrix_add:                      Sparse Matrices Operations.
                                                              (line   6)
* gsl_spmatrix_alloc:                    Sparse Matrices Allocation.
                                                              (line  12)
* gsl_spmatrix_alloc_nzmax:              Sparse Matrices Allocation.
                                                              (line  26)
* gsl_spmatrix_ccs:                      Sparse Matrices Compressed Format.
                                                              (line   9)
* gsl_spmatrix_crs:                      Sparse Matrices Compressed Format.
                                                              (line  16)
* gsl_spmatrix_d2sp:                     Sparse Matrices Conversion Between Sparse and Dense.
                                                              (line   9)
* gsl_spmatrix_equal:                    Sparse Matrices Properties.
                                                              (line   9)
* gsl_spmatrix_fprintf:                  Sparse Matrices Reading and Writing.
                                                              (line  24)
* gsl_spmatrix_fread:                    Sparse Matrices Reading and Writing.
                                                              (line  14)
* gsl_spmatrix_free:                     Sparse Matrices Allocation.
                                                              (line  56)
* gsl_spmatrix_fscanf:                   Sparse Matrices Reading and Writing.
                                                              (line  34)
* gsl_spmatrix_fwrite:                   Sparse Matrices Reading and Writing.
                                                              (line   6)
* gsl_spmatrix_get:                      Sparse Matrices Accessing Elements.
                                                              (line   6)
* gsl_spmatrix_memcpy:                   Sparse Matrices Copying.
                                                              (line   6)
* gsl_spmatrix_minmax:                   Sparse Matrices Finding Maximum and Minimum Elements.
                                                              (line   6)
* gsl_spmatrix_nnz:                      Sparse Matrices Properties.
                                                              (line   6)
* gsl_spmatrix_ptr:                      Sparse Matrices Accessing Elements.
                                                              (line  16)
* gsl_spmatrix_realloc:                  Sparse Matrices Allocation.
                                                              (line  49)
* gsl_spmatrix_scale:                    Sparse Matrices Operations.
                                                              (line  11)
* gsl_spmatrix_set:                      Sparse Matrices Accessing Elements.
                                                              (line  11)
* gsl_spmatrix_set_zero:                 Sparse Matrices Initializing Elements.
                                                              (line  11)
* gsl_spmatrix_sp2d:                     Sparse Matrices Conversion Between Sparse and Dense.
                                                              (line  14)
* gsl_spmatrix_transpose:                Sparse Matrices Exchanging Rows and Columns.
                                                              (line  13)
* gsl_spmatrix_transpose2:               Sparse Matrices Exchanging Rows and Columns.
                                                              (line  18)
* gsl_spmatrix_transpose_memcpy:         Sparse Matrices Exchanging Rows and Columns.
                                                              (line   6)
* gsl_stats_absdev:                      Absolute deviation.  (line   6)
* gsl_stats_absdev_m:                    Absolute deviation.  (line  19)
* gsl_stats_correlation:                 Correlation.         (line   6)
* gsl_stats_covariance:                  Covariance.          (line   6)
* gsl_stats_covariance_m:                Covariance.          (line  14)
* gsl_stats_kurtosis:                    Higher moments (skewness and kurtosis).
                                                              (line  29)
* gsl_stats_kurtosis_m_sd:               Higher moments (skewness and kurtosis).
                                                              (line  40)
* gsl_stats_lag1_autocorrelation:        Autocorrelation.     (line   6)
* gsl_stats_lag1_autocorrelation_m:      Autocorrelation.     (line  15)
* gsl_stats_max:                         Maximum and Minimum values.
                                                              (line  12)
* gsl_stats_max_index:                   Maximum and Minimum values.
                                                              (line  37)
* gsl_stats_mean:                        Mean and standard deviation and variance.
                                                              (line   6)
* gsl_stats_median_from_sorted_data:     Median and Percentiles.
                                                              (line  10)
* gsl_stats_min:                         Maximum and Minimum values.
                                                              (line  22)
* gsl_stats_minmax:                      Maximum and Minimum values.
                                                              (line  32)
* gsl_stats_minmax_index:                Maximum and Minimum values.
                                                              (line  53)
* gsl_stats_min_index:                   Maximum and Minimum values.
                                                              (line  45)
* gsl_stats_quantile_from_sorted_data:   Median and Percentiles.
                                                              (line  25)
* gsl_stats_sd:                          Mean and standard deviation and variance.
                                                              (line  44)
* gsl_stats_sd_m:                        Mean and standard deviation and variance.
                                                              (line  46)
* gsl_stats_sd_with_fixed_mean:          Mean and standard deviation and variance.
                                                              (line  73)
* gsl_stats_skew:                        Higher moments (skewness and kurtosis).
                                                              (line   6)
* gsl_stats_skew_m_sd:                   Higher moments (skewness and kurtosis).
                                                              (line  19)
* gsl_stats_spearman:                    Correlation.         (line  18)
* gsl_stats_tss:                         Mean and standard deviation and variance.
                                                              (line  52)
* gsl_stats_tss_m:                       Mean and standard deviation and variance.
                                                              (line  54)
* gsl_stats_variance:                    Mean and standard deviation and variance.
                                                              (line  18)
* gsl_stats_variance_m:                  Mean and standard deviation and variance.
                                                              (line  36)
* gsl_stats_variance_with_fixed_mean:    Mean and standard deviation and variance.
                                                              (line  63)
* gsl_stats_wabsdev:                     Weighted Samples.    (line  83)
* gsl_stats_wabsdev_m:                   Weighted Samples.    (line  91)
* gsl_stats_wkurtosis:                   Weighted Samples.    (line 110)
* gsl_stats_wkurtosis_m_sd:              Weighted Samples.    (line 116)
* gsl_stats_wmean:                       Weighted Samples.    (line  14)
* gsl_stats_wsd:                         Weighted Samples.    (line  42)
* gsl_stats_wsd_m:                       Weighted Samples.    (line  48)
* gsl_stats_wsd_with_fixed_mean:         Weighted Samples.    (line  64)
* gsl_stats_wskew:                       Weighted Samples.    (line  97)
* gsl_stats_wskew_m_sd:                  Weighted Samples.    (line 103)
* gsl_stats_wtss:                        Weighted Samples.    (line  71)
* gsl_stats_wtss_m:                      Weighted Samples.    (line  73)
* gsl_stats_wvariance:                   Weighted Samples.    (line  22)
* gsl_stats_wvariance_m:                 Weighted Samples.    (line  36)
* gsl_stats_wvariance_with_fixed_mean:   Weighted Samples.    (line  53)
* gsl_strerror:                          Error Codes.         (line  37)
* gsl_sum_levin_utrunc_accel:            Acceleration functions without error estimation.
                                                              (line  32)
* gsl_sum_levin_utrunc_alloc:            Acceleration functions without error estimation.
                                                              (line  22)
* gsl_sum_levin_utrunc_free:             Acceleration functions without error estimation.
                                                              (line  28)
* gsl_sum_levin_u_accel:                 Acceleration functions.
                                                              (line  31)
* gsl_sum_levin_u_alloc:                 Acceleration functions.
                                                              (line  23)
* gsl_sum_levin_u_free:                  Acceleration functions.
                                                              (line  28)
* gsl_vector_add:                        Vector operations.   (line   6)
* gsl_vector_add_constant:               Vector operations.   (line  32)
* gsl_vector_alloc:                      Vector allocation.   (line  14)
* gsl_vector_calloc:                     Vector allocation.   (line  21)
* gsl_vector_complex_const_imag:         Vector views.        (line 108)
* gsl_vector_complex_const_real:         Vector views.        (line  97)
* gsl_vector_complex_imag:               Vector views.        (line 106)
* gsl_vector_complex_real:               Vector views.        (line  95)
* gsl_vector_const_ptr:                  Accessing vector elements.
                                                              (line  54)
* gsl_vector_const_subvector:            Vector views.        (line  29)
* gsl_vector_const_subvector_with_stride: Vector views.       (line  59)
* gsl_vector_const_view_array:           Vector views.        (line 119)
* gsl_vector_const_view_array_with_stride: Vector views.      (line 142)
* gsl_vector_div:                        Vector operations.   (line  23)
* gsl_vector_equal:                      Vector properties.   (line  18)
* gsl_vector_fprintf:                    Reading and writing vectors.
                                                              (line  26)
* gsl_vector_fread:                      Reading and writing vectors.
                                                              (line  17)
* gsl_vector_free:                       Vector allocation.   (line  25)
* gsl_vector_fscanf:                     Reading and writing vectors.
                                                              (line  34)
* gsl_vector_fwrite:                     Reading and writing vectors.
                                                              (line   9)
* gsl_vector_get:                        Accessing vector elements.
                                                              (line  39)
* gsl_vector_isneg:                      Vector properties.   (line  12)
* gsl_vector_isnonneg:                   Vector properties.   (line  13)
* gsl_vector_isnull:                     Vector properties.   (line  10)
* gsl_vector_ispos:                      Vector properties.   (line  11)
* gsl_vector_max:                        Finding maximum and minimum elements of vectors.
                                                              (line   8)
* gsl_vector_max_index:                  Finding maximum and minimum elements of vectors.
                                                              (line  19)
* gsl_vector_memcpy:                     Copying vectors.     (line  12)
* gsl_vector_min:                        Finding maximum and minimum elements of vectors.
                                                              (line  11)
* gsl_vector_minmax:                     Finding maximum and minimum elements of vectors.
                                                              (line  14)
* gsl_vector_minmax_index:               Finding maximum and minimum elements of vectors.
                                                              (line  29)
* gsl_vector_min_index:                  Finding maximum and minimum elements of vectors.
                                                              (line  24)
* gsl_vector_mul:                        Vector operations.   (line  17)
* gsl_vector_ptr:                        Accessing vector elements.
                                                              (line  53)
* gsl_vector_reverse:                    Exchanging elements. (line  14)
* gsl_vector_scale:                      Vector operations.   (line  28)
* gsl_vector_set:                        Accessing vector elements.
                                                              (line  46)
* gsl_vector_set_all:                    Initializing vector elements.
                                                              (line   6)
* gsl_vector_set_basis:                  Initializing vector elements.
                                                              (line  12)
* gsl_vector_set_zero:                   Initializing vector elements.
                                                              (line   9)
* gsl_vector_sub:                        Vector operations.   (line  11)
* gsl_vector_subvector:                  Vector views.        (line  27)
* gsl_vector_subvector_with_stride:      Vector views.        (line  57)
* gsl_vector_swap:                       Copying vectors.     (line  17)
* gsl_vector_swap_elements:              Exchanging elements. (line   9)
* gsl_vector_view_array:                 Vector views.        (line 117)
* gsl_vector_view_array_with_stride:     Vector views.        (line 140)
* gsl_wavelet2d_nstransform:             DWT in two dimension.
                                                              (line  64)
* gsl_wavelet2d_nstransform_forward:     DWT in two dimension.
                                                              (line  67)
* gsl_wavelet2d_nstransform_inverse:     DWT in two dimension.
                                                              (line  70)
* gsl_wavelet2d_nstransform_matrix:      DWT in two dimension.
                                                              (line  76)
* gsl_wavelet2d_nstransform_matrix_forward: DWT in two dimension.
                                                              (line  79)
* gsl_wavelet2d_nstransform_matrix_inverse: DWT in two dimension.
                                                              (line  81)
* gsl_wavelet2d_transform:               DWT in two dimension.
                                                              (line  29)
* gsl_wavelet2d_transform_forward:       DWT in two dimension.
                                                              (line  32)
* gsl_wavelet2d_transform_inverse:       DWT in two dimension.
                                                              (line  35)
* gsl_wavelet2d_transform_matrix:        DWT in two dimension.
                                                              (line  54)
* gsl_wavelet2d_transform_matrix_forward: DWT in two dimension.
                                                              (line  57)
* gsl_wavelet2d_transform_matrix_inverse: DWT in two dimension.
                                                              (line  59)
* gsl_wavelet_alloc:                     DWT Initialization.  (line   9)
* gsl_wavelet_bspline:                   DWT Initialization.  (line  29)
* gsl_wavelet_bspline_centered:          DWT Initialization.  (line  30)
* gsl_wavelet_daubechies:                DWT Initialization.  (line  18)
* gsl_wavelet_daubechies_centered:       DWT Initialization.  (line  19)
* gsl_wavelet_free:                      DWT Initialization.  (line  44)
* gsl_wavelet_haar:                      DWT Initialization.  (line  24)
* gsl_wavelet_haar_centered:             DWT Initialization.  (line  25)
* gsl_wavelet_name:                      DWT Initialization.  (line  40)
* gsl_wavelet_transform:                 DWT in one dimension.
                                                              (line   6)
* gsl_wavelet_transform_forward:         DWT in one dimension.
                                                              (line   9)
* gsl_wavelet_transform_inverse:         DWT in one dimension.
                                                              (line  12)
* gsl_wavelet_workspace_alloc:           DWT Initialization.  (line  51)
* gsl_wavelet_workspace_free:            DWT Initialization.  (line  61)

